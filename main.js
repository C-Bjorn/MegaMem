"use strict";var go=Object.defineProperty;var ho=(n,e,t)=>e in n?go(n,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[e]=t;var on=(n,e,t)=>(ho(n,typeof e!="symbol"?e+"":e,t),t);const C=require("obsidian"),Me=require("path"),Vt=require("fs"),fo=require("events"),at=require("child_process"),Bt=require("perf_hooks"),mo=require("util");function yo(n){const e=Object.create(null,{[Symbol.toStringTag]:{value:"Module"}});if(n){for(const t in n)if(t!=="default"){const i=Object.getOwnPropertyDescriptor(n,t);Object.defineProperty(e,t,i.get?i:{enumerable:!0,get:()=>n[t]})}}return e.default=n,Object.freeze(e)}const Nt=yo(Me);class en{constructor(e,t=!1){this.consolidatedLogPath="",this.consolePrefix="MegaMem:",this.plugin=e,this.debugMode=t,this.initializeConsolidatedLog()}initializeConsolidatedLog(){try{const t=this.plugin.app.vault.adapter.basePath,i=Me.join(t,".obsidian","plugins","megamem-mcp"),s=Me.join(i,"logs");Vt.existsSync(s)||Vt.mkdirSync(s,{recursive:!0}),this.consolidatedLogPath=Me.join(s,"consolidated.log"),this.writeToConsolidatedLog(`
`+"=".repeat(80)),this.writeToConsolidatedLog(`NEW SESSION: ${new Date().toISOString()}`),this.writeToConsolidatedLog("=".repeat(80))}catch(e){console.error(`${this.consolePrefix} Failed to initialize consolidated log:`,e)}}writeToFile(e){try{const t=new Date().toISOString();this.writeToConsolidatedLog(`[${t}] ${e}`)}catch(t){console.error(`${this.consolePrefix} Failed to write to log file:`,t)}}writeToConsolidatedLog(e){try{this.consolidatedLogPath&&Vt.appendFileSync(this.consolidatedLogPath,e+`
`)}catch{}}formatMessage(e,t,i){let s=`[${e}] ${t}`;return i!==void 0&&(i instanceof Error?s+=`
  Error: ${i.message}
  Stack: ${i.stack}`:typeof i=="object"?s+=`
  Data: ${JSON.stringify(i,null,2)}`:s+=`
`).filter(s=>s.trim());for(const s of i){if(e==="stderr"&&this.shouldFilterErrorLine(s))continue;const r=s.length>1e3?s.substring(0,1e3)+"[TRUNCATED]":s;this.writeToFile(`[PYTHON-${e.toUpperCase()}] ${r}`)}}shouldFilterErrorLine(e){return e.includes("LLM generation failed parsing as JSON")?(this.writeToFile("[PYTHON-STDERR] [ERROR] LLM JSON parsing failed - object dump filtered for log readability"),!1):!!(e.includes("Input messages:")||e.includes('"parts":')||e.includes('"video_metadata":')||e.includes('"thought":')||e.includes('"inline_data":')||e.includes('"file_data":')||e.includes('"function_call":')||e.includes('"function_response":')||e.trim().startsWith("{")&&e.includes('"')||e.trim().startsWith("[")&&e.includes('"'))}logSystemInfo(){try{this.getGraphitiVersion().then(e=>{var t;this.debug("System Information:",{platform:process.platform,nodeVersion:process.version,obsidianVersion:((t=this.plugin.app.vault.config)==null?void 0:t.version)||"unknown",pluginVersion:this.plugin.manifest.version,pluginId:this.plugin.manifest.id,GraphitiVersion:e})}).catch(e=>{var t;this.debug("System Information:",{platform:process.platform,nodeVersion:process.version,obsidianVersion:((t=this.plugin.app.vault.config)==null?void 0:t.version)||"unknown",pluginVersion:this.plugin.manifest.version,pluginId:this.plugin.manifest.id,GraphitiVersion:"detection failed"}),this.error("Failed to detect graphiti version",e)})}catch(e){this.error("Failed to log system info",e)}}async getGraphitiVersion(){return new Promise((e,t)=>{var i,s;try{const{spawn:r}=require("child_process"),a=r("python",["-c",`
import sys
version = None

try:
    import importlib.metadata
    version = importlib.metadata.version('graphiti-core')
except:
    pass

if not version:
    try:
        import pkg_resources
        version = pkg_resources.get_distribution('graphiti-core').version
    except:
        pass

if not version:
    try:
        import graphiti_core
        version = getattr(graphiti_core, '__version__', None)
        if not version:
            version = '0.18.0'
    except:
        pass

if not version:
    version = 'unknown'

# Print only the final version result
print(version)
`],{stdio:["pipe","pipe","pipe"]});let l="",c="";(i=a.stdout)==null||i.on("data",p=>{l+=p.toString()}),(s=a.stderr)==null||s.on("data",p=>{c+=p.toString()}),a.on("close",p=>{p===0&&l.trim()?e(l.trim()):t(new Error(`Python process failed (code ${p}): ${c||"No output"}`))}),a.on("error",p=>{t(new Error(`Failed to start Python process: ${p.message}`))})}catch(r){t(new Error(`Exception in getGraphitiVersion: ${r instanceof Error?r.message:String(r)}`))}})}}function bo(n,e){let t;return(...i)=>{t&&clearTimeout(t),t=setTimeout(()=>n(...i),e)}}const ms=n=>{var e;try{if(n&&n.plugins&&n.plugins.plugins){const t=n.plugins.plugins["megamem-mcp"];if(t){const i=((e=t.settings)==null?void 0:e.enableDebugLogging)||!1;return new en(t,i)}}}catch(t){console.error("Failed to initialize GraphitiLogger in PluginDetectionHelper:",t)}return{info:()=>{},debug:()=>{},warn:()=>{},error:()=>{}}};function ys(n){return`.obsidian/plugins/${n}/data.json`}async function bs(n,e,t){try{if(!await n.exists(e))return t.debug(`[PluginDetection] file not found: ${e}`),null;const s=await n.read(e);try{return JSON.parse(s)}catch(r){return t.warn(`[PluginDetection] Failed to parse JSON at ${e}: ${String(r)}`),null}}catch(i){return t.error(`[PluginDetection] Error reading ${e}: ${String(i)}`),null}}async function vo(n){const e=ms(n),t=n.vault&&n.vault.adapter,i="templater-obsidian",s=ys(i),r={detected:!1,enabled:!1,useTemplateFolders:!1,templatesFolder:null,folderTemplates:{},raw:null};if(!t)return e.warn("[PluginDetection] app.vault.adapter not available when reading Templater config"),r;const o=await bs(t,s,e);if(!o)return r;const a=o,l=a.folder_templates||a.settings&&a.settings.folder_templates||a.folderTemplates||a.folder_templates_array||null,c=f=>f?(f.split("/").pop()||f).replace(/\.md$/i,"").trim().toLowerCase():"",p={};if(l&&typeof l=="object"&&!Array.isArray(l))for(const[f,v]of Object.entries(l)){const w=c(f);w&&(p[w]=typeof v=="string"?v:String(v||""))}if(Array.isArray(l))for(const f of l)try{const v=(f==null?void 0:f.folder)||(f==null?void 0:f.folderPath)||"",w=(f==null?void 0:f.template)||(f==null?void 0:f.templatePath)||"",S=c(w);S&&(p[S]=v)}catch{}const g=a.templates_folder||a.settings&&a.settings.templates_folder||null,h=!!Object.keys(p||{}).length||!!(a.settings&&a.settings.use_templates_folder);let m=!1;try{const f=n.plugins&&n.plugins.plugins;f&&f[i]&&(m=!!f[i].enabled)}catch(f){e.debug(`[PluginDetection] could not determine templater enabled state: ${String(f)}`)}const d={detected:!0,enabled:m,useTemplateFolders:h,templatesFolder:g||null,folderTemplates:p||{},raw:o};return e.debug("[PluginDetection] readTemplaterConfig result",{...d,raw:void 0}),d}async function wo(n){const e=ms(n),t=n.vault&&n.vault.adapter,i="periodic-notes",s=ys(i),r={detected:!1,enabled:!1,raw:null};if(!t)return e.warn("[PluginDetection] app.vault.adapter not available when reading Periodic Notes config"),r;const o=await bs(t,s,e);if(!o)return r;const a=o;function l(d){return d?{enabled:!!d.enabled,folder:d.folder||null,format:d.format||null}:{enabled:!1,folder:null,format:null}}const c=l(a.daily),p=l(a.weekly),g=l(a.monthly);let h=!!(c.enabled||p.enabled||g.enabled);try{const d=n.plugins&&n.plugins.plugins;d&&d[i]&&(h=h||!!d[i].enabled)}catch(d){e.debug(`[PluginDetection] could not determine periodic-notes enabled state: ${String(d)}`)}const m={detected:!0,enabled:h,daily:c,weekly:p,monthly:g,raw:o};return e.debug("[PluginDetection] readPeriodicNotesConfig result",{detected:!0,enabled:h,daily:c,weekly:p,monthly:g}),m}const So=vo,_o=wo;class xo{constructor(e,t,i,s){this.client=null,this.reconnectAttempts=0,this.baseReconnectDelay=1e3,this.maxReconnectDelay=3e4,this.isRetrying=!1,this.lastConnectionStatus=null,this.plugin=e,this.settings=t,this.syncRegistryService=i,this.vaultRegistryService=s,this.logger=new en(e,t.enableDebugLogging)}sleep(e){return new Promise(t=>setTimeout(t,e))}calculateBackoffDelay(e){const t=this.reconnectAttempts;let i=this.baseReconnectDelay;(e==null?void 0:e.code)==="ECONNREFUSED"?i=this.baseReconnectDelay*2:((e==null?void 0:e.code)==="ECONNRESET"||(e==null?void 0:e.code)==="EPIPE")&&(i=this.baseReconnectDelay*.5);const s=i*Math.pow(1.5,Math.min(t,10)),r=Math.random()*.3+.85,o=Math.min(s*r,this.maxReconnectDelay);return Math.floor(o)}async connectWithRetry(){for(this.isRetrying=!0;this.settings.wsEnabled&&!this.client;)try{await this.connectOnce(),this.reconnectAttempts=0,this.isRetrying=!1;return}catch(e){if(this.reconnectAttempts++,(this.reconnectAttempts===1||this.reconnectAttempts%20===0)&&this.logger.error(`[WEBSOCKET] Connection failed (attempt ${this.reconnectAttempts}):`,e),!this.settings.wsEnabled){this.isRetrying=!1;return}const t=this.calculateBackoffDelay(e);await this.sleep(t)}this.isRetrying=!1}async connectOnce(){return new Promise((e,t)=>{try{const i=`ws://localhost:${this.settings.wsPort}?token=${this.settings.wsAuthToken}`;this.client=new WebSocket(i);const s=setTimeout(()=>{this.client&&(this.client.close(),this.client=null),t(new Error("Connection timeout"))},1e4);this.client.onopen=async()=>{if(clearTimeout(s),this.logger.debug("[WEBSOCKET] Connection established successfully"),this.lastConnectionStatus=!0,await new Promise(r=>setTimeout(r,100)),this.vaultRegistryService){this.logger.debug("[WEBSOCKET] Triggering vault auto-registration...");const r=await this.vaultRegistryService.autoRegisterCurrentVault(!1,this);r?this.logger.debug(`[WEBSOCKET] Vault auto-registration successful: ${r.name} (${r.id})`):this.logger.error("[WEBSOCKET] Vault auto-registration failed")}else this.logger.warn("[WEBSOCKET] No vault registry service available");e()},this.client.onmessage=r=>{this.handleMessage(r.data)},this.client.onclose=r=>{if(clearTimeout(s),this.client=null,this.vaultRegistryService&&this.lastConnectionStatus!==!1){const o=this.vaultRegistryService.getActiveVaultId();o&&(this.vaultRegistryService.updateVaultConnection(o,!1),this.lastConnectionStatus=!1)}r.code!==1e3&&this.settings.wsEnabled&&!this.isRetrying&&this.connectWithRetry()},this.client.onerror=r=>{clearTimeout(s),this.client&&(this.client.close(),this.client=null),t(r)}}catch(i){t(i)}})}async start(){if(!this.settings.wsEnabled){this.logger.debug("[WEBSOCKET] Service disabled in settings");return}this.logger.debug("[WEBSOCKET] Service enabled in settings - connecting..."),this.connect()}connect(){this.isRetrying||this.connectWithRetry()}async stop(){this.logger.debug("[WEBSOCKET] Stopping WebSocket service"),this.isRetrying=!1,this.reconnectTimer&&(window.clearTimeout(this.reconnectTimer),this.reconnectTimer=void 0),this.client&&(this.logger.debug("[WEBSOCKET] Closing WebSocket connection"),this.client.close(1e3,"Client shutdown"),this.client=null),this.reconnectAttempts=0}sendMessage(e){if(!this.client){this.logger.error("[WEBSOCKET] ERROR: No WebSocket client instance");return}if(this.client.readyState===WebSocket.OPEN)try{const t=JSON.stringify(e);this.logger.debug(`[WEBSOCKET] Sending message type: ${e.type}`),this.client.send(t)}catch(t){this.logger.error("[WEBSOCKET] ERROR sending message:",t)}else this.logger.warn(`[WEBSOCKET] Cannot send message - WebSocket not connected. ReadyState: ${this.client.readyState}`)}sendVaultRegistration(e){if(!this.client||this.client.readyState!==WebSocket.OPEN)return this.logger.warn("[WEBSOCKET] Cannot send vault registration - WebSocket not connected"),!1;const t={type:"register",payload:{vaultName:e.name,vaultPath:e.path,vaultId:e.id,pluginVersion:this.plugin.manifest.version,authToken:this.settings.wsAuthToken}};return this.logger.debug(`[WEBSOCKET] Sending vault registration to server: ${e.name} (${e.id})`),this.sendMessage(t),!0}isConnected(){return this.client!==null&&this.client.readyState===WebSocket.OPEN}async handleMessage(e){try{const t=JSON.parse(e);switch(this.logger.debug("Received WebSocket message:",t.type),t.type){case"connected":this.handleConnected(t);break;case"registered":this.handleRegistered(t);break;case"file:read":await this.handleFileRead(t);break;case"file:write":await this.handleFileWrite(t);break;case"file:create":await this.handleFileCreate(t);break;case"file:delete":await this.handleFileDelete(t);break;case"file:rename":await this.handleFileRename(t);break;case"file:search":this.handleFileSearch(t);break;case"vault:list":this.handleVaultList(t);break;case"vault:info":this.handleVaultInfo(t);break;case"ping":this.handlePing(t);break;case"folder:explore":await this.handleFolderExplore(t);break;case"folder:create":await this.handleFolderCreate(t);break;case"folder:rename":await this.handleFolderRename(t);break;case"folder:delete":await this.handleFolderDelete(t);break;case"templater:check":await this.handleTemplaterCheck(t);break;case"file:create_with_template":await this.handleCreateWithTemplate(t);break;case"file:frontmatter_edit":await this.handleFrontmatterEdit(t);break;case"file:append":await this.handleAppendEdit(t);break;case"file:range_edit":await this.handleRangeEdit(t);break;case"file:editor_edit":await this.handleEditorEdit(t);break;case"error":this.handleError(t);break;default:this.handleUnknownMessage(t)}}catch(t){this.logger.error("Error handling WebSocket message:",t),this.sendErrorResponse("error","Invalid message format")}}async handleFileRead(e){this.logger.debug("Handling file:read request",{path:e.payload.path});try{const t=e.payload;if(!(t!=null&&t.path)){this.sendErrorResponse("file:read:response","Missing file path parameter",e.id);return}const i=this.plugin.app.vault.getAbstractFileByPath(t.path);if(!i||!(i instanceof C.TFile)){this.sendErrorResponse("file:read:response","File not found",e.id);return}const s=await this.plugin.app.vault.read(i),r={id:e.id,type:"file:read:response",success:!0,timestamp:new Date().toISOString(),payload:{content:s,path:t.path,metadata:{size:s.length,lastModified:new Date().toISOString()}}};this.sendMessage(r)}catch{this.sendErrorResponse("file:read:response","Failed to read file",e.id)}}async handleFileWrite(e){this.logger.debug("Handling file:write request",{path:e.payload.path});try{const t=e.payload;if(!(t!=null&&t.path)||t.content===void 0){this.sendErrorResponse("file:write:response","Missing file path or content parameter",e.id);return}const i=this.plugin.app.vault.getAbstractFileByPath(t.path);if(!i||!(i instanceof C.TFile)){this.sendErrorResponse("file:write:response","File not found",e.id);return}await this.plugin.app.vault.modify(i,t.content);const s={id:e.id,type:"file:write:response",success:!0,timestamp:new Date().toISOString(),payload:{path:t.path,message:"File successfully written"}};this.sendMessage(s)}catch{this.sendErrorResponse("file:write:response","Failed to write file",e.id)}}async handleFileCreate(e){this.logger.debug("Handling file:create request",{path:e.payload.path});try{const t=e.payload;if(!(t!=null&&t.path)||t.content===void 0){this.sendErrorResponse("file:create:response","Missing file path or content parameter",e.id);return}await this.plugin.app.vault.create(t.path,t.content);const i={id:e.id,type:"file:create:response",success:!0,timestamp:new Date().toISOString(),payload:{path:t.path,created:!0,message:"File successfully created"}};this.sendMessage(i)}catch{this.sendErrorResponse("file:create:response","Failed to create file",e.id)}}async handleFileDelete(e){this.logger.debug("Handling file:delete request",{path:e.payload.path});try{const t=e.payload;if(!(t!=null&&t.path)){this.sendErrorResponse("file:delete:response","Missing file path parameter",e.id);return}const i=this.plugin.app.vault.getAbstractFileByPath(t.path);if(!i){this.sendErrorResponse("file:delete:response","File not found",e.id);return}await this.plugin.app.vault.delete(i,!1);const s={id:e.id,type:"file:delete:response",success:!0,timestamp:new Date().toISOString(),payload:{path:t.path,message:"File successfully deleted"}};this.sendMessage(s)}catch{this.sendErrorResponse("file:delete:response","Failed to delete file",e.id)}}async handleFileRename(e){this.logger.debug("Handling file:rename request",{oldPath:e.payload.path,newPath:e.payload.newPath});try{const t=e.payload;if(!(t!=null&&t.path)||!(t!=null&&t.newPath)){this.sendErrorResponse("file:rename:response","Missing file path or newPath parameter",e.id);return}const i=this.plugin.app.vault.getAbstractFileByPath(t.path);if(!i){this.sendErrorResponse("file:rename:response","File not found",e.id);return}await this.plugin.app.fileManager.renameFile(i,t.newPath);const s={id:e.id,type:"file:rename:response",success:!0,timestamp:new Date().toISOString(),payload:{oldPath:t.path,newPath:t.newPath,message:"File successfully renamed"}};this.sendMessage(s)}catch{this.sendErrorResponse("file:rename:response","Failed to rename file",e.id)}}async handleFileSearch(e){var t;this.logger.debug("[WEBSOCKET] Handling file:search request",{query:(t=e.payload)==null?void 0:t.query});try{const i=e.payload||{},s=(i.query||"").toString();if(!s){this.sendErrorResponse("file:search:response","Missing search query parameter",e.id);return}const r=(i.search_mode||i.searchMode||"both").toString().toLowerCase(),o=Number(i.max_results??i.maxResults??100),a=i.include_context!==void 0?!!i.include_context:i.includeContext!==void 0?!!i.includeContext:!0,l=Number(i.contextRadius??50),p=new Set(["filename","content","both"]).has(r)?r:"both";this.logger.debug("[WEBSOCKET] Search parameters",{query:s,mode:p,maxResults:o,includeContext:a});const g=[],h=this.plugin.app.vault.getMarkdownFiles();if(p==="filename"||p==="both"){const d=s.toLowerCase(),f=h.filter(v=>v.path.toLowerCase().includes(d)||v.basename.toLowerCase().includes(d));for(const v of f)if(g.push({path:v.path,name:v.name,basename:v.basename,extension:v.extension,matchType:"filename",score:100}),g.length>=o&&p==="filename")break}if((p==="content"||p==="both")&&Math.max(0,o-g.length)>0){let f=null;try{f=window.prepareSimpleSearch?window.prepareSimpleSearch(s):null}catch{f=null}const v=new Set(g.map(w=>w.path));for(const w of h)if(!v.has(w.path))try{const S=typeof this.plugin.app.vault.cachedRead=="function"?await this.plugin.app.vault.cachedRead(w):await this.plugin.app.vault.read(w);let x=!1,E=0,D;if(f)try{const M=f(S);M&&M.score>0&&(x=!0,E=Number(M.score)||1,M.matches&&(D=Array.isArray(M.matches)?M.matches:void 0))}catch(M){this.logger.warn("[WEBSOCKET] prepareSimpleSearch failed, falling back",{file:w.path,error:M})}if(x||S&&S.toLowerCase().includes(s.toLowerCase())&&(x=!0,E=10),x){const M={path:w.path,name:w.name,basename:w.basename,extension:w.extension,matchType:"content",score:E};if(a)try{const N=this.extractContextFromMatches(S,D||this._findAllMatches(S,s),s,l);N&&N.length&&(M.matches=N)}catch(N){this.logger.warn("[WEBSOCKET] Context extraction failed",{file:w.path,error:N})}if(g.push(M),v.add(w.path),g.length>=o)break}}catch(S){this.logger.warn("[WEBSOCKET] Failed to search content of file",{path:w.path,error:S})}}g.sort((d,f)=>{const v=Number(d.score||0),w=Number(f.score||0);return w!==v?w-v:d.matchType==="filename"&&f.matchType!=="filename"?-1:f.matchType==="filename"&&d.matchType!=="filename"?1:d.path.localeCompare(f.path)});const m={id:e.id,type:"file:search:response",success:!0,timestamp:new Date().toISOString(),payload:{results:g.slice(0,o),totalResults:g.length,query:s,searchMode:p}};this.sendMessage(m)}catch(i){this.logger.error("[WEBSOCKET] file:search handler error",{error:i}),this.sendErrorResponse("file:search:response","Failed to search files",e.id)}}_findAllMatches(e,t){const i=[];if(!e||!t)return i;const s=e.toLowerCase(),r=t.toLowerCase();let o=0;for(;;){const a=s.indexOf(r,o);if(a===-1)break;i.push([a,a+r.length]),o=a+r.length}return i}extractContextFromMatches(e,t,i,s=50){const r=(e||"").split(`
`),o=[],a=new Set;for(const[l,c]of t){let p=0,g=0;for(let x=0;x<r.length;x++){const E=r[x].length+1;if(p+E>l){g=x;break}p+=E}if(a.has(g))continue;a.add(g);const h=r[g]||"",m=p,d=Math.max(0,l-m),f=Math.min(h.length,c-m),v=Math.max(0,d-s),w=Math.min(h.length,f+s);let S=h.substring(v,w);if(v>0&&(S="..."+S),w<h.length&&(S=S+"..."),o.push({line:g+1,text:S.trim(),highlight:h.substring(d,f)}),o.length>=5)break}return o}handleVaultList(e){var t;this.logger.debug("Handling vault:list request");try{const i=((t=this.vaultRegistryService)==null?void 0:t.getAllVaults())||[],s={id:e.id,type:"vault:list:response",success:!0,timestamp:new Date().toISOString(),payload:{vaults:i,totalVaults:i.length}};this.sendMessage(s)}catch{this.sendErrorResponse("vault:list:response","Failed to list vaults",e.id)}}handleVaultInfo(e){var t,i;this.logger.debug("Handling vault:info request",{vaultId:e.payload.vaultId});try{const r={id:((t=e.payload)==null?void 0:t.vaultId)||((i=this.vaultRegistryService)==null?void 0:i.getActiveVaultId())||this.plugin.app.vault.getName(),name:this.plugin.app.vault.getName(),path:this.plugin.app.vault.adapter.basePath||"",files:this.plugin.app.vault.getMarkdownFiles().length},o={id:e.id,type:"vault:info:response",success:!0,timestamp:new Date().toISOString(),payload:r};this.sendMessage(o)}catch{this.sendErrorResponse("vault:info:response","Failed to get vault info",e.id)}}handlePing(e){this.logger.debug("Handling ping request");const t={id:e.id,type:"pong",success:!0,timestamp:new Date().toISOString(),payload:{vaultName:this.plugin.app.vault.getName(),version:this.plugin.manifest.version,timestamp:new Date().toISOString()}};this.sendMessage(t)}handleError(e){var r,o;if(!e||!e.payload){this.logger.error("Received malformed error message from server",e);return}this.logger.error("Received error message from server",{error:e.payload.error});const t=e.error||((r=e.payload)==null?void 0:r.error)||"Unknown error from server",i=e.errorCode||((o=e.payload)==null?void 0:o.errorCode)||"UNKNOWN_ERROR",s=e.id||"no-id";this.logger.error(`WebSocket server error (ID: ${s}, Code: ${i}): ${t}`,e)}handleUnknownMessage(e){this.logger.warn("Received unknown message type:",e.type)}async handleFolderExplore(e){try{this.logger.debug("Handling folder:explore request",{payload:e.payload});const t=e.payload||{},i=this.plugin;if(i&&typeof i.exploreVaultFoldersHandler=="function"){const a=await i.exploreVaultFoldersHandler({query:t.query,path:t.path,depth:typeof t.depth=="number"?t.depth:-1,format:t.format||"smart"}),l={id:e.id,type:"folder:explore:response",success:!0,timestamp:new Date().toISOString(),payload:a};this.sendMessage(l);return}const s=this.plugin.app.vault.getRoot();if(!s){this.sendErrorResponse("folder:explore:response","Vault root not available",e.id);return}const r=(s.children||[]).filter(a=>a&&a.constructor&&a.constructor.name==="TFolder").map(a=>({path:a.path,name:a.name})),o={id:e.id,type:"folder:explore:response",success:!0,timestamp:new Date().toISOString(),payload:{results:r,totalFolders:r.length,searchQuery:t.query||null,format:t.format||"flat"}};this.sendMessage(o)}catch(t){this.logger.error("[WEBSOCKET] folder:explore handler error",{error:t}),this.sendErrorResponse("folder:explore:response","Failed to explore folders",e.id)}}async handleFolderCreate(e){this.logger.debug("[WEBSOCKET] Handling folder:create request",{payload:e.payload});try{const t=e.payload||{},i=t.folderPath||t.path;if(!i||typeof i!="string"){this.sendErrorResponse("folder:create:response","Missing or invalid folder path parameter",e.id);return}const s=C.normalizePath(i.trim());if(this.plugin.app.vault.getAbstractFileByPath(s)){this.sendErrorResponse("folder:create:response","Folder already exists",e.id);return}await this.plugin.app.vault.createFolder(s);const o={id:e.id,type:"folder:create:response",success:!0,timestamp:new Date().toISOString(),payload:{path:s,created:!0,message:"Folder successfully created"}};this.sendMessage(o)}catch(t){this.logger.error("[WEBSOCKET] folder:create handler error",{error:t}),this.sendErrorResponse("folder:create:response","Failed to create folder",e.id)}}async handleFolderRename(e){this.logger.debug("[WEBSOCKET] Handling folder:rename request",{payload:e.payload});try{const t=e.payload||{},i=t.oldPath||t.sourcePath,s=t.newPath||t.targetPath;if(!i||typeof i!="string"){this.sendErrorResponse("folder:rename:response","Missing or invalid oldPath parameter",e.id);return}if(!s||typeof s!="string"){this.sendErrorResponse("folder:rename:response","Missing or invalid newPath parameter",e.id);return}const r=C.normalizePath(i.trim()),o=C.normalizePath(s.trim()),a=this.plugin.app.vault.getAbstractFileByPath(r);if(!a||!(a instanceof C.TFolder)){this.sendErrorResponse("folder:rename:response","Source folder not found",e.id);return}if(this.plugin.app.vault.getAbstractFileByPath(o)){this.sendErrorResponse("folder:rename:response","Target path already exists",e.id);return}await this.plugin.app.fileManager.renameFile(a,o);const c={id:e.id,type:"folder:rename:response",success:!0,timestamp:new Date().toISOString(),payload:{oldPath:r,newPath:o,renamed:!0,message:"Folder successfully renamed/moved"}};this.sendMessage(c)}catch(t){this.logger.error("[WEBSOCKET] folder:rename handler error",{error:t}),this.sendErrorResponse("folder:rename:response","Failed to rename folder",e.id)}}async handleFolderDelete(e){this.logger.debug("[WEBSOCKET] Handling folder:delete request",{payload:e.payload});try{const t=e.payload||{},i=t.folderPath||t.path,s=t.force||!1;if(!i||typeof i!="string"){this.sendErrorResponse("folder:delete:response","Missing or invalid folder path parameter",e.id);return}const r=C.normalizePath(i.trim()),o=this.plugin.app.vault.getAbstractFileByPath(r);if(!o||!(o instanceof C.TFolder)){this.sendErrorResponse("folder:delete:response","Folder not found",e.id);return}if(!s&&o.children&&o.children.length>0){this.sendErrorResponse("folder:delete:response","Folder is not empty. Use force=true to delete non-empty folders",e.id);return}await this.plugin.app.vault.delete(o,s);const a={id:e.id,type:"folder:delete:response",success:!0,timestamp:new Date().toISOString(),payload:{path:r,deleted:!0,message:"Folder successfully deleted"}};this.sendMessage(a)}catch(t){this.logger.error("[WEBSOCKET] folder:delete handler error",{error:t}),this.sendErrorResponse("folder:delete:response","Failed to delete folder",e.id)}}async handleTemplaterCheck(e){var t,i,s,r,o,a,l,c;try{const p=(i=(t=this.plugin.app.plugins)==null?void 0:t.plugins)==null?void 0:i["templater-obsidian"];if(!p)return this.sendMessage({id:e.id,type:"templater:check:response",success:!0,payload:{isInstalled:!1,templates:[],templateMappings:{}}});const g=((s=p.settings)==null?void 0:s.templates_folder)||"";if(!g)return this.sendMessage({id:e.id,type:"templater:check:response",success:!0,payload:{isInstalled:!0,templateFolder:"",templates:[],templateMappings:{}}});const h=C.normalizePath(g),d=this.plugin.app.vault.getMarkdownFiles().filter(T=>T.path.startsWith(h)).map(T=>({path:T.path,name:T.name,basename:T.basename})),f={},v=await So(this.plugin.app),w=await _o(this.plugin.app),S=window.moment,x=S?S():new Date,E=(T,L,A)=>{if(!T)return"";if(!L)return T;const B=A||(S?S():null);try{const U=T.replace(/\/+$/g,""),j=(L||"").split("/").map(X=>X.trim()).filter(Boolean),W=[];if(j.length>1){const X=j.slice(0,j.length-1);for(const K of X){let $=D(K,B);$&&W.push($)}}else{const X=j[0]||L;if(/YYYY/.test(X)){const K=D("YYYY",B);if(K&&W.push(K),/MM/.test(X)){const $=D("MM",B);$&&W.push($)}}}return W.length>0?`${U}/${W.join("/")}`:U}catch(U){return this.logger.warn("Error calculating periodic path",{error:U,baseFolder:T,format:L}),T}},D=(T,L)=>{if(!T)return"";let A=T;if(L&&typeof L.format=="function")try{A=L.format(T)}catch{A=M(T)}else A=M(T);return A=A.replace(/\[.*?\]/g,"").trim(),A=A.replace(/[<>:"|?*]/g,"").trim(),A},M=T=>{const L=new Date,A=L.getFullYear().toString(),B=String(L.getMonth()+1).padStart(2,"0");return T.replace(/YYYY/g,A).replace(/yyyy/g,A).replace(/MM/g,B).replace(/gggg/g,A)},N=((o=(r=this.settings.mcpTools)==null?void 0:r.defaults)==null?void 0:o.inboxFolder)||g||"",P=T=>T?((T||"").toString().split("/").pop()||T).replace(/\.md$/i,"").trim().toLowerCase():"";for(const T of d){const L=T.basename,A=P(L);v.detected&&v.folderTemplates&&v.folderTemplates[A]?f[L]=v.folderTemplates[A]:f[L]=N}if(w.detected&&w.enabled){if((a=w.daily)!=null&&a.enabled&&w.daily.folder){const T=E(w.daily.folder,w.daily.format||"YYYY-MM-DD");f["TPL Daily Note"]=T}if((l=w.weekly)!=null&&l.enabled&&w.weekly.folder){const T=E(w.weekly.folder,w.weekly.format||"YYYY-[W]ww");f["TPL Weekly Note"]=T}if((c=w.monthly)!=null&&c.enabled&&w.monthly.folder){const T=E(w.monthly.folder,w.monthly.format||"YYYY-MM");f["TPL Monthly Note"]=T}}const I={id:e.id,type:"templater:check:response",success:!0,timestamp:new Date().toISOString(),payload:{isInstalled:!0,templateFolder:h,templates:d,templateMappings:f}};this.sendMessage(I)}catch(p){this.logger.error("[WEBSOCKET] templater:check handler error",{error:p}),this.sendErrorResponse("templater:check:response","Failed to check templater",e.id)}}async handleCreateWithTemplate(e){var t,i,s;try{const r=e.payload||{},o=(r.searchTerm||"").toString().trim(),a=(r.fileName||"").toString().trim(),l=(r.targetFolder||"").toString(),c=(r.userContent||"").toString();if(!a){this.sendErrorResponse("file:create_with_template:response","Missing fileName",e.id);return}const p=(i=(t=this.plugin.app.plugins)==null?void 0:t.plugins)==null?void 0:i["templater-obsidian"];if(!p||!((s=p.settings)!=null&&s.templates_folder)){this.sendErrorResponse("file:create_with_template:response","Templater not configured",e.id);return}const g=this.plugin.app.vault.getMarkdownFiles().filter(d=>d.path.startsWith(p.settings.templates_folder));if(g.length===0){this.sendErrorResponse("file:create_with_template:response","No templates found",e.id);return}const h=o.toLowerCase();let m=g.find(d=>d.basename.toLowerCase()===h);if(!m){const d=g.map(f=>f.basename).sort();this.sendMessage({id:e.id,type:"file:create_with_template:response",success:!1,timestamp:new Date().toISOString(),requiresSelection:!0,availableTemplates:d,error:`No exact match for '${o}'. Please specify exact template name from availableTemplates.`,payload:{availableTemplates:d,searchTerm:o}});return}try{const d=p.templater;if(d&&d.create_new_note_from_template){const f=l||"",v=a.replace(/\.md$/,""),w=await d.create_new_note_from_template(m,f,v);if(w){const S=await this.plugin.app.vault.read(w);if(S.trim()===m.path)throw await this.plugin.app.vault.delete(w),new Error("Templater API returned path instead of content");c&&await this.plugin.app.vault.modify(w,S+`

`+c),this.sendMessage({id:e.id,type:"file:create_with_template:response",success:!0,timestamp:new Date().toISOString(),payload:{path:w.path,templateUsed:m.basename,message:"Created file using Templater API"}});return}}throw new Error("Templater API not available")}catch(d){this.logger.warn("[WEBSOCKET] Templater API failed, using fallback",{error:d});const f=await this.plugin.app.vault.read(m),v=a.endsWith(".md")?a:`${a}.md`,w=l?`${l.replace(/\/$/,"")}/${v}`:v;let S=f;c&&(S=S+`

`+c);const x=await this.plugin.app.vault.create(w,S);this.sendMessage({id:e.id,type:"file:create_with_template:response",success:!0,timestamp:new Date().toISOString(),payload:{path:x.path,templateUsed:m.basename,message:"Created file by copying template (Templater syntax not processed)",warning:"Templater commands were not processed"}})}}catch(r){this.logger.error("[WEBSOCKET] file:create_with_template handler error",{error:r}),this.sendErrorResponse("file:create_with_template:response","Failed to create file with template",e.id)}}async handleFrontmatterEdit(e){var t;this.logger.debug("Handling file:frontmatter_edit request",{path:(t=e.payload)==null?void 0:t.path});try{const i=e.payload;if(!(i!=null&&i.path)){this.sendErrorResponse("file:frontmatter_edit:response","Missing file path parameter",e.id);return}const s=this.plugin.app.vault.getAbstractFileByPath(i.path);if(!s||!(s instanceof C.TFile)){this.sendErrorResponse("file:frontmatter_edit:response","File not found",e.id);return}const r=await this.plugin.app.vault.read(s),o=i.frontmatterChanges||{};if(this.logger.debug("[FRONTMATTER] Processing updates:",o),!o||Object.keys(o).length===0){this.sendErrorResponse("file:frontmatter_edit:response","No frontmatter changes provided",e.id);return}let a=r;const l=r.split(`
`);let c=-1,p=-1;for(let f=0;f<l.length;f++)if(l[f].trim()==="---")if(c===-1)c=f;else{p=f;break}let g=[],h=[];c===0&&p>0?(g=l.slice(c+1,p),h=l.slice(p+1)):(g=[],h=l);for(const[f,v]of Object.entries(o)){const w=g.findIndex(E=>{const D=E.indexOf(":");return D>0&&E.substring(0,D).trim()===f});let S;Array.isArray(v)?S=JSON.stringify(v):typeof v=="string"?S=`"${v}"`:S=String(v);const x=`${f}: ${S}`;w>=0?g[w]=x:g.push(x)}a=["---",...g,"---",...h].join(`
`),this.logger.debug(`[FRONTMATTER] Updated content length: ${a.length} (was ${r.length})`),await this.plugin.app.vault.modify(s,a);const d={id:e.id,type:"file:frontmatter_edit:response",success:!0,timestamp:new Date().toISOString(),payload:{path:i.path,message:"Frontmatter updated successfully"}};this.sendMessage(d)}catch{this.sendErrorResponse("file:frontmatter_edit:response","Failed to edit frontmatter",e.id)}}async handleAppendEdit(e){var t;this.logger.debug("Handling file:append request",{path:(t=e.payload)==null?void 0:t.path});try{const i=e.payload;if(!(i!=null&&i.path)||i.appendContent===void 0){this.sendErrorResponse("file:append:response","Missing file path or content parameter",e.id);return}const s=this.plugin.app.vault.getAbstractFileByPath(i.path);if(!s||!(s instanceof C.TFile)){this.sendErrorResponse("file:append:response","File not found",e.id);return}const o=await this.plugin.app.vault.read(s)+`
`+i.appendContent;await this.plugin.app.vault.modify(s,o);const a={id:e.id,type:"file:append:response",success:!0,timestamp:new Date().toISOString(),payload:{path:i.path,message:"Content appended successfully"}};this.sendMessage(a)}catch{this.sendErrorResponse("file:append:response","Failed to append content",e.id)}}async handleRangeEdit(e){var t;this.logger.debug("Handling file:range_edit request",{path:(t=e.payload)==null?void 0:t.path});try{const i=e.payload;if(!(i!=null&&i.path)||i.replacementContent===void 0){this.sendErrorResponse("file:range_edit:response","Missing file path or content parameter",e.id);return}const s=this.plugin.app.vault.getAbstractFileByPath(i.path);if(!s||!(s instanceof C.TFile)){this.sendErrorResponse("file:range_edit:response","File not found",e.id);return}const o=(await this.plugin.app.vault.read(s)).split(`
`),a=Math.max(0,(i.rangeStartLine||1)-1),l=Math.min(o.length,i.rangeEndLine||a+1),c=i.replacementContent.split(`
`);o.splice(a,l-a,...c);const p=o.join(`
`);await this.plugin.app.vault.modify(s,p);const g={id:e.id,type:"file:range_edit:response",success:!0,timestamp:new Date().toISOString(),payload:{path:i.path,message:"Range edited successfully"}};this.sendMessage(g)}catch{this.sendErrorResponse("file:range_edit:response","Failed to edit range",e.id)}}async handleEditorEdit(e){var t,i;this.logger.debug("Handling file:editor_edit request",{path:(t=e.payload)==null?void 0:t.path});try{const s=e.payload;if(!(s!=null&&s.path)){this.sendErrorResponse("file:editor_edit:response","Missing file path parameter",e.id);return}const r=this.plugin.app.vault.getAbstractFileByPath(s.path);if(!r||!(r instanceof C.TFile)){this.sendErrorResponse("file:editor_edit:response","File not found",e.id);return}const o=this.plugin.app.workspace.getActiveViewOfType(C.MarkdownView);let a=!1;if(o&&((i=o.file)==null?void 0:i.path)===s.path){const c=o.editor,p=s.editorMethod||"replace";switch(this.logger.debug(`[EDITOR] Processing editor operation: ${p} with payload:`,s),p){case"replace":s.content!==void 0&&(c.setValue(s.content),a=!0);break;case"append":if(s.content!==void 0){const g=c.lastLine();c.replaceRange(`
`+s.content,{line:g,ch:c.getLine(g).length}),a=!0}break;case"prepend":s.content!==void 0&&(c.replaceRange(s.content+`
`,{line:0,ch:0}),a=!0);break;case"insert":if(s.content!==void 0&&s.line!==void 0){const g=Math.max(0,s.line-1);c.replaceRange(s.content+`
`,{line:g,ch:0}),a=!0}break;case"replace_line":if(s.content!==void 0&&s.line!==void 0){const g=Math.max(0,s.line-1);g<c.lineCount()?(c.setLine(g,s.content),a=!0,this.logger.debug(`[EDITOR] Replaced line ${s.line} with new content`)):this.logger.warn(`[EDITOR] Line ${s.line} does not exist (file has ${c.lineCount()} lines)`)}break;case"replace_selection":s.content!==void 0&&(c.getSelection()?(c.replaceSelection(s.content),a=!0,this.logger.debug("[EDITOR] Replaced selected text with new content")):this.logger.warn("[EDITOR] No text currently selected for replacement"));break;case"insert_at":if(s.content!==void 0&&s.line!==void 0&&s.char!==void 0){const g={line:s.line-1,ch:s.char};c.replaceRange(s.content,g),a=!0,this.logger.debug(`[EDITOR] Inserted content at position ${s.line}:${s.char}`)}break;case"replace_range":if(s.content!==void 0&&s.fromLine!==void 0&&s.fromChar!==void 0&&s.toLine!==void 0&&s.toChar!==void 0){const g={line:s.fromLine-1,ch:s.fromChar},h={line:s.toLine-1,ch:s.toChar};c.replaceRange(s.content,g,h),a=!0,this.logger.debug(`[EDITOR] Replaced range from ${s.fromLine}:${s.fromChar} to ${s.toLine}:${s.toChar}`)}break;case"insert_after_heading":if(s.content!==void 0&&s.heading!==void 0){const g=s.heading,h=c.lineCount();let m=-1;for(let d=0;d<h;d++){const f=c.getLine(d);if(f.startsWith("#")&&f.includes(g)){m=d+1;break}if(f.toLowerCase().includes(g.toLowerCase())){m=d+1;break}}if(m>=0&&m<=h)c.replaceRange(`
`+s.content+`
`,{line:m,ch:0}),a=!0,this.logger.debug(`[EDITOR] Inserted content after heading "${g}" at line ${m}`);else{this.logger.warn(`[EDITOR] Heading "${g}" not found in document`);const d=c.lastLine();c.replaceRange(`

`+s.content,{line:d,ch:c.getLine(d).length}),a=!0,this.logger.debug("[EDITOR] Heading not found, appended content to end instead")}}break}}if(!a){const c=await this.plugin.app.vault.read(r);let p=c;const g=s.editorMethod||"replace";switch(this.logger.debug(`[EDITOR] Fallback to vault API for operation: ${g} with payload:`,s),g){case"replace":s.content!==void 0&&(p=s.content);break;case"append":s.content!==void 0&&(p=c+`
`+s.content);break;case"prepend":s.content!==void 0&&(p=s.content+`
`+c);break;case"insert":if(s.content!==void 0&&s.line!==void 0){const h=c.split(`
`),m=Math.max(0,s.line-1);h.splice(m,0,s.content),p=h.join(`
`)}break;case"insert_after_heading":if(s.content!==void 0&&s.heading!==void 0){const h=c.split(`
`),m=s.heading;let d=-1;for(let f=0;f<h.length;f++){const v=h[f];if(v.startsWith("#")&&v.includes(m)){d=f+1;break}if(v.toLowerCase().includes(m.toLowerCase())){d=f+1;break}}d>=0?(h.splice(d,0,"",s.content),p=h.join(`
`),this.logger.debug(`[EDITOR] Inserted content after heading "${m}" at line ${d}`)):(p=c+`

`+s.content,this.logger.debug(`[EDITOR] Heading "${m}" not found, appended to end instead`))}case"insert_at":if(s.content!==void 0&&s.line!==void 0&&s.char!==void 0){const h=c.split(`
`),m=Math.max(0,s.line-1);if(m<h.length){const d=h[m],f=d.substring(0,s.char),v=d.substring(s.char);h[m]=f+s.content+v,p=h.join(`
`),this.logger.debug(`[EDITOR] Vault API: Inserted content at position ${s.line}:${s.char}`)}else this.logger.warn(`[EDITOR] Line ${s.line} does not exist (file has ${h.length} lines)`)}break;case"replace_range":if(s.content!==void 0&&s.fromLine!==void 0&&s.fromChar!==void 0&&s.toLine!==void 0&&s.toChar!==void 0){const h=c.split(`
`),m=Math.max(0,s.fromLine-1),d=Math.max(0,s.toLine-1);if(m===d){const f=h[m]||"",v=f.substring(0,s.fromChar),w=f.substring(s.toChar);h[m]=v+s.content+w}else{const f=h[m]||"",v=h[d]||"",w=f.substring(0,s.fromChar),S=v.substring(s.toChar),x=s.content.split(`
`);x[0]=w+x[0],x[x.length-1]=x[x.length-1]+S,h.splice(m,d-m+1,...x)}p=h.join(`
`),this.logger.debug(`[EDITOR] Vault API: Replaced range from ${s.fromLine}:${s.fromChar} to ${s.toLine}:${s.toChar}`)}break;case"replace_line":if(s.content!==void 0&&s.line!==void 0){const h=c.split(`
`),m=Math.max(0,s.line-1);m<h.length?(h[m]=s.content,p=h.join(`
`),this.logger.debug(`[EDITOR] Vault API: Replaced line ${s.line} with new content`)):this.logger.warn(`[EDITOR] Line ${s.line} does not exist (file has ${h.length} lines)`)}break;case"replace_selection":s.content!==void 0&&(p=s.content,this.logger.debug("[EDITOR] Vault API: Replace selection fallback - replaced entire content (no active editor)"));break}await this.plugin.app.vault.modify(r,p)}const l={id:e.id,type:"file:editor_edit:response",success:!0,timestamp:new Date().toISOString(),payload:{path:s.path,operation:s.editorMethod||"replace",message:"Editor edit completed successfully"}};this.sendMessage(l)}catch{this.sendErrorResponse("file:editor_edit:response","Failed to perform editor edit",e.id)}}handleConnected(e){}handleRegistered(e){if(this.logger.info("[WEBSOCKET] Successfully registered with server"),this.vaultRegistryService){const t=this.vaultRegistryService.getActiveVaultId();t&&this.vaultRegistryService.updateVaultConnection(t,!0)}}sendErrorResponse(e,t,i){const s={id:i,type:e,success:!1,timestamp:new Date().toISOString(),error:t,errorCode:"OPERATION_FAILED"};this.sendMessage(s)}getStatus(){return this.settings.wsEnabled?this.client&&this.client.readyState===WebSocket.OPEN?`Connected to port ${this.settings.wsPort}`:this.reconnectTimer?`Reconnecting... (attempt ${this.reconnectAttempts})`:"Disconnected":"Disabled"}async restart(){this.logger.debug("[WEBSOCKET] Restarting WebSocket service..."),await this.stop(),this.settings.wsEnabled?(this.logger.debug("[WEBSOCKET] Settings enabled - starting WebSocket service"),await this.start()):this.logger.debug("[WEBSOCKET] Settings disabled - WebSocket service will remain stopped")}updateSettings(e){this.settings=e,this.logger.setDebug(e.enableDebugLogging),this.logger.debug("[WEBSOCKET] Updating service settings")}}class Eo extends C.Events{constructor(e,t,i){super(),this.syncRecords=[],this.isLoaded=!1,this.saveTimeout=null,this.SAVE_DEBOUNCE_MS=300,this.app=e,this.plugin=t,this.logger=i,this.registryPath=C.normalizePath(Me.join(t.manifest.dir||".obsidian/plugins/megamem-mcp","sync.json"))}async load(){if(!await this.app.vault.adapter.exists(this.registryPath)){this.logger.debug("[DEBUG] sync.json does not exist, creating new one"),this.logger.info("[SYNC-REGISTRY] No existing sync registry found, creating new one"),this.syncRecords=[],await this.save(),this.isLoaded=!0;return}try{const t=await this.app.vault.adapter.read(this.registryPath),s=JSON.parse(t);this.syncRecords=s.sync_records||[],this.logger.info(`[SYNC-REGISTRY] Loaded sync registry with ${this.syncRecords.length} records.`),this.isLoaded=!0}catch(t){this.logger.error("[DEBUG] Error loading sync.json:",t),this.logger.error("[SYNC-REGISTRY] CRITICAL ERROR: Registry file is corrupt and cannot be parsed. Loading empty registry in memory without overwriting file.",t),this.syncRecords=[],this.isLoaded=!0}}async save(){return this.saveTimeout&&clearTimeout(this.saveTimeout),new Promise((e,t)=>{this.saveTimeout=setTimeout(async()=>{try{await this.performSave(),e()}catch(i){t(i)}finally{this.saveTimeout=null}},this.SAVE_DEBOUNCE_MS)})}async saveImmediate(){this.saveTimeout&&(clearTimeout(this.saveTimeout),this.saveTimeout=null),await this.performSave()}async performSave(){try{const e={version:"1.0",sync_records:this.syncRecords},t=JSON.stringify(e,null,2);await this.app.vault.adapter.write(this.registryPath,t),this.trigger("changed")}catch(e){const t=e instanceof Error?e.message:String(e);throw this.logger.error("[SYNC-REGISTRY] Failed to save sync registry:",{error:t,path:this.registryPath,timestamp:new Date().toISOString()}),new Error(`Failed to save sync registry: ${t}`)}}getSyncRecord(e,t,i){if(!e||typeof e!="string"){this.logger.warn("[SYNC-REGISTRY] getSyncRecord called without mm_uid",{vaultId:t,context:i});return}return this.syncRecords.find(r=>r.mm_uid===e&&r.vault_id===t)}getSyncRecordByPath(e,t){if(!(!e||typeof e!="string"))return this.syncRecords.find(i=>i.vault_id===t&&i.note_path===e)}async addOrUpdateSyncRecord(e){const{mmUid:t,notePath:i,vaultId:s,syncEntry:r}=e;if(!t||typeof t!="string")throw this.logger.error("[SYNC-REGISTRY] addOrUpdateSyncRecord missing mm_uid",{notePath:i,vaultId:s}),new Error("mm_uid is required to add or update a sync record");if(!this.isValidUUID(t))throw this.logger.error("[SYNC-REGISTRY] addOrUpdateSyncRecord received invalid mm_uid format",{mmUid:t,notePath:i,vaultId:s}),new Error("Invalid mm_uid format - must be a valid UUID");let o=this.getSyncRecord(t,s);if(o){const a=o.syncs.findIndex(l=>l.database_id===r.database_id);a>=0?(o.syncs[a]=r,this.logger.info("[SYNC-REGISTRY] Updated sync entry",{mm_uid:t,vault_id:s,database:r.database_id})):(o.syncs.push(r),this.logger.info("[SYNC-REGISTRY] Added new sync entry",{mm_uid:t,vault_id:s,database:r.database_id})),o.note_modified=new Date().toISOString(),i&&typeof i=="string"&&(o.note_path=i)}else{const a={mm_uid:t,note_path:i||"",vault_id:s,note_modified:new Date().toISOString(),syncs:[r]};this.syncRecords.push(a),this.logger.info("[SYNC-REGISTRY] Created new sync record",{mm_uid:t,vault_id:s})}await this.save()}findNoteByEpisodeUuid(e){for(const t of this.syncRecords)for(const i of t.syncs)if(i.episode_uuid===e)return{record:t,entry:i}}async generateGroupId(e,t){var r;const i=this.plugin.settings;let s=e.replace(/\\/g,"/");try{const o=((r=this.app.vault.adapter)==null?void 0:r.basePath)??"";o&&Me.isAbsolute(e)&&(s=Me.relative(o,e).replace(/\\/g,"/"))}catch{s=e.replace(/\\/g,"/")}if(i.enablePropertyNamespacing){const o=this.app.metadataCache.getCache(s),a=o==null?void 0:o.frontmatter,l=a==null?void 0:a.g_group_id;if(typeof l=="string"&&l.trim().length>0)return l.trim();if(typeof l=="number")return String(l)}if(i.enableFolderNamespacing){const o=this.getCustomGroupId(s,i.folderNamespaceMappings||[]);if(o)return o}return i.namespaceStrategy==="custom"&&i.defaultNamespace||t}getCustomGroupId(e,t){if(!t||t.length===0)return null;const i=[...t].sort((a,l)=>l.folderPath.length-a.folderPath.length),r=e.replace(/\\/g,"/").split("/").filter(a=>a.length>0),o=r.length>1?r.slice(0,-1).join("/"):"";for(const a of i){const l=a.folderPath.replace(/\\/g,"/");if(l&&(o===l||o.startsWith(l+"/")))return a.groupId}return null}getVaultSyncRecords(e){return this.syncRecords.filter(t=>t.vault_id===e)}getDatabaseSyncRecords(e){return this.syncRecords.filter(t=>t.syncs.some(i=>i.database_id===e))}getGroupIdSyncRecords(e){return this.syncRecords.filter(t=>t.syncs.some(i=>i.group_id===e))}async removeSyncRecord(e,t){if(!e||typeof e!="string")return!1;const i=this.syncRecords.length;return this.syncRecords=this.syncRecords.filter(s=>!(s.mm_uid===e&&s.vault_id===t)),this.syncRecords.length<i?(await this.save(),this.logger.info("[SYNC-REGISTRY] Removed sync record",{mm_uid:e,vault_id:t}),!0):!1}async removeSyncEntry(e,t,i){const s=this.getSyncRecord(e,t);if(!s)return!1;const r=s.syncs.length;return s.syncs=s.syncs.filter(o=>o.database_id!==i),s.syncs.length<r?(s.syncs.length===0?await this.removeSyncRecord(e,t):await this.save(),this.logger.info("[SYNC-REGISTRY] Removed sync entry",{mm_uid:e,vault_id:t,database:i}),!0):!1}getSyncStats(e){const t=e?this.getVaultSyncRecords(e):this.syncRecords,i={};let s=0,r;for(const o of t)for(const a of o.syncs)i[a.database_id]=(i[a.database_id]||0)+1,s++,(!r||a.last_sync>r)&&(r=a.last_sync);return{totalRecords:t.length,totalSyncs:s,databaseCounts:i,lastSync:r}}validateSyncRecord(e){if(!e||typeof e!="object")return!1;if(!e.mm_uid||typeof e.mm_uid!="string"){if(!e.note_path||typeof e.note_path!="string")return!1}else if(!this.isValidUUID(e.mm_uid))return!1;if(!e.vault_id||typeof e.vault_id!="string"||!Array.isArray(e.syncs))return!1;for(const t of e.syncs)if(!this.validateSyncEntry(t))return!1;return!(e.note_modified&&!this.isValidISODate(e.note_modified))}validateSyncEntry(e){return!(!e||typeof e!="object"||!e.database_id||typeof e.database_id!="string"||!e.group_id||typeof e.group_id!="string"||!e.episode_uuid||typeof e.episode_uuid!="string"||e.episode_uuid!==null&&!this.isValidUUID(e.episode_uuid)||!e.last_sync||typeof e.last_sync!="string"||!this.isValidISODate(e.last_sync)||e.sync_hash&&typeof e.sync_hash!="string")}isValidUUID(e){return/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(e)}isValidISODate(e){try{return new Date(e).toISOString()===e}catch{return!1}}removeDuplicateRecords(e){const t=new Set,i=[];for(const s of e){const r=s.mm_uid?`${s.vault_id}:mm:${s.mm_uid}`:`${s.vault_id}:path:${s.note_path}`;t.has(r)?this.logger.warn("[SYNC-REGISTRY] Removing duplicate record",{vault_id:s.vault_id,mm_uid:s.mm_uid,note_path:s.note_path}):(t.add(r),i.push(s))}return i}isRegistryLoaded(){return this.isLoaded}getVaultIds(){const e=new Set(this.syncRecords.map(t=>t.vault_id));return Array.from(e)}getDatabaseIds(){const e=new Set;for(const t of this.syncRecords)for(const i of t.syncs)e.add(i.database_id);return Array.from(e)}getGroupIds(){const e=new Set;for(const t of this.syncRecords)for(const i of t.syncs)e.add(i.group_id);return Array.from(e)}getAllSyncRecords(){return[...this.syncRecords]}async reload(){await this.load(),this.trigger("changed")}}class Co extends fo.EventEmitter{constructor(e,t,i){super(),this.isLoaded=!1,this.activeVaultId=null,this.app=e,this.plugin=t,this.logger=i,this.registry=new Map,this.registryPath=C.normalizePath(Me.join(t.manifest.dir||".obsidian/plugins/megamem-mcp","vaults.json"))}async load(){if(!await this.app.vault.adapter.exists(this.registryPath)){this.logger.debug("[VAULT-REGISTRY] No existing vault registry found, creating new one"),this.registry=new Map,await this.save(),this.isLoaded=!0;return}try{const t=await this.app.vault.adapter.read(this.registryPath),i=JSON.parse(t);this.registry.clear();for(const[s,r]of Object.entries(i))this.registry.set(s,r);this.logger.info(`[VAULT-REGISTRY] Loaded vault registry with ${this.registry.size} vaults.`),this.isLoaded=!0}catch(t){this.logger.error("[VAULT-REGISTRY] CRITICAL ERROR: Registry file is corrupt and cannot be parsed. Loading empty registry in memory without overwriting file.",t),this.registry=new Map,this.isLoaded=!0}}async save(){try{const e=Object.fromEntries(this.registry),t=JSON.stringify(e,null,2);await this.app.vault.adapter.write(this.registryPath,t),this.emit("registry-update")}catch(e){const t=e instanceof Error?e.message:String(e);throw this.logger.error("[VAULT-REGISTRY] Failed to save vault registry:",{error:t,path:this.registryPath,timestamp:new Date().toISOString()}),new Error(`Failed to save vault registry: ${t}`)}}async addVault(e){const t={...e,id:e.name};return this.registry.set(e.name,t),await this.save(),this.logger.info(`[VAULT-REGISTRY] Added vault: ${e.name}.`),t}getVault(e){return this.registry.get(e)}getAllVaults(){return Array.from(this.registry.values())}async removeVault(e){if(this.registry.has(e)){const t=this.registry.get(e);return this.registry.delete(e),await this.save(),this.logger.info(`[VAULT-REGISTRY] Removed vault: ${t==null?void 0:t.name}.`),!0}return!1}async updateVaultStatus(e,t){const i=this.registry.get(e);return i?(i.status={...i.status,...t},await this.save(),!0):!1}queryVaults(e){let t=Array.from(this.registry.values());return e.vault_id&&(t=t.filter(i=>i.id===e.vault_id)),e.status!==void 0&&(t=t.filter(i=>i.status.connected===e.status)),t}getVaultStats(){const e=this.getAllVaults();return{total_connected:e.filter(t=>t.status.connected).length,total_syncing:e.filter(t=>t.status.syncing).length,total_errors:e.filter(t=>t.status.error_message).length,last_sync:e.reduce((t,i)=>i.status.last_sync>t?i.status.last_sync:t,"")}}isRegistryLoaded(){return this.isLoaded}getActiveVaultId(){return this.isLoaded||this.loadRegistrySynchronously(),this.activeVaultId||this.ensureActiveVault(),this.activeVaultId}loadRegistrySynchronously(){try{const e=require("fs");if(e.existsSync(this.registryPath)){const t=e.readFileSync(this.registryPath,"utf8"),i=JSON.parse(t);if(this.registry.clear(),typeof i=="object"&&!Array.isArray(i))for(const[s,r]of Object.entries(i))this.registry.set(s,r);this.isLoaded=!0,this.logger.debug(`[VAULT-REGISTRY] Loaded registry synchronously with ${this.registry.size} vaults`)}}catch(e){this.logger.warn("[VAULT-REGISTRY] Failed to load registry synchronously",e)}}setActiveVaultId(e){if(e&&!this.registry.has(e))return this.logger.warn(`[VAULT-REGISTRY] Cannot set active vault - vault not found: ${e}`),!1;const t=this.activeVaultId;return this.activeVaultId=e,t!==e&&this.emit("active-vault-change",e),!0}getActiveVault(){return this.activeVaultId&&this.getVault(this.activeVaultId)||null}ensureActiveVault(){if(!this.activeVaultId){const e=this.app.vault.getName(),t=this.app.vault.adapter.basePath||"";let i=null;for(const[s,r]of this.registry.entries())if(r.name===e||this.pathsMatch(r.path,t)){i=s;break}this.activeVaultId=i||e,this.logger.info(`[VAULT-REGISTRY] Auto-set active vault to: ${this.activeVaultId}${i?" (found in registry)":" (fallback to name)"}`)}}pathsMatch(e,t){const i=s=>s.replace(/\\\\/g,"/").toLowerCase().replace(/\/$/,"");return i(e)===i(t)}async autoRegisterCurrentVault(e=!1,t){var l,c;const i=this.app.vault.getName(),s=this.app.vault.adapter.basePath||"",r=this.registry.get(i);if(r&&r.path===s){this.setActiveVaultId(i);const p=this.createVaultDatabaseConfig();return JSON.stringify(r.configuration.database)!==JSON.stringify(p)?(this.logger.info(`[VAULT-REGISTRY] Updating database configuration for existing vault: ${i}`),r.configuration.database=p,await this.save(),this.logger.debug("[VAULT-REGISTRY] Database configuration updated for existing vault.",{vaultName:i,newConfig:p})):this.logger.debug("[VAULT-REGISTRY] Existing vault database configuration is already up-to-date.",{vaultName:i}),t&&t.isConnected()&&(t.sendVaultRegistration({name:r.name,path:r.path,id:r.name})?await this.updateVaultConnection(i,!0,(c=(l=r.connection)==null?void 0:l.auth)==null?void 0:c.token):this.logger.warn("[VAULT-REGISTRY] Failed to send existing vault registration to MCP server.")),r}const o=new Date().toISOString(),a={name:i,description:`Auto-registered vault: ${i}`,path:s,type:"obsidian",connection:{host:"localhost",port:this.plugin.settings.wsPort,auth:{token:""}},configuration:{database:this.createVaultDatabaseConfig(),sync:{enabled:!0,interval:300,last_sync:o}},status:{connected:!1,syncing:!1,last_sync:o}};try{const p=await this.addVault(a);return this.setActiveVaultId(i),this.logger.info(`[VAULT-REGISTRY] Created local vault registry entry for: ${i}.`),t&&t.isConnected()&&(t.sendVaultRegistration({name:p.name,path:p.path,id:i})?await this.updateVaultConnection(i,!0,a.connection.auth.token):this.logger.warn("[VAULT-REGISTRY] Failed to send vault registration to MCP server.")),p}catch(p){return this.logger.error(`[VAULT-REGISTRY] Failed to auto-register current vault: ${i}`,p),null}}onActiveVaultChange(e){this.on("active-vault-change",e)}onRegistryUpdate(e){this.on("registry-update",e)}async updateVaultConnection(e,t,i){const s=this.registry.get(e);return s?(s.status.connected=t,s.status.last_sync=new Date().toISOString(),i&&(s.connection.auth.token=i),t||(s.status.syncing=!1,s.status.error_message=void 0),await this.save(),this.logger.info(`[VAULT-REGISTRY] Updated vault connection status for ${s.name}: Connected: ${t}.`),!0):!1}async updateVaultEmbeddingModel(e,t,i,s){const r=this.registry.get(e);if(!r)return this.logger.warn(`[VAULT-REGISTRY] Cannot update embedding model - vault not found: ${e}`),!1;r.configuration.embedding||(r.configuration.embedding={}),r.configuration.embedding.model=t,i!==void 0&&(r.configuration.embedding.dimensions=i),s!==void 0&&(r.configuration.embedding.provider=s),await this.save();const o=s?` (${s})`:"",a=i?` (${i}d)`:"";return this.logger.info(`[VAULT-REGISTRY] Updated embedding model for vault ${e}: ${t}${o}${a}`),!0}getVaultEmbeddingModel(e){const t=this.registry.get(e);return t?t.configuration.embedding||{}:null}hasEmbeddingModelChanged(e,t,i,s){const r=this.getVaultEmbeddingModel(e);return!r||!r.model?!1:r.model!==t||s!==void 0&&r.provider!==void 0&&r.provider!==s||i!==void 0&&r.dimensions!==void 0&&r.dimensions!==i}validateEmbeddingModelConfig(e){const t=this.getVaultEmbeddingModel(e);return!t||!t.model?{isValid:!1}:{isValid:!0,config:t}}getEmbeddingModelMismatchDetails(e,t,i,s){const r=this.getVaultEmbeddingModel(e);return{hasChanged:this.hasEmbeddingModelChanged(e,t,i,s),storedProvider:r==null?void 0:r.provider,storedModel:r==null?void 0:r.model,storedDimensions:r==null?void 0:r.dimensions,currentProvider:s,currentModel:t,currentDimensions:i}}createVaultDatabaseConfig(){var i,s;const e=this.plugin.settings,t=e.databaseType||"neo4j";if(t==="neo4j"&&((i=e.databaseConfigs)!=null&&i.neo4j)){const r=e.databaseConfigs.neo4j;if(r.uri){const l=r.uri.match(/bolt:\/\/([^:]+):(\d+)/);if(l){const c=parseInt(l[2]);return{type:"neo4j",host:l[1]||"localhost",port:c||7687,database:r.database||"neo4j",username:r.username,password:r.password}}}const o="localhost",a=7687;return this.logger.warn("[VAULT-REGISTRY] URI match failed or URI not provided for Neo4j. Using defaults/fallback values."),{type:"neo4j",host:o,port:a,database:r.database||"neo4j",username:r.username,password:r.password}}else if(t==="falkordb"&&((s=e.databaseConfigs)!=null&&s.falkordb)){const r=e.databaseConfigs.falkordb;return this.logger.debug("[VAULT-REGISTRY] FalkorDB config found in settings.databaseConfigs:",{host:r.host,port:r.port,database:r.database}),{type:"neo4j",host:r.host||"localhost",port:r.port||6379,database:r.database||"falkor",username:r.username,password:r.password}}return this.logger.warn(`[VAULT-REGISTRY] No database configuration found for type: ${t}. Using final defaults.`),{type:"neo4j",host:"localhost",port:7687,database:"neo4j"}}}const ko=["id","uuid","name","type","subtype","summary","description","created_at","updated_at","fact_uuid","fact_name","fact_type","fact_subtype","fact_summary","fact_description","fact_created_at","fact_updated_at","edge_uuid","edge_name","edge_type","edge_subtype","edge_summary","edge_description","edge_created_at","edge_updated_at","source_uuid","target_uuid","source_name","target_name","source_type","target_type","valid_at","invalid_at","metadata"],zt={Person:"Individual human being with personal and professional attributes, relationships, and activities within the knowledge domain.",Organization:"Business entity, company, institution, or group with structured operations and relationships within the professional ecosystem.",Technology:"Software, programming language, framework, tool, or technical system used in development and business operations.",Product:"Software product, service, platform, or offering created by organizations for users and customers.",Project:"Organized effort with defined goals, timeline, and deliverables undertaken by individuals or organizations.",WebPage:"Individual web page or URL with specific content, purpose, and relationships within the broader web ecosystem.",Website:"Complete web domain or site containing multiple pages and serving as a unified web presence.",Note:"Personal knowledge note, documentation, or idea captured for reference and knowledge management purposes.",Article:"Published content piece such as blog post, tutorial, or informational article with specific topic focus.",Music:"Musical work, song, album, or audio content with artistic and cultural significance, including metadata about creation and performance.",Film:"Movie, video content, or visual media production with narrative or documentary purpose, including cast, crew, and production details.",Event:"Organized gathering, conference, meeting, or occasion with specific time, location, and participants for knowledge sharing or collaboration.",Place:"Physical location, venue, or geographic entity with address and spatial context relevant to activities and relationships.",Quote:"Memorable statement, saying, or excerpt attributed to a specific source with context and meaning for reference and inspiration.",Expression:"Idiom, concept, principle, or linguistic construct that conveys meaning within cultural or professional contexts.",Personal:"Private individual content including goals, identity information, preferences, and personal development material for self-organization.",Journal:"Time-based personal entry or log recording thoughts, experiences, and reflections for tracking personal growth and memories.",Book:"Published literary work, reference material, or educational text with structured content for knowledge sharing and learning.",ProjectDoc:"Technical documentation, specifications, or project-related materials that support project development and collaboration."},jt={duration:'Length of the art work in minutes and seconds, typically formatted as "MM:SS" (e.g., "3:42", "1:15:30")',record_label:"Music label or company responsible for producing, distributing, or promoting the musical work",artist:"Musical performer, band, or creator responsible for the artistic creation and performance of the musical work",album:"Collection or record release that contains this musical work as part of a larger artistic statement",track_number:"Position of this song within an album or collection for organization and reference",composer:"Person who created the musical composition, melody, and structure of the work",lyricist:"Person who wrote the words, lyrics, or text content of the musical work",director:"Primary director or filmmaker credited as the main creative leader of the film or video content",cast:"List of actors and performers who appeared in the film or video content",studio:"Production studio or company responsible for creating and distributing the film",date_start:"Starting date of the event or scheduled activity in YYYY-MM-DD format",date_end:"Ending date of the event or scheduled activity in YYYY-MM-DD format",location:'Physical venue, address, or virtual platform where the event takes place (e.g., "Madison Square Garden", "Zoom", "123 Main St")',organizer:"Person, organization, or entity responsible for planning and hosting the event",event_type:`Classification of the event's purpose and format (e.g., "conference", "meeting", "celebration", "workshop", "webinar")`,coordinates:'Geographic coordinates in latitude, longitude format for precise location identification (e.g., "37.7749, -122.4194")',city:"Municipality, city, or urban area that contains or represents the place for regional identification",postal_code:"ZIP code, postal code, or area code for mail delivery and regional classification",place_type:`Classification of the place's purpose and characteristics (e.g., "venue", "office", "landmark", "residential", "commercial")`,region:"Geographic region, state, or province where the place is located for broader geographic context",title:"Primary name, headline, or official title that identifies and represents the entity",c_name:"Complete legal name, official title, or canonical name as formally recognized",aliases:"Alternative names, nicknames, abbreviations, or other identifiers by which this entity is also known",url:"Complete web address or URL where this entity can be accessed or referenced online",same_as:"URIs or URLs that identify this same entity on other platforms, databases, or knowledge systems for linking",tags:"Keywords, labels, or categorical markers used for organizing, filtering, and discovering related content",author:"Person or organization who created, wrote, or is primarily responsible for this content",organization:"Company, institution, or group associated with or responsible for this entity",about:"Subject matter, topic, or theme that this content covers or discusses in detail",category:"Primary classification, type, or domain that categorizes this entity's purpose and characteristics",status:'Current state, phase, or condition of the entity in its lifecycle (e.g., "active", "completed", "planning")',date_published:"Date when this article or content was officially published or released in YYYY-MM-DD format",identity_type:`Classification of the person's identity status (e.g., "natural_person", "public_figure", "pseudonym", "character")`,given_name:"First name or given name as commonly used for personal identification and introductions",family_name:"Last name, surname, or family name used for formal identification and heritage",date_of_birth:"Date when the person was born, formatted as YYYY-MM-DD for biographical reference",date_of_death:"Date when the person passed away, formatted as YYYY-MM-DD if applicable for biographical completion",address:"Physical address, location, or primary residence where the person is based",email:"Primary email address for professional or personal communication and contact",works_for:"Organization, company, or institution where the person is currently employed",job_title:"Professional role, position, or title that describes the person's current responsibilities",needs:"Resources, skills, connections, or support that the person requires to achieve their goals",offers:"Skills, services, knowledge, or value that the person can provide to others or contribute to projects",links:"URLs or web addresses associated with the person's online presence or professional profiles",relationship_type:"Nature of the relationship or connection this person has to other entities or people",date_founded:"Date when the organization was officially established, incorporated, or founded in YYYY-MM-DD format",org_type:'Legal structure or classification of the organization (e.g., "LLC", "Corporation", "Non-profit", "Partnership")',project_type:`Classification of the project's nature, scope, and methodology (e.g., "software", "research", "startup", "community")`,collaborators:"People, teams, or organizations working together on this project or contributing to its development",public_repo:"URL or reference to the public code repository where the project's source code is hosted and accessible",offering_type:'Business model and delivery method of the product (e.g., "SaaS", "API", "physical_product", "service", "platform")',article_type:'Genre or format classification of the article (e.g., "blog_post", "tutorial", "analysis", "news", "review")',note_type:`Classification of the note's purpose and content type (e.g., "idea", "meeting_notes", "reference", "analysis")`,subtitle:"Secondary title or explanatory subtitle that provides additional context about the book's content",categories:"Subject categories, genres, or classification tags that describe the book's content and target audience",authors:"List of people who wrote, edited, or contributed to the creation of the book",published_on:"Date when the book was officially published or released in YYYY-MM-DD format",link:"URL or web address where the book can be accessed, purchased, or referenced online",project:"Name or identifier of the project that this documentation relates to or supports",team:"Group of people or organizational unit responsible for creating and maintaining this documentation",genre:"Category, style, or classification that describes the artistic approach, subject matter, or target audience",country:"Nation or country of origin where the entity was created, produced, or primarily operates"};class vs{constructor(e,t){this.app=e,this.plugin=t}get logger(){try{return this.plugin&&this.plugin.logger?this.plugin.logger:void 0}catch{return}}isProtectedAttribute(e){return ko.includes(e.toLowerCase())}convertToSnakeCase(e){return e.replace(/([A-Z])/g,"_$1").toLowerCase().replace(/^_/,"")}validateEntityTypeName(e){const t=[];let i=e;/^[A-Z][a-zA-Z0-9]*$/.test(e)||(t.push("Entity type should be PascalCase (e.g., Person, TechCompany)"),i=e.charAt(0).toUpperCase()+e.slice(1).replace(/[^a-zA-Z0-9]/g,""));const s=t.length===0?"excellent":"needs_improvement";return{isValid:t.length===0,issues:t,suggestedName:i,complianceLevel:s}}analyzeProperty(e,t){const i=this.convertToSnakeCase(e),s=this.isProtectedAttribute(e),r=[];s&&r.push("Uses protected attribute name reserved by Graphiti"),e!==i&&!s&&r.push("Should use snake_case naming convention");const o=s?"protected":r.length>0?"warning":"valid";return{originalName:e,suggestedName:s?`${i}_custom`:i,isProtected:s,namingIssues:r,complianceStatus:o}}applyPropertyMapping(e,t){return this.plugin&&this.plugin.getPropertyMapping(e,t)||t}async savePropertyMapping(e,t,i){this.plugin&&await this.plugin.savePropertyMapping(e,t,i)}async removePropertyMapping(e,t){this.plugin&&await this.plugin.removePropertyMapping(e,t)}async savePropertySelection(e,t,i){this.plugin&&await this.plugin.savePropertySelection(e,t,i)}getPropertySelection(e,t){if(this.plugin)return this.plugin.getPropertySelection(e,t)}getDefaultEntityDescription(e){return zt[e]||null}hasDefaultEntityDescription(e){return e in zt}getAvailableDefaultEntityTypes(){return Object.keys(zt)}getDefaultPropertyDescription(e){return jt[e]||null}hasDefaultPropertyDescription(e){return e in jt}get defaultPropertyDescriptions(){return jt}getAvailableDefaultProperties(){return Object.keys(jt)}getAvailableDefaultEdgeTypes(){return{WorksFor:"Person employed by Organization",Uses:"Person/Organization uses Technology/Product",Creates:"Person/Organization creates Technology/Product/Project",Knows:"Person knows Person (personal or professional relationship)",MemberOf:"Person/Organization is member of Organization",PartnersWith:"Person/Organization partners with Person/Organization",DependsOn:"Technology/Product depends on Technology",IntegratedWith:"Product/Technology has built-in integration with Product/Technology",About:"WebPage/Note/Article about Entity",IsPartOf:"WebPage part of Website/Domain",Tags:"Entity is tagged with another Entity",PerformedBy:"Musical work performed by Artist/Person",InfluencedBy:"Entity influenced or inspired by another Entity",CollaboratesWith:"Person/Organization actively collaborates with Person/Organization",OrganizedBy:"Event organized and managed by Person/Organization",AttendedBy:"Event attended or participated in by Person",PartOfSeries:"Entity that belongs to or continues a series/sequence",LeadBy:"Project/Organization/Initiative led or directed by Person",SponsoredBy:"Entity sponsored, funded, or supported by Organization",CompetesWith:"Organization/Product in competition or rivalry with Organization/Product"}}getDefaultEdgeTypeProperties(){return{WorksFor:{job_title:{description:"Current professional role, position, or title that describes responsibilities and level within an organization",fieldType:"str",required:!1},employment_type:{description:"Employment classification such as full-time, part-time, contractor, consultant, advisor, or intern",fieldType:"str",required:!1},start_date:{description:"Date when the employment relationship began in YYYY-MM-DD format",fieldType:"datetime",required:!1}},Uses:{sentiment:{description:"User's attitude or feeling toward the technology (positive, negative, neutral, love, hate)",fieldType:"str",required:!1},proficiency:{description:"User's skill level or expertise with the technology (beginner, intermediate, advanced, expert)",fieldType:"str",required:!1},usage_context:{description:"Context or environment where the technology is used (development, production, personal, testing)",fieldType:"str",required:!1},status:{description:"Current usage status (active, inactive, trial, paid_account, evaluating)",fieldType:"str",required:!1},start_date:{description:"Date when usage began in YYYY-MM-DD format",fieldType:"datetime",required:!1}},Creates:{role:{description:"Creator's role in the creation process (founder, lead_developer, contributor, designer, architect)",fieldType:"str",required:!1},contribution_type:{description:"Type of contribution made (code, design, strategy, funding, documentation, testing)",fieldType:"str",required:!1}},Knows:{relationship_type:{description:"Nature of the relationship (colleague, mentor, friend, collaborator, acquaintance)",fieldType:"str",required:!1},context:{description:"Context or setting where they know each other (work, school, industry, personal)",fieldType:"str",required:!1}},MemberOf:{role:{description:"Member's role or position within the organization (employee, volunteer, board_member, customer, partner)",fieldType:"str",required:!1},start_date:{description:"Date when membership began in YYYY-MM-DD format",fieldType:"datetime",required:!1},status:{description:"Current membership status (active, inactive, suspended, trial, paid)",fieldType:"str",required:!1}},PartnersWith:{partnership_type:{description:"Type of partnership (strategic, supplier, investment, consulting, advisory, joint_venture)",fieldType:"str",required:!1},start_date:{description:"Date when partnership began in YYYY-MM-DD format",fieldType:"datetime",required:!1},status:{description:"Current partnership status (active, inactive, completed, negotiating)",fieldType:"str",required:!1}},DependsOn:{dependency_type:{description:"Type of dependency (runtime, build_time, development, infrastructure, optional)",fieldType:"str",required:!1},version:{description:"Required version or version range for the dependency",fieldType:"str",required:!1}},IntegratedWith:{integration_type:{description:"Type of integration (native, plugin, API, webhook, SDK, embedded)",fieldType:"str",required:!1},bidirectional:{description:"Whether the integration works in both directions between the technologies",fieldType:"bool",required:!1}},About:{coverage_type:{description:"Depth of coverage (comprehensive, mention, analysis, tutorial, review)",fieldType:"str",required:!1},authority:{description:"Source authority level (official, community, expert_analysis, user_generated)",fieldType:"str",required:!1}},IsPartOf:{relationship_type:{description:"Type of relationship (page, article, documentation, section, subdomain)",fieldType:"str",required:!1}},Tags:{},PerformedBy:{performance_type:{description:"Type of performance relationship (original_artist, cover_version, live_performance, collaboration, featured_artist)",fieldType:"str",required:!1},role:{description:"Specific role in the performance (lead_vocals, instrumentalist, producer, featured, backing_vocals)",fieldType:"str",required:!1},performance_date:{description:"Date when this performance or recording took place in YYYY-MM-DD format",fieldType:"datetime",required:!1}},InfluencedBy:{influence_type:{description:"Nature of the influence relationship (artistic, intellectual, methodological, philosophical, technical)",fieldType:"str",required:!1},description:{description:"Specific ways this entity was influenced, including concepts, techniques, or approaches adopted",fieldType:"str",required:!1},strength:{description:"Degree of influence impact (minor, moderate, major, foundational, transformative)",fieldType:"str",required:!1}},CollaboratesWith:{collaboration_type:{description:"Nature of the collaborative relationship (project_partner, co_author, joint_venture, research_partner, creative_partner)",fieldType:"str",required:!1},collaboration_status:{description:"Current state of the collaboration (active, completed, planned, on_hold, recurring)",fieldType:"str",required:!1},start_date:{description:"Date when the collaboration began in YYYY-MM-DD format",fieldType:"datetime",required:!1}},OrganizedBy:{organizational_role:{description:"Specific role in organizing the event (lead_organizer, co_organizer, event_manager, logistics_coordinator, program_director)",fieldType:"str",required:!1},responsibilities:{description:"Specific duties and areas of responsibility in event organization (logistics, programming, marketing, sponsorships)",fieldType:"str",required:!1}},AttendedBy:{attendance_type:{description:"Nature of attendance or participation (presenter, attendee, keynote_speaker, panelist, sponsor, volunteer)",fieldType:"str",required:!1},participation_level:{description:"Degree of involvement in the event (active_participant, passive_attendee, featured_speaker, organizer)",fieldType:"str",required:!1}},PartOfSeries:{sequence_position:{description:"Position or order within the series (episode_1, part_2, volume_3, season_1_episode_5)",fieldType:"str",required:!1},series_relationship:{description:"Type of relationship to the series (sequel, prequel, spin_off, continuation, part_of_collection)",fieldType:"str",required:!1}},LeadBy:{leadership_role:{description:"Specific leadership position and authority (ceo, project_manager, team_lead, creative_director, principal_investigator)",fieldType:"str",required:!1},leadership_start_date:{description:"Date when leadership role began in YYYY-MM-DD format",fieldType:"datetime",required:!1},leadership_scope:{description:"Areas of responsibility and decision-making authority (strategic, operational, creative, technical, administrative)",fieldType:"str",required:!1}},SponsoredBy:{sponsorship_type:{description:"Nature of sponsorship relationship (financial, in_kind, promotional, strategic, title_sponsor, presenting_sponsor)",fieldType:"str",required:!1},sponsorship_level:{description:"Degree or tier of sponsorship support (platinum, gold, silver, bronze, major, minor)",fieldType:"str",required:!1},support_details:{description:"Specific ways sponsor provides support (funding, resources, expertise, marketing, venue)",fieldType:"str",required:!1}},CompetesWith:{competition_type:{description:"Nature of competitive relationship (direct_competitor, market_rival, alternative_solution, industry_peer)",fieldType:"str",required:!1},market_context:{description:"Market or domain where competition occurs (same_market, adjacent_market, substitute_product, feature_competition)",fieldType:"str",required:!1},competitive_advantage:{description:"Key differentiating factors in the competitive relationship (price, features, market_share, brand_recognition)",fieldType:"str",required:!1}}}}getUnusedDefaultEdgeTypes(e){const t=this.getAvailableDefaultEdgeTypes(),i={};return Object.entries(t).forEach(([s,r])=>{e[s]||(i[s]=r)}),i}getSuggestedDefaultMappings(e,t){const i=[],s=new Set(t.map(o=>`${o.sourceEntity}->${o.targetEntity}`));return e.includes("Person")&&(e.includes("Organization")&&!s.has("Person->Organization")&&i.push({sourceEntity:"Person",targetEntity:"Organization",allowedEdges:["WorksFor","MemberOf","PartnersWith"],description:"People working for or being members of organizations"}),e.includes("Technology")&&!s.has("Person->Technology")&&i.push({sourceEntity:"Person",targetEntity:"Technology",allowedEdges:["Creates","Uses"],description:"People creating or using technologies"}),e.includes("Product")&&!s.has("Person->Product")&&i.push({sourceEntity:"Person",targetEntity:"Product",allowedEdges:["Creates","Uses"],description:"People creating or using products"}),e.includes("Project")&&!s.has("Person->Project")&&i.push({sourceEntity:"Person",targetEntity:"Project",allowedEdges:["Creates","MemberOf"],description:"People creating or being part of projects"}),s.has("Person->Person")||i.push({sourceEntity:"Person",targetEntity:"Person",allowedEdges:["Knows"],description:"Professional and personal relationships between people"})),e.includes("Organization")&&(e.includes("Technology")&&!s.has("Organization->Technology")&&i.push({sourceEntity:"Organization",targetEntity:"Technology",allowedEdges:["Creates","Uses","DependsOn"],description:"Organizations creating, using, or depending on technologies"}),e.includes("Product")&&!s.has("Organization->Product")&&i.push({sourceEntity:"Organization",targetEntity:"Product",allowedEdges:["Creates","Uses","DependsOn"],description:"Organizations creating, using, or depending on products"}),s.has("Organization->Organization")||i.push({sourceEntity:"Organization",targetEntity:"Organization",allowedEdges:["PartnersWith","MemberOf"],description:"Partnerships and memberships between organizations"})),e.includes("Technology")&&(s.has("Technology->Technology")||i.push({sourceEntity:"Technology",targetEntity:"Technology",allowedEdges:["DependsOn","IntegratedWith"],description:"Dependencies and integrations between technologies"}),e.includes("Product")&&!s.has("Technology->Product")&&i.push({sourceEntity:"Technology",targetEntity:"Product",allowedEdges:["IntegratedWith"],description:"Technologies integrated with products"})),["WebPage","Note","Article"].filter(o=>e.includes(o)).forEach(o=>{s.has(`${o}->Entity`)||i.push({sourceEntity:o,targetEntity:"Entity",allowedEdges:["About"],description:`${o} content about other entities`})}),e.includes("Person")&&e.includes("Music")&&!s.has("Person->Music")&&i.push({sourceEntity:"Person",targetEntity:"Music",allowedEdges:["PerformedBy","InfluencedBy","Creates"],description:"People performing, creating, or influenced by musical works"}),e.includes("Person")&&e.includes("Film")&&!s.has("Person->Film")&&i.push({sourceEntity:"Person",targetEntity:"Film",allowedEdges:["PerformedBy","InfluencedBy","Creates"],description:"People acting in, creating, or influenced by films"}),e.includes("Person")&&e.includes("Event")&&!s.has("Person->Event")&&i.push({sourceEntity:"Person",targetEntity:"Event",allowedEdges:["OrganizedBy","AttendedBy","LeadBy"],description:"People organizing, attending, or leading events"}),e.includes("Person")&&e.includes("Place")&&!s.has("Person->Place")&&i.push({sourceEntity:"Person",targetEntity:"Place",allowedEdges:["Tags","About"],description:"People associated with or documenting places"}),e.includes("Music")&&!s.has("Music->Music")&&i.push({sourceEntity:"Music",targetEntity:"Music",allowedEdges:["InfluencedBy","PartOfSeries"],description:"Musical works influenced by or part of series with other music"}),e.includes("Film")&&!s.has("Film->Film")&&i.push({sourceEntity:"Film",targetEntity:"Film",allowedEdges:["InfluencedBy","PartOfSeries","CompetesWith"],description:"Films influenced by, part of series, or competing with other films"}),e.includes("Organization")&&e.includes("Event")&&!s.has("Organization->Event")&&i.push({sourceEntity:"Organization",targetEntity:"Event",allowedEdges:["OrganizedBy","SponsoredBy"],description:"Organizations organizing or sponsoring events"}),e.includes("Organization")&&e.includes("Music")&&!s.has("Organization->Music")&&i.push({sourceEntity:"Organization",targetEntity:"Music",allowedEdges:["SponsoredBy","Creates"],description:"Organizations sponsoring or creating musical works (labels, studios)"}),e.includes("Organization")&&e.includes("Film")&&!s.has("Organization->Film")&&i.push({sourceEntity:"Organization",targetEntity:"Film",allowedEdges:["SponsoredBy","Creates"],description:"Organizations sponsoring or creating films (studios, distributors)"}),e.includes("Quote")&&e.includes("Person")&&!s.has("Quote->Person")&&i.push({sourceEntity:"Quote",targetEntity:"Person",allowedEdges:["About","Tags"],description:"Quotes attributed to or about specific people"}),e.includes("Expression")&&!s.has("Expression->Expression")&&i.push({sourceEntity:"Expression",targetEntity:"Expression",allowedEdges:["InfluencedBy","Tags"],description:"Expressions influenced by or related to other expressions"}),e.includes("Personal")&&e.includes("Person")&&!s.has("Personal->Person")&&i.push({sourceEntity:"Personal",targetEntity:"Person",allowedEdges:["About","Tags"],description:"Personal content about or relating to specific people"}),e.includes("Journal")&&e.includes("Person")&&!s.has("Journal->Person")&&i.push({sourceEntity:"Journal",targetEntity:"Person",allowedEdges:["About","Tags"],description:"Journal entries about or mentioning specific people"}),e.includes("Project")&&e.includes("Event")&&!s.has("Project->Event")&&i.push({sourceEntity:"Project",targetEntity:"Event",allowedEdges:["OrganizedBy","PartOfSeries"],description:"Projects organizing events or as part of event series"}),e.includes("Technology")&&e.includes("Music")&&!s.has("Technology->Music")&&i.push({sourceEntity:"Technology",targetEntity:"Music",allowedEdges:["Creates","Uses"],description:"Technologies used to create or distribute music"}),e.includes("Technology")&&e.includes("Film")&&!s.has("Technology->Film")&&i.push({sourceEntity:"Technology",targetEntity:"Film",allowedEdges:["Creates","Uses"],description:"Technologies used in film production or distribution"}),i.length===0&&!s.has("Entity->Entity")&&i.push({sourceEntity:"Entity",targetEntity:"Entity",allowedEdges:["Tags"],description:"Generic tagging relationships between any entities"}),i}async discoverAllSchemas(){const e=new Map,t=this.app.vault.getMarkdownFiles();for(const i of t){const s=this.app.metadataCache.getFileCache(i),r=s==null?void 0:s.frontmatter;if(!(r!=null&&r.type))continue;const o=r.type;e.has(o)||e.set(o,{properties:new Map,files:[]});const a=e.get(o);a.files.push(i.path),Object.entries(r).forEach(([l,c])=>{l!=="type"&&(a.properties.has(l)||a.properties.set(l,[]),a.properties.get(l).push(c))})}return Array.from(e.entries()).map(([i,s])=>({typeName:i,fileCount:s.files.length,files:s.files,properties:Array.from(s.properties.entries()).map(([r,o])=>{const a=this.analyzeProperty(r,o),l=this.applyPropertyMapping(i,r),c=l!==r,p=c?l:r,g=c?[]:a.namingIssues,h=c?"valid":a.complianceStatus,m=this.getPropertySelection(i,r),d=!a.isProtected,f=m!==void 0?m:d;return{name:p,inferredType:this.inferType(o),isOptional:o.some(v=>v==null),description:this.generateDescription(r,i),examples:Array.from(new Set(o)).slice(0,3),enabled:f,isProtected:a.isProtected,namingIssues:g,suggestedName:a.suggestedName,complianceStatus:h}})}))}inferType(e){const t=e.filter(s=>s!=null);if(t.length===0)return"string";const i=t[0];return Array.isArray(i)?"array":typeof i=="boolean"?"boolean":typeof i=="number"?"number":this.isDateLike(i)?"date":typeof i=="object"?"object":"string"}isDateLike(e){return typeof e!="string"?!1:/^\d{4}-\d{2}-\d{2}/.test(e)||!isNaN(Date.parse(e))}generateDescription(e,t){const i={c_name:"Complete legal name or official title as recognized by authorities or in formal documentation",given_name:"Given name or first name as commonly used in introductions and personal identification",family_name:"Family name, surname, or last name used for formal identification and family lineage",aliases:"Alternative names, nicknames, professional names, or pseudonyms by which the entity is also known",url:"Complete web address or URL where the resource can be accessed on the internet",same_as:"URIs or URLs that identify the same entity on other platforms, databases, or knowledge systems for entity linking",permalink:"Permanent link or stable identifier that remains constant over time",created:"Timestamp when the note or entity record was first created in the Obsidian vault for tracking and organizational purposes",created_date:"Date when the content was originally created or when the ideas were first captured in YYYY-MM-DD format",published_date:"Date when the content was officially published or made publicly available in YYYY-MM-DD format",birth_date:"Date when the person was born in YYYY-MM-DD format for biographical and age calculation purposes",founding_date:"Date when the organization was officially established, incorporated, or founded in YYYY-MM-DD format",title:"Primary title, headline, or name that identifies and represents the entity",description:"Detailed explanation or summary that describes the purpose, content, or characteristics of the entity",abstract:"Brief summary or overview that captures the essential points and main ideas",summary:"Concise overview that highlights the key information and important details",type:"Entity type classification (WebPage, Person, Organization, Product, Technology, Project, Article, Film, Music, Book, Event, Note, etc.)",category:"Primary classification or market segment that describes the entity's purpose and target domain",tags:"Topic keywords, classification labels, or categorical tags used for organizing and filtering content within the knowledge base",status:"Current state or phase in the entity's lifecycle (active, completed, planning, etc.)",author:'Person or organization who created, wrote, or is credited as the primary creator of the content (e.g., "Jane Smith", "MIT Research Lab")',job_title:'Current professional role, position, or title that describes responsibilities and level within an organization (e.g., "CEO", "Senior Developer", "Research Scientist")',works_for:'Organization where person is employed (e.g., "Apple Inc.", "Google", "Stanford University")',org_type:'Legal or Lawful structure and registration type of the organization (e.g., "LLC", "Inc", "Partnership", "501c3", "Government Agency")',email:"Primary email address used for professional or personal communication and contact purposes",address:"Physical address, city, state, or geographic location where the entity is primarily based or located",needs:"Specific resources, skills, connections, or support that the entity requires to achieve goals or be successful",offers:"Skills, services, knowledge, resources, or value that the entity can provide to others or contribute to projects",project_type:"Classification of the project's primary purpose and methodology (research, development, initiative, startup, etc.)",article_type:"Genre or format classification of the published content (essay, blog_post, analysis, tutorial, whitepaper, etc.)",note_type:"Classification of the note's purpose and content structure (idea, analysis, reflection, meeting_notes, etc.)",offering_type:"Primary business model and delivery method of the offering (product, service, platform, SaaS, API, etc.)",identity_type:"Classification of person's legal and social identity status (natural_person, national_identity, pseudonym)",thumbnail:"Thumbnail or preview image URL that provides a visual representation of the content",primary_image:"Primary image URL that serves as the main visual element for the entity"};if(i[e])return i[e];if(e.includes("date")||e.includes("time"))return`Date or timestamp for ${t} entities (e.g., "2024-01-15", "2023-12-31T10:30:00Z")`;if(e.includes("url")||e.includes("link"))return`Web address or URL associated with ${t} entities (e.g., "https://example.com", "https://docs.company.com")`;if(e.includes("name")||e.includes("title"))return`Name or title that identifies ${t} entities (e.g., "John Smith", "Project Alpha", "Company Inc.")`;if(e.includes("type")||e.includes("category"))return`Classification that categorizes ${t} entities (e.g., "software", "hardware", "service")`;const s=e.replace(/_/g," ");return`${s.charAt(0).toUpperCase()+s.slice(1)} associated with ${t} entities`}async generatePydanticModels(e){const t=`"""
Pydantic models for Obsidian-Graphiti knowledge graph entities.

This module contains automatically generated Pydantic models based on schema discovery
from Obsidian vault notes. These models are designed to work with the Graphiti
knowledge graph framework for entity extraction and relationship mapping.

Generated models inherit from BaseEntity which provides core properties required
by Graphiti for knowledge graph processing including type classification, tags,
and creation timestamps.

Usage:
    from graphiti_models import Person, Organization, Project

    # Create entity instances
    person = Person(
        c_name="John Doe",
        job_title="Software Engineer",
        email="john@example.com"
    )

    # All entities have core BaseEntity properties
    person.type = "Person"
    person.tags = ["professional", "contact"]
    person.created = datetime.now()

Note: This file is automatically generated. Manual edits will be overwritten
during the next schema discovery process.
"""`,i=["from typing import Optional, List, Dict, Any","from pydantic import BaseModel, Field","from datetime import datetime",""],s=`class BaseEntity(BaseModel):
    """
    Base class for all Graphiti knowledge graph entities.

    Provides core properties required by Graphiti for entity processing,
    relationship mapping, and knowledge graph construction.
    """
    tags: Optional[List[str]] = Field(None, description="Topic keywords, classification labels, or categorical tags used for organizing and filtering content within the knowledge base")
`,r=[];for(let c=0;c<e.length;c+=50){e.slice(c,c+50).forEach(g=>r.push(this.generateSingleModel(g)));try{await new Promise(g=>setTimeout(g,0))}catch{}}const a=this.generateEdgeTypes(),l=this.generateEdgeTypeMap(e);return[t,"",...i,s,...r,a,l].join(`
`)}generateSingleModel(e){const t=e.typeName.replace(/\s+/g,"").replace(/[^a-zA-Z0-9]/g,""),i=e.properties.filter(c=>c.enabled!==!1&&!c.isProtected).map(c=>{const p=this.getPythonType(c),g=c.suggestedName||c.name,h=this.generateDescription(c.name,e.typeName);return`    ${g}: Optional[${p}] = Field(None, description="${h}")`}),s=e.properties.filter(c=>c.isProtected).map(c=>`    # SKIPPED: '${c.name}' - protected attribute (use '${c.suggestedName}' instead)`),r=[...i,...s],o=r.length>0?r.join(`
`):"    pass",l=zt[t]||`Custom ${t} entity.
    
    Use this entity type for ${t} content that doesn't match
    the standard entity types in your knowledge domain.`;return`class ${t}(BaseEntity):
    """
    ${l}
    """
${o}

`}generateEdgeTypes(){return`
# Edge Types - Relationship Models
class WorksFor(BaseModel):
    """Person employed by Organization"""
    job_title: Optional[str] = Field(None, description="Current professional role, position, or title that describes responsibilities and level within an organization")
    employment_type: Optional[str] = Field(None, description="Employment classification such as full-time, part-time, contractor, consultant, advisor, or intern")
    start_date: Optional[datetime] = Field(None, description="Date when the employment relationship began in YYYY-MM-DD format")

class Uses(BaseModel):
    """Person/Organization uses Technology/Product"""
    sentiment: Optional[str] = Field(None, description="User's attitude or feeling toward the technology (positive, negative, neutral, love, hate)")
    proficiency: Optional[str] = Field(None, description="User's skill level or expertise with the technology (beginner, intermediate, advanced, expert)")
    usage_context: Optional[str] = Field(None, description="Context or environment where the technology is used (development, production, personal, testing)")
    status: Optional[str] = Field(None, description="Current usage status (active, inactive, trial, paid_account, evaluating)")
    start_date: Optional[datetime] = Field(None, description="Date when usage began in YYYY-MM-DD format")

class Creates(BaseModel):
    """Person/Organization creates Technology/Product/Project"""
    role: Optional[str] = Field(None, description="Creator's role in the creation process (founder, lead_developer, contributor, designer, architect)")
    contribution_type: Optional[str] = Field(None, description="Type of contribution made (code, design, strategy, funding, documentation, testing)")

class Knows(BaseModel):
    """Person knows Person (personal or professional relationship)"""
    relationship_type: Optional[str] = Field(None, description="Nature of the relationship (colleague, mentor, friend, collaborator, acquaintance)")
    context: Optional[str] = Field(None, description="Context or setting where they know each other (work, school, industry, personal)")

class MemberOf(BaseModel):
    """Person/Organization is member of Organization"""
    role: Optional[str] = Field(None, description="Member's role or position within the organization (employee, volunteer, board_member, customer, partner)")
    start_date: Optional[datetime] = Field(None, description="Date when membership began in YYYY-MM-DD format")
    status: Optional[str] = Field(None, description="Current membership status (active, inactive, suspended, trial, paid)")

class PartnersWith(BaseModel):
    """Person/Organization partners with Person/Organization"""
    partnership_type: Optional[str] = Field(None, description="Type of partnership (strategic, supplier, investment, consulting, advisory, joint_venture)")
    start_date: Optional[datetime] = Field(None, description="Date when partnership began in YYYY-MM-DD format")
    status: Optional[str] = Field(None, description="Current partnership status (active, inactive, completed, negotiating)")

class DependsOn(BaseModel):
    """Technology/Product depends on Technology"""
    dependency_type: Optional[str] = Field(None, description="Type of dependency (runtime, build_time, development, infrastructure, optional)")
    version: Optional[str] = Field(None, description="Required version or version range for the dependency")

class IntegratedWith(BaseModel):
    """Product/Technology has built-in integration with Product/Technology"""
    integration_type: Optional[str] = Field(None, description="Type of integration (native, plugin, API, webhook, SDK, embedded)")
    bidirectional: Optional[bool] = Field(None, description="Whether the integration works in both directions between the technologies")

class About(BaseModel):
    """WebPage/Note/Article about Entity"""
    coverage_type: Optional[str] = Field(None, description="Depth of coverage (comprehensive, mention, analysis, tutorial, review)")
    authority: Optional[str] = Field(None, description="Source authority level (official, community, expert_analysis, user_generated)")

class IsPartOf(BaseModel):
    """WebPage part of Website/Domain"""
    relationship_type: Optional[str] = Field(None, description="Type of relationship (page, article, documentation, section, subdomain)")

class Tags(BaseModel):
    """Entity is tagged with another Entity"""
    pass

# New edge types
class PerformedBy(BaseModel):
    """Musical work performed by Artist/Person"""
    performance_type: Optional[str] = Field(None, description="Type of performance relationship (original_artist, cover_version, live_performance, collaboration, featured_artist)")
    role: Optional[str] = Field(None, description="Specific role in the performance (lead_vocals, instrumentalist, producer, featured, backing_vocals)")
    performance_date: Optional[datetime] = Field(None, description="Date when this performance or recording took place in YYYY-MM-DD format")

class InfluencedBy(BaseModel):
    """Entity influenced or inspired by another Entity"""
    influence_type: Optional[str] = Field(None, description="Nature of the influence relationship (artistic, intellectual, methodological, philosophical, technical)")
    description: Optional[str] = Field(None, description="Specific ways this entity was influenced, including concepts, techniques, or approaches adopted")
    strength: Optional[str] = Field(None, description="Degree of influence impact (minor, moderate, major, foundational, transformative)")

class CollaboratesWith(BaseModel):
    """Person/Organization actively collaborates with Person/Organization"""
    collaboration_type: Optional[str] = Field(None, description="Nature of the collaborative relationship (project_partner, co_author, joint_venture, research_partner, creative_partner)")
    collaboration_status: Optional[str] = Field(None, description="Current state of the collaboration (active, completed, planned, on_hold, recurring)")
    start_date: Optional[datetime] = Field(None, description="Date when the collaboration began in YYYY-MM-DD format")

class OrganizedBy(BaseModel):
    """Event organized and managed by Person/Organization"""
    organizational_role: Optional[str] = Field(None, description="Specific role in organizing the event (lead_organizer, co_organizer, event_manager, logistics_coordinator, program_director)")
    responsibilities: Optional[str] = Field(None, description="Specific duties and areas of responsibility in event organization (logistics, programming, marketing, sponsorships)")

class AttendedBy(BaseModel):
    """Event attended or participated in by Person"""
    attendance_type: Optional[str] = Field(None, description="Nature of attendance or participation (presenter, attendee, keynote_speaker, panelist, sponsor, volunteer)")
    participation_level: Optional[str] = Field(None, description="Degree of involvement in the event (active_participant, passive_attendee, featured_speaker, organizer)")

class PartOfSeries(BaseModel):
    """Entity that belongs to or continues a series/sequence"""
    sequence_position: Optional[str] = Field(None, description="Position or order within the series (episode_1, part_2, volume_3, season_1_episode_5)")
    series_relationship: Optional[str] = Field(None, description="Type of relationship to the series (sequel, prequel, spin_off, continuation, part_of_collection)")

class LeadBy(BaseModel):
    """Project/Organization/Initiative led or directed by Person"""
    leadership_role: Optional[str] = Field(None, description="Specific leadership position and authority (ceo, project_manager, team_lead, creative_director, principal_investigator)")
    leadership_start_date: Optional[datetime] = Field(None, description="Date when leadership role began in YYYY-MM-DD format")
    leadership_scope: Optional[str] = Field(None, description="Areas of responsibility and decision-making authority (strategic, operational, creative, technical, administrative)")

class SponsoredBy(BaseModel):
    """Entity sponsored, funded, or supported by Organization"""
    sponsorship_type: Optional[str] = Field(None, description="Nature of sponsorship relationship (financial, in_kind, promotional, strategic, title_sponsor, presenting_sponsor)")
    sponsorship_level: Optional[str] = Field(None, description="Degree or tier of sponsorship support (platinum, gold, silver, bronze, major, minor)")
    support_details: Optional[str] = Field(None, description="Specific ways sponsor provides support (funding, resources, expertise, marketing, venue)")

class CompetesWith(BaseModel):
    """Organization/Product in competition or rivalry with Organization/Product"""
    competition_type: Optional[str] = Field(None, description="Nature of competitive relationship (direct_competitor, market_rival, alternative_solution, industry_peer)")
    market_context: Optional[str] = Field(None, description="Market or domain where competition occurs (same_market, adjacent_market, substitute_product, feature_competition)")
    competitive_advantage: Optional[str] = Field(None, description="Key differentiating factors in the competitive relationship (price, features, market_share, brand_recognition)")

`}generateEdgeTypeMap(e){const t=e.map(r=>r.typeName.replace(/\s+/g,"").replace(/[^a-zA-Z0-9]/g,"")),i=[];return t.forEach(r=>{r==="Person"&&(i.push('    ("Person", "Organization"): ["WorksFor", "MemberOf", "PartnersWith"],'),i.push('    ("Person", "Technology"): ["Creates", "Uses"],'),i.push('    ("Person", "Product"): ["Creates", "Uses"],'),i.push('    ("Person", "Project"): ["Creates", "MemberOf"],'),i.push('    ("Person", "Person"): ["Knows", "CollaboratesWith"],'),i.push('    ("Person", "Music"): ["PerformedBy"],')),r==="Music"&&(i.push('    ("Music", "Person"): ["PerformedBy", "CreatedBy", "InfluencedBy"],'),i.push('    ("Music", "Music"): ["InfluencedBy", "PartOfSeries"],')),r==="Film"&&i.push('    ("Film", "Person"): ["CreatedBy", "PerformedBy", "InfluencedBy"],'),r==="Organization"&&(i.push('    ("Organization", "Organization"): ["PartnersWith", "MemberOf"],'),i.push('    ("Organization", "Technology"): ["Creates", "Uses", "DependsOn"],'),i.push('    ("Organization", "Product"): ["Creates", "Uses", "DependsOn"],'),i.push('    ("Organization", "Project"): ["Creates", "PartnersWith"],'),i.push('    ("Organization", "Person"): ["PartnersWith"],')),r==="Technology"&&(i.push('    ("Technology", "Technology"): ["DependsOn", "IntegratedWith"],'),i.push('    ("Technology", "Product"): ["IntegratedWith"],'),i.push('    ("Technology", "Project"): ["IntegratedWith"],')),r==="Product"&&(i.push('    ("Product", "Technology"): ["IntegratedWith", "Uses", "DependsOn"],'),i.push('    ("Product", "Product"): ["IntegratedWith"],'),i.push('    ("Product", "Organization"): ["MemberOf"],'),i.push('    ("Product", "Project"): ["IntegratedWith"],')),r==="Project"&&(i.push('    ("Project", "Technology"): ["Uses", "Creates", "DependsOn"],'),i.push('    ("Project", "Product"): ["Creates", "Uses"],'),i.push('    ("Project", "Organization"): ["PartnersWith"],'),i.push('    ("Project", "Project"): ["PartnersWith", "DependsOn"],')),["WebPage","Note","Article"].includes(r)&&i.push(`    ("${r}", "Entity"): ["About"],`)}),i.push('    ("Entity", "Entity"): ["Tags", "Knows"],'),`
# Edge Type Map - Defines allowed relationships between entity types
edge_type_map = {
${Array.from(new Set(i)).join(`
`)}

`+n.mark.snippet),i+" "+t):i}function Ot(n,e){Error.call(this),this.name="YAMLException",this.reason=n,this.mark=e,this.message=Ss(this,!1),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=new Error().stack||""}Ot.prototype=Object.create(Error.prototype);Ot.prototype.constructor=Ot;Ot.prototype.toString=function(e){return this.name+": "+Ss(this,e)};var He=Ot;function an(n,e,t,i,s){var r="",o="",a=Math.floor(s/2)-1;return i-e>a&&(r=" ... ",e=i-a+r.length),t-i>a&&(o=" ...",t=i+a-o.length),{str:r+n.slice(e,t).replace(/\t/g,"→")+o,pos:i-e+r.length}}function ln(n,e){return Ve.repeat(" ",e-n.length)+n}function Uo(n,e){if(e=Object.create(e||null),!n.buffer)return null;e.maxLength||(e.maxLength=79),typeof e.indent!="number"&&(e.indent=1),typeof e.linesBefore!="number"&&(e.linesBefore=3),typeof e.linesAfter!="number"&&(e.linesAfter=2);for(var t=/\r?\n|\r|\0/g,i=[0],s=[],r,o=-1;r=t.exec(n.buffer);)s.push(r.index),i.push(r.index+r[0].length),n.position<=r.index&&o<0&&(o=i.length-2);o<0&&(o=i.length-1);var a="",l,c,p=Math.min(n.line+e.linesAfter,s.length).toString().length,g=e.maxLength-(e.indent+p+3);for(l=1;l<=e.linesBefore&&!(o-l<0);l++)c=an(n.buffer,i[o-l],s[o-l],n.position-(i[o]-i[o-l]),g),a=Ve.repeat(" ",e.indent)+ln((n.line-l+1).toString(),p)+" | "+c.str+`
`+a;for(c=an(n.buffer,i[o],s[o],n.position,g),a+=Ve.repeat(" ",e.indent)+ln((n.line+1).toString(),p)+" | "+c.str+`
`,a+=Ve.repeat("-",e.indent+p+3+c.pos)+`^
`,l=1;l<=e.linesAfter&&!(o+l>=s.length);l++)c=an(n.buffer,i[o+l],s[o+l],n.position-(i[o]-i[o+l]),g),a+=Ve.repeat(" ",e.indent)+ln((n.line+l+1).toString(),p)+" | "+c.str+`
`;return a.replace(/\n$/,"")}var Bo=Uo,zo=["kind","multi","resolve","construct","instanceOf","predicate","represent","representName","defaultStyle","styleAliases"],jo=["scalar","sequence","mapping"];function Vo(n){var e={};return n!==null&&Object.keys(n).forEach(function(t){n[t].forEach(function(i){e[String(i)]=t})}),e}function Yo(n,e){if(e=e||{},Object.keys(e).forEach(function(t){if(zo.indexOf(t)===-1)throw new He('Unknown option "'+t+'" is met in definition of "'+n+'" YAML type.')}),this.options=e,this.tag=n,this.kind=e.kind||null,this.resolve=e.resolve||function(){return!0},this.construct=e.construct||function(t){return t},this.instanceOf=e.instanceOf||null,this.predicate=e.predicate||null,this.represent=e.represent||null,this.representName=e.representName||null,this.defaultStyle=e.defaultStyle||null,this.multi=e.multi||!1,this.styleAliases=Vo(e.styleAliases||null),jo.indexOf(this.kind)===-1)throw new He('Unknown kind "'+this.kind+'" is specified for "'+n+'" YAML type.')}var qe=Yo;function zn(n,e){var t=[];return n[e].forEach(function(i){var s=t.length;t.forEach(function(r,o){r.tag===i.tag&&r.kind===i.kind&&r.multi===i.multi&&(s=o)}),t[s]=i}),t}function Go(){var n={scalar:{},sequence:{},mapping:{},fallback:{},multi:{scalar:[],sequence:[],mapping:[],fallback:[]}},e,t;function i(s){s.multi?(n.multi[s.kind].push(s),n.multi.fallback.push(s)):n[s.kind][s.tag]=n.fallback[s.tag]=s}for(e=0,t=arguments.length;e<t;e+=1)arguments[e].forEach(i);return n}function fn(n){return this.extend(n)}fn.prototype.extend=function(e){var t=[],i=[];if(e instanceof qe)i.push(e);else if(Array.isArray(e))i=i.concat(e);else if(e&&(Array.isArray(e.implicit)||Array.isArray(e.explicit)))e.implicit&&(t=t.concat(e.implicit)),e.explicit&&(i=i.concat(e.explicit));else throw new He("Schema.extend argument should be a Type, [ Type ], or a schema definition ({ implicit: [...], explicit: [...] })");t.forEach(function(r){if(!(r instanceof qe))throw new He("Specified list of YAML types (or a single Type object) contains a non-Type object.");if(r.loadKind&&r.loadKind!=="scalar")throw new He("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");if(r.multi)throw new He("There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.")}),i.forEach(function(r){if(!(r instanceof qe))throw new He("Specified list of YAML types (or a single Type object) contains a non-Type object.")});var s=Object.create(fn.prototype);return s.implicit=(this.implicit||[]).concat(t),s.explicit=(this.explicit||[]).concat(i),s.compiledImplicit=zn(s,"implicit"),s.compiledExplicit=zn(s,"explicit"),s.compiledTypeMap=Go(s.compiledImplicit,s.compiledExplicit),s};var qo=fn,Wo=new qe("tag:yaml.org,2002:str",{kind:"scalar",construct:function(n){return n!==null?n:""}}),Ko=new qe("tag:yaml.org,2002:seq",{kind:"sequence",construct:function(n){return n!==null?n:[]}}),Ho=new qe("tag:yaml.org,2002:map",{kind:"mapping",construct:function(n){return n!==null?n:{}}}),Jo=new qo({explicit:[Wo,Ko,Ho]});function Qo(n){if(n===null)return!0;var e=n.length;return e===1&&n==="~"||e===4&&(n==="null"||n==="Null"||n==="NULL")}function Zo(){return null}function Xo(n){return n===null}var ea=new qe("tag:yaml.org,2002:null",{kind:"scalar",resolve:Qo,construct:Zo,predicate:Xo,represent:{canonical:function(){return"~"},lowercase:function(){return"null"},uppercase:function(){return"NULL"},camelcase:function(){return"Null"},empty:function(){return""}},defaultStyle:"lowercase"});function ta(n){if(n===null)return!1;var e=n.length;return e===4&&(n==="true"||n==="True"||n==="TRUE")||e===5&&(n==="false"||n==="False"||n==="FALSE")}function na(n){return n==="true"||n==="True"||n==="TRUE"}function ia(n){return Object.prototype.toString.call(n)==="[object Boolean]"}var sa=new qe("tag:yaml.org,2002:bool",{kind:"scalar",resolve:ta,construct:na,predicate:ia,represent:{lowercase:function(n){return n?"true":"false"},uppercase:function(n){return n?"TRUE":"FALSE"},camelcase:function(n){return n?"True":"False"}},defaultStyle:"lowercase"});function ra(n){return 48<=n&&n<=57||65<=n&&n<=70||97<=n&&n<=102}function oa(n){return 48<=n&&n<=55}function aa(n){return 48<=n&&n<=57}function la(n){if(n===null)return!1;var e=n.length,t=0,i=!1,s;if(!e)return!1;if(s=n[t],(s==="-"||s==="+")&&(s=n[++t]),s==="0"){if(t+1===e)return!0;if(s=n[++t],s==="b"){for(t++;t<e;t++)if(s=n[t],s!=="_"){if(s!=="0"&&s!=="1")return!1;i=!0}return i&&s!=="_"}if(s==="x"){for(t++;t<e;t++)if(s=n[t],s!=="_"){if(!ra(n.charCodeAt(t)))return!1;i=!0}return i&&s!=="_"}if(s==="o"){for(t++;t<e;t++)if(s=n[t],s!=="_"){if(!oa(n.charCodeAt(t)))return!1;i=!0}return i&&s!=="_"}}if(s==="_")return!1;for(;t<e;t++)if(s=n[t],s!=="_"){if(!aa(n.charCodeAt(t)))return!1;i=!0}return!(!i||s==="_")}function ca(n){var e=n,t=1,i;if(e.indexOf("_")!==-1&&(e=e.replace(/_/g,"")),i=e[0],(i==="-"||i==="+")&&(i==="-"&&(t=-1),e=e.slice(1),i=e[0]),e==="0")return 0;if(i==="0"){if(e[1]==="b")return t*parseInt(e.slice(2),2);if(e[1]==="x")return t*parseInt(e.slice(2),16);if(e[1]==="o")return t*parseInt(e.slice(2),8)}return t*parseInt(e,10)}function da(n){return Object.prototype.toString.call(n)==="[object Number]"&&n%1===0&&!Ve.isNegativeZero(n)}var ua=new qe("tag:yaml.org,2002:int",{kind:"scalar",resolve:la,construct:ca,predicate:da,represent:{binary:function(n){return n>=0?"0b"+n.toString(2):"-0b"+n.toString(2).slice(1)},octal:function(n){return n>=0?"0o"+n.toString(8):"-0o"+n.toString(8).slice(1)},decimal:function(n){return n.toString(10)},hexadecimal:function(n){return n>=0?"0x"+n.toString(16).toUpperCase():"-0x"+n.toString(16).toUpperCase().slice(1)}},defaultStyle:"decimal",styleAliases:{binary:[2,"bin"],octal:[8,"oct"],decimal:[10,"dec"],hexadecimal:[16,"hex"]}}),pa=new RegExp("^(?:[-+]?(?:[0-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$");function ga(n){return!(n===null||!pa.test(n)||n[n.length-1]==="_")}function ha(n){var e,t;return e=n.replace(/_/g,"").toLowerCase(),t=e[0]==="-"?-1:1,"+-".indexOf(e[0])>=0&&(e=e.slice(1)),e===".inf"?t===1?Number.POSITIVE_INFINITY:Number.NEGATIVE_INFINITY:e===".nan"?NaN:t*parseFloat(e,10)}var fa=/^[-+]?[0-9]+e/;function ma(n,e){var t;if(isNaN(n))switch(e){case"lowercase":return".nan";case"uppercase":return".NAN";case"camelcase":return".NaN"}else if(Number.POSITIVE_INFINITY===n)switch(e){case"lowercase":return".inf";case"uppercase":return".INF";case"camelcase":return".Inf"}else if(Number.NEGATIVE_INFINITY===n)switch(e){case"lowercase":return"-.inf";case"uppercase":return"-.INF";case"camelcase":return"-.Inf"}else if(Ve.isNegativeZero(n))return"-0.0";return t=n.toString(10),fa.test(t)?t.replace("e",".e"):t}function ya(n){return Object.prototype.toString.call(n)==="[object Number]"&&(n%1!==0||Ve.isNegativeZero(n))}var ba=new qe("tag:yaml.org,2002:float",{kind:"scalar",resolve:ga,construct:ha,predicate:ya,represent:ma,defaultStyle:"lowercase"}),va=Jo.extend({implicit:[ea,sa,ua,ba]}),wa=va,_s=new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$"),xs=new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$");function Sa(n){return n===null?!1:_s.exec(n)!==null||xs.exec(n)!==null}function _a(n){var e,t,i,s,r,o,a,l=0,c=null,p,g,h;if(e=_s.exec(n),e===null&&(e=xs.exec(n)),e===null)throw new Error("Date resolve error");if(t=+e[1],i=+e[2]-1,s=+e[3],!e[4])return new Date(Date.UTC(t,i,s));if(r=+e[4],o=+e[5],a=+e[6],e[7]){for(l=e[7].slice(0,3);l.length<3;)l+="0";l=+l}return e[9]&&(p=+e[10],g=+(e[11]||0),c=(p*60+g)*6e4,e[9]==="-"&&(c=-c)),h=new Date(Date.UTC(t,i,s,r,o,a,l)),c&&h.setTime(h.getTime()-c),h}function xa(n){return n.toISOString()}var Ea=new qe("tag:yaml.org,2002:timestamp",{kind:"scalar",resolve:Sa,construct:_a,instanceOf:Date,represent:xa});function Ca(n){return n==="<<"||n===null}var ka=new qe("tag:yaml.org,2002:merge",{kind:"scalar",resolve:Ca}),En=`ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=
\r`;function Da(n){if(n===null)return!1;var e,t,i=0,s=n.length,r=En;for(t=0;t<s;t++)if(e=r.indexOf(n.charAt(t)),!(e>64)){if(e<0)return!1;i+=6}return i%8===0}function Pa(n){var e,t,i=n.replace(/[\r\n=]/g,""),s=i.length,r=En,o=0,a=[];for(e=0;e<s;e++)e%4===0&&e&&(a.push(o>>16&255),a.push(o>>8&255),a.push(o&255)),o=o<<6|r.indexOf(i.charAt(e));return t=s%4*6,t===0?(a.push(o>>16&255),a.push(o>>8&255),a.push(o&255)):t===18?(a.push(o>>10&255),a.push(o>>2&255)):t===12&&a.push(o>>4&255),new Uint8Array(a)}function Ta(n){var e="",t=0,i,s,r=n.length,o=En;for(i=0;i<r;i++)i%3===0&&i&&(e+=o[t>>18&63],e+=o[t>>12&63],e+=o[t>>6&63],e+=o[t&63]),t=(t<<8)+n[i];return s=r%3,s===0?(e+=o[t>>18&63],e+=o[t>>12&63],e+=o[t>>6&63],e+=o[t&63]):s===2?(e+=o[t>>10&63],e+=o[t>>4&63],e+=o[t<<2&63],e+=o[64]):s===1&&(e+=o[t>>2&63],e+=o[t<<4&63],e+=o[64],e+=o[64]),e}function Ma(n){return Object.prototype.toString.call(n)==="[object Uint8Array]"}var Na=new qe("tag:yaml.org,2002:binary",{kind:"scalar",resolve:Da,construct:Pa,predicate:Ma,represent:Ta}),Aa=Object.prototype.hasOwnProperty,Oa=Object.prototype.toString;function Ia(n){if(n===null)return!0;var e=[],t,i,s,r,o,a=n;for(t=0,i=a.length;t<i;t+=1){if(s=a[t],o=!1,Oa.call(s)!=="[object Object]")return!1;for(r in s)if(Aa.call(s,r))if(!o)o=!0;else return!1;if(!o)return!1;if(e.indexOf(r)===-1)e.push(r);else return!1}return!0}function Ra(n){return n!==null?n:[]}var La=new qe("tag:yaml.org,2002:omap",{kind:"sequence",resolve:Ia,construct:Ra}),Fa=Object.prototype.toString;function $a(n){if(n===null)return!0;var e,t,i,s,r,o=n;for(r=new Array(o.length),e=0,t=o.length;e<t;e+=1){if(i=o[e],Fa.call(i)!=="[object Object]"||(s=Object.keys(i),s.length!==1))return!1;r[e]=[s[0],i[s[0]]]}return!0}function Ua(n){if(n===null)return[];var e,t,i,s,r,o=n;for(r=new Array(o.length),e=0,t=o.length;e<t;e+=1)i=o[e],s=Object.keys(i),r[e]=[s[0],i[s[0]]];return r}var Ba=new qe("tag:yaml.org,2002:pairs",{kind:"sequence",resolve:$a,construct:Ua}),za=Object.prototype.hasOwnProperty;function ja(n){if(n===null)return!0;var e,t=n;for(e in t)if(za.call(t,e)&&t[e]!==null)return!1;return!0}function Va(n){return n!==null?n:{}}var Ya=new qe("tag:yaml.org,2002:set",{kind:"mapping",resolve:ja,construct:Va}),Cn=wa.extend({implicit:[Ea,ka],explicit:[Na,La,Ba,Ya]}),dt=Object.prototype.hasOwnProperty,Kt=1,Es=2,Cs=3,Ht=4,cn=1,Ga=2,jn=3,qa=/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,Wa=/[\x85\u2028\u2029]/,Ka=/[,\[\]\{\}]/,ks=/^(?:!|!!|![a-z\-]+!)$/i,Ds=/^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;function Vn(n){return Object.prototype.toString.call(n)}function tt(n){return n===10||n===13}function ht(n){return n===9||n===32}function Je(n){return n===9||n===32||n===10||n===13}function xt(n){return n===44||n===91||n===93||n===123||n===125}function Ha(n){var e;return 48<=n&&n<=57?n-48:(e=n|32,97<=e&&e<=102?e-97+10:-1)}function Ja(n){return n===120?2:n===117?4:n===85?8:0}function Qa(n){return 48<=n&&n<=57?n-48:-1}function Yn(n){return n===48?"\0":n===97?"\x07":n===98?"\b":n===116||n===9?"	":n===110?`
`:n===118?"\v":n===102?"\f":n===114?"\r":n===101?"\x1B":n===32?" ":n===34?'"':n===47?"/":n===92?"\\":n===78?"":n===95?" ":n===76?"\u2028":n===80?"\u2029":""}function Za(n){return n<=65535?String.fromCharCode(n):String.fromCharCode((n-65536>>10)+55296,(n-65536&1023)+56320)}var Ps=new Array(256),Ts=new Array(256);for(var bt=0;bt<256;bt++)Ps[bt]=Yn(bt)?1:0,Ts[bt]=Yn(bt);function Xa(n,e){this.input=n,this.filename=e.filename||null,this.schema=e.schema||Cn,this.onWarning=e.onWarning||null,this.legacy=e.legacy||!1,this.json=e.json||!1,this.listener=e.listener||null,this.implicitTypes=this.schema.compiledImplicit,this.typeMap=this.schema.compiledTypeMap,this.length=n.length,this.position=0,this.line=0,this.lineStart=0,this.lineIndent=0,this.firstTabInLine=-1,this.documents=[]}function Ms(n,e){var t={name:n.filename,buffer:n.input.slice(0,-1),position:n.position,line:n.line,column:n.position-n.lineStart};return t.snippet=Bo(t),new He(e,t)}function se(n,e){throw Ms(n,e)}function Jt(n,e){n.onWarning&&n.onWarning.call(null,Ms(n,e))}var Gn={YAML:function(e,t,i){var s,r,o;e.version!==null&&se(e,"duplication of %YAML directive"),i.length!==1&&se(e,"YAML directive accepts exactly one argument"),s=/^([0-9]+)\.([0-9]+)$/.exec(i[0]),s===null&&se(e,"ill-formed argument of the YAML directive"),r=parseInt(s[1],10),o=parseInt(s[2],10),r!==1&&se(e,"unacceptable YAML version of the document"),e.version=i[0],e.checkLineBreaks=o<2,o!==1&&o!==2&&Jt(e,"unsupported YAML version of the document")},TAG:function(e,t,i){var s,r;i.length!==2&&se(e,"TAG directive accepts exactly two arguments"),s=i[0],r=i[1],ks.test(s)||se(e,"ill-formed tag handle (first argument) of the TAG directive"),dt.call(e.tagMap,s)&&se(e,'there is a previously declared suffix for "'+s+'" tag handle'),Ds.test(r)||se(e,"ill-formed tag prefix (second argument) of the TAG directive");try{r=decodeURIComponent(r)}catch{se(e,"tag prefix is malformed: "+r)}e.tagMap[s]=r}};function ct(n,e,t,i){var s,r,o,a;if(e<t){if(a=n.input.slice(e,t),i)for(s=0,r=a.length;s<r;s+=1)o=a.charCodeAt(s),o===9||32<=o&&o<=1114111||se(n,"expected valid JSON character");else qa.test(a)&&se(n,"the stream contains non-printable characters");n.result+=a}}function qn(n,e,t,i){var s,r,o,a;for(Ve.isObject(t)||se(n,"cannot merge mappings; the provided source object is unacceptable"),s=Object.keys(t),o=0,a=s.length;o<a;o+=1)r=s[o],dt.call(e,r)||(e[r]=t[r],i[r]=!0)}function Et(n,e,t,i,s,r,o,a,l){var c,p;if(Array.isArray(s))for(s=Array.prototype.slice.call(s),c=0,p=s.length;c<p;c+=1)Array.isArray(s[c])&&se(n,"nested arrays are not supported inside keys"),typeof s=="object"&&Vn(s[c])==="[object Object]"&&(s[c]="[object Object]");if(typeof s=="object"&&Vn(s)==="[object Object]"&&(s="[object Object]"),s=String(s),e===null&&(e={}),i==="tag:yaml.org,2002:merge")if(Array.isArray(r))for(c=0,p=r.length;c<p;c+=1)qn(n,e,r[c],t);else qn(n,e,r,t);else!n.json&&!dt.call(t,s)&&dt.call(e,s)&&(n.line=o||n.line,n.lineStart=a||n.lineStart,n.position=l||n.position,se(n,"duplicated mapping key")),s==="__proto__"?Object.defineProperty(e,s,{configurable:!0,enumerable:!0,writable:!0,value:r}):e[s]=r,delete t[s];return e}function kn(n){var e;e=n.input.charCodeAt(n.position),e===10?n.position++:e===13?(n.position++,n.input.charCodeAt(n.position)===10&&n.position++):se(n,"a line break is expected"),n.line+=1,n.lineStart=n.position,n.firstTabInLine=-1}function ze(n,e,t){for(var i=0,s=n.input.charCodeAt(n.position);s!==0;){for(;ht(s);)s===9&&n.firstTabInLine===-1&&(n.firstTabInLine=n.position),s=n.input.charCodeAt(++n.position);if(e&&s===35)do s=n.input.charCodeAt(++n.position);while(s!==10&&s!==13&&s!==0);if(tt(s))for(kn(n),s=n.input.charCodeAt(n.position),i++,n.lineIndent=0;s===32;)n.lineIndent++,s=n.input.charCodeAt(++n.position);else break}return t!==-1&&i!==0&&n.lineIndent<t&&Jt(n,"deficient indentation"),i}function tn(n){var e=n.position,t;return t=n.input.charCodeAt(e),!!((t===45||t===46)&&t===n.input.charCodeAt(e+1)&&t===n.input.charCodeAt(e+2)&&(e+=3,t=n.input.charCodeAt(e),t===0||Je(t)))}function Dn(n,e){e===1?n.result+=" ":e>1&&(n.result+=Ve.repeat(`
`,e-1))}function el(n,e,t){var i,s,r,o,a,l,c,p,g=n.kind,h=n.result,m;if(m=n.input.charCodeAt(n.position),Je(m)||xt(m)||m===35||m===38||m===42||m===33||m===124||m===62||m===39||m===34||m===37||m===64||m===96||(m===63||m===45)&&(s=n.input.charCodeAt(n.position+1),Je(s)||t&&xt(s)))return!1;for(n.kind="scalar",n.result="",r=o=n.position,a=!1;m!==0;){if(m===58){if(s=n.input.charCodeAt(n.position+1),Je(s)||t&&xt(s))break}else if(m===35){if(i=n.input.charCodeAt(n.position-1),Je(i))break}else{if(n.position===n.lineStart&&tn(n)||t&&xt(m))break;if(tt(m))if(l=n.line,c=n.lineStart,p=n.lineIndent,ze(n,!1,-1),n.lineIndent>=e){a=!0,m=n.input.charCodeAt(n.position);continue}else{n.position=o,n.line=l,n.lineStart=c,n.lineIndent=p;break}}a&&(ct(n,r,o,!1),Dn(n,n.line-l),r=o=n.position,a=!1),ht(m)||(o=n.position+1),m=n.input.charCodeAt(++n.position)}return ct(n,r,o,!1),n.result?!0:(n.kind=g,n.result=h,!1)}function tl(n,e){var t,i,s;if(t=n.input.charCodeAt(n.position),t!==39)return!1;for(n.kind="scalar",n.result="",n.position++,i=s=n.position;(t=n.input.charCodeAt(n.position))!==0;)if(t===39)if(ct(n,i,n.position,!0),t=n.input.charCodeAt(++n.position),t===39)i=n.position,n.position++,s=n.position;else return!0;else tt(t)?(ct(n,i,s,!0),Dn(n,ze(n,!1,e)),i=s=n.position):n.position===n.lineStart&&tn(n)?se(n,"unexpected end of the document within a single quoted scalar"):(n.position++,s=n.position);se(n,"unexpected end of the stream within a single quoted scalar")}function nl(n,e){var t,i,s,r,o,a;if(a=n.input.charCodeAt(n.position),a!==34)return!1;for(n.kind="scalar",n.result="",n.position++,t=i=n.position;(a=n.input.charCodeAt(n.position))!==0;){if(a===34)return ct(n,t,n.position,!0),n.position++,!0;if(a===92){if(ct(n,t,n.position,!0),a=n.input.charCodeAt(++n.position),tt(a))ze(n,!1,e);else if(a<256&&Ps[a])n.result+=Ts[a],n.position++;else if((o=Ja(a))>0){for(s=o,r=0;s>0;s--)a=n.input.charCodeAt(++n.position),(o=Ha(a))>=0?r=(r<<4)+o:se(n,"expected hexadecimal character");n.result+=Za(r),n.position++}else se(n,"unknown escape sequence");t=i=n.position}else tt(a)?(ct(n,t,i,!0),Dn(n,ze(n,!1,e)),t=i=n.position):n.position===n.lineStart&&tn(n)?se(n,"unexpected end of the document within a double quoted scalar"):(n.position++,i=n.position)}se(n,"unexpected end of the stream within a double quoted scalar")}function il(n,e){var t=!0,i,s,r,o=n.tag,a,l=n.anchor,c,p,g,h,m,d=Object.create(null),f,v,w,S;if(S=n.input.charCodeAt(n.position),S===91)p=93,m=!1,a=[];else if(S===123)p=125,m=!0,a={};else return!1;for(n.anchor!==null&&(n.anchorMap[n.anchor]=a),S=n.input.charCodeAt(++n.position);S!==0;){if(ze(n,!0,e),S=n.input.charCodeAt(n.position),S===p)return n.position++,n.tag=o,n.anchor=l,n.kind=m?"mapping":"sequence",n.result=a,!0;t?S===44&&se(n,"expected the node content, but found ','"):se(n,"missed comma between flow collection entries"),v=f=w=null,g=h=!1,S===63&&(c=n.input.charCodeAt(n.position+1),Je(c)&&(g=h=!0,n.position++,ze(n,!0,e))),i=n.line,s=n.lineStart,r=n.position,Dt(n,e,Kt,!1,!0),v=n.tag,f=n.result,ze(n,!0,e),S=n.input.charCodeAt(n.position),(h||n.line===i)&&S===58&&(g=!0,S=n.input.charCodeAt(++n.position),ze(n,!0,e),Dt(n,e,Kt,!1,!0),w=n.result),m?Et(n,a,d,v,f,w,i,s,r):g?a.push(Et(n,null,d,v,f,w,i,s,r)):a.push(f),ze(n,!0,e),S=n.input.charCodeAt(n.position),S===44?(t=!0,S=n.input.charCodeAt(++n.position)):t=!1}se(n,"unexpected end of the stream within a flow collection")}function sl(n,e){var t,i,s=cn,r=!1,o=!1,a=e,l=0,c=!1,p,g;if(g=n.input.charCodeAt(n.position),g===124)i=!1;else if(g===62)i=!0;else return!1;for(n.kind="scalar",n.result="";g!==0;)if(g=n.input.charCodeAt(++n.position),g===43||g===45)cn===s?s=g===43?jn:Ga:se(n,"repeat of a chomping mode identifier");else if((p=Qa(g))>=0)p===0?se(n,"bad explicit indentation width of a block scalar; it cannot be less than one"):o?se(n,"repeat of an indentation width identifier"):(a=e+p-1,o=!0);else break;if(ht(g)){do g=n.input.charCodeAt(++n.position);while(ht(g));if(g===35)do g=n.input.charCodeAt(++n.position);while(!tt(g)&&g!==0)}for(;g!==0;){for(kn(n),n.lineIndent=0,g=n.input.charCodeAt(n.position);(!o||n.lineIndent<a)&&g===32;)n.lineIndent++,g=n.input.charCodeAt(++n.position);if(!o&&n.lineIndent>a&&(a=n.lineIndent),tt(g)){l++;continue}if(n.lineIndent<a){s===jn?n.result+=Ve.repeat(`
`,r?1+l:l):s===cn&&r&&(n.result+=`
`);break}for(i?ht(g)?(c=!0,n.result+=Ve.repeat(`
`,r?1+l:l)):c?(c=!1,n.result+=Ve.repeat(`
`,l+1)):l===0?r&&(n.result+=" "):n.result+=Ve.repeat(`
`,l):n.result+=Ve.repeat(`
`,r?1+l:l),r=!0,o=!0,l=0,t=n.position;!tt(g)&&g!==0;)g=n.input.charCodeAt(++n.position);ct(n,t,n.position,!1)}return!0}function Wn(n,e){var t,i=n.tag,s=n.anchor,r=[],o,a=!1,l;if(n.firstTabInLine!==-1)return!1;for(n.anchor!==null&&(n.anchorMap[n.anchor]=r),l=n.input.charCodeAt(n.position);l!==0&&(n.firstTabInLine!==-1&&(n.position=n.firstTabInLine,se(n,"tab characters must not be used in indentation")),!(l!==45||(o=n.input.charCodeAt(n.position+1),!Je(o))));){if(a=!0,n.position++,ze(n,!0,-1)&&n.lineIndent<=e){r.push(null),l=n.input.charCodeAt(n.position);continue}if(t=n.line,Dt(n,e,Cs,!1,!0),r.push(n.result),ze(n,!0,-1),l=n.input.charCodeAt(n.position),(n.line===t||n.lineIndent>e)&&l!==0)se(n,"bad indentation of a sequence entry");else if(n.lineIndent<e)break}return a?(n.tag=i,n.anchor=s,n.kind="sequence",n.result=r,!0):!1}function rl(n,e,t){var i,s,r,o,a,l,c=n.tag,p=n.anchor,g={},h=Object.create(null),m=null,d=null,f=null,v=!1,w=!1,S;if(n.firstTabInLine!==-1)return!1;for(n.anchor!==null&&(n.anchorMap[n.anchor]=g),S=n.input.charCodeAt(n.position);S!==0;){if(!v&&n.firstTabInLine!==-1&&(n.position=n.firstTabInLine,se(n,"tab characters must not be used in indentation")),i=n.input.charCodeAt(n.position+1),r=n.line,(S===63||S===58)&&Je(i))S===63?(v&&(Et(n,g,h,m,d,null,o,a,l),m=d=f=null),w=!0,v=!0,s=!0):v?(v=!1,s=!0):se(n,"incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line"),n.position+=1,S=i;else{if(o=n.line,a=n.lineStart,l=n.position,!Dt(n,t,Es,!1,!0))break;if(n.line===r){for(S=n.input.charCodeAt(n.position);ht(S);)S=n.input.charCodeAt(++n.position);if(S===58)S=n.input.charCodeAt(++n.position),Je(S)||se(n,"a whitespace character is expected after the key-value separator within a block mapping"),v&&(Et(n,g,h,m,d,null,o,a,l),m=d=f=null),w=!0,v=!1,s=!1,m=n.tag,d=n.result;else if(w)se(n,"can not read an implicit mapping pair; a colon is missed");else return n.tag=c,n.anchor=p,!0}else if(w)se(n,"can not read a block mapping entry; a multiline key may not be an implicit key");else return n.tag=c,n.anchor=p,!0}if((n.line===r||n.lineIndent>e)&&(v&&(o=n.line,a=n.lineStart,l=n.position),Dt(n,e,Ht,!0,s)&&(v?d=n.result:f=n.result),v||(Et(n,g,h,m,d,f,o,a,l),m=d=f=null),ze(n,!0,-1),S=n.input.charCodeAt(n.position)),(n.line===r||n.lineIndent>e)&&S!==0)se(n,"bad indentation of a mapping entry");else if(n.lineIndent<e)break}return v&&Et(n,g,h,m,d,null,o,a,l),w&&(n.tag=c,n.anchor=p,n.kind="mapping",n.result=g),w}function ol(n){var e,t=!1,i=!1,s,r,o;if(o=n.input.charCodeAt(n.position),o!==33)return!1;if(n.tag!==null&&se(n,"duplication of a tag property"),o=n.input.charCodeAt(++n.position),o===60?(t=!0,o=n.input.charCodeAt(++n.position)):o===33?(i=!0,s="!!",o=n.input.charCodeAt(++n.position)):s="!",e=n.position,t){do o=n.input.charCodeAt(++n.position);while(o!==0&&o!==62);n.position<n.length?(r=n.input.slice(e,n.position),o=n.input.charCodeAt(++n.position)):se(n,"unexpected end of the stream within a verbatim tag")}else{for(;o!==0&&!Je(o);)o===33&&(i?se(n,"tag suffix cannot contain exclamation marks"):(s=n.input.slice(e-1,n.position+1),ks.test(s)||se(n,"named tag handle cannot contain such characters"),i=!0,e=n.position+1)),o=n.input.charCodeAt(++n.position);r=n.input.slice(e,n.position),Ka.test(r)&&se(n,"tag suffix cannot contain flow indicator characters")}r&&!Ds.test(r)&&se(n,"tag name cannot contain such characters: "+r);try{r=decodeURIComponent(r)}catch{se(n,"tag name is malformed: "+r)}return t?n.tag=r:dt.call(n.tagMap,s)?n.tag=n.tagMap[s]+r:s==="!"?n.tag="!"+r:s==="!!"?n.tag="tag:yaml.org,2002:"+r:se(n,'undeclared tag handle "'+s+'"'),!0}function al(n){var e,t;if(t=n.input.charCodeAt(n.position),t!==38)return!1;for(n.anchor!==null&&se(n,"duplication of an anchor property"),t=n.input.charCodeAt(++n.position),e=n.position;t!==0&&!Je(t)&&!xt(t);)t=n.input.charCodeAt(++n.position);return n.position===e&&se(n,"name of an anchor node must contain at least one character"),n.anchor=n.input.slice(e,n.position),!0}function ll(n){var e,t,i;if(i=n.input.charCodeAt(n.position),i!==42)return!1;for(i=n.input.charCodeAt(++n.position),e=n.position;i!==0&&!Je(i)&&!xt(i);)i=n.input.charCodeAt(++n.position);return n.position===e&&se(n,"name of an alias node must contain at least one character"),t=n.input.slice(e,n.position),dt.call(n.anchorMap,t)||se(n,'unidentified alias "'+t+'"'),n.result=n.anchorMap[t],ze(n,!0,-1),!0}function Dt(n,e,t,i,s){var r,o,a,l=1,c=!1,p=!1,g,h,m,d,f,v;if(n.listener!==null&&n.listener("open",n),n.tag=null,n.anchor=null,n.kind=null,n.result=null,r=o=a=Ht===t||Cs===t,i&&ze(n,!0,-1)&&(c=!0,n.lineIndent>e?l=1:n.lineIndent===e?l=0:n.lineIndent<e&&(l=-1)),l===1)for(;ol(n)||al(n);)ze(n,!0,-1)?(c=!0,a=r,n.lineIndent>e?l=1:n.lineIndent===e?l=0:n.lineIndent<e&&(l=-1)):a=!1;if(a&&(a=c||s),(l===1||Ht===t)&&(Kt===t||Es===t?f=e:f=e+1,v=n.position-n.lineStart,l===1?a&&(Wn(n,v)||rl(n,v,f))||il(n,f)?p=!0:(o&&sl(n,f)||tl(n,f)||nl(n,f)?p=!0:ll(n)?(p=!0,(n.tag!==null||n.anchor!==null)&&se(n,"alias node should not have any properties")):el(n,f,Kt===t)&&(p=!0,n.tag===null&&(n.tag="?")),n.anchor!==null&&(n.anchorMap[n.anchor]=n.result)):l===0&&(p=a&&Wn(n,v))),n.tag===null)n.anchor!==null&&(n.anchorMap[n.anchor]=n.result);else if(n.tag==="?"){for(n.result!==null&&n.kind!=="scalar"&&se(n,'unacceptable node kind for !<?> tag; it should be "scalar", not "'+n.kind+'"'),g=0,h=n.implicitTypes.length;g<h;g+=1)if(d=n.implicitTypes[g],d.resolve(n.result)){n.result=d.construct(n.result),n.tag=d.tag,n.anchor!==null&&(n.anchorMap[n.anchor]=n.result);break}}else if(n.tag!=="!"){if(dt.call(n.typeMap[n.kind||"fallback"],n.tag))d=n.typeMap[n.kind||"fallback"][n.tag];else for(d=null,m=n.typeMap.multi[n.kind||"fallback"],g=0,h=m.length;g<h;g+=1)if(n.tag.slice(0,m[g].tag.length)===m[g].tag){d=m[g];break}d||se(n,"unknown tag !<"+n.tag+">"),n.result!==null&&d.kind!==n.kind&&se(n,"unacceptable node kind for !<"+n.tag+'> tag; it should be "'+d.kind+'", not "'+n.kind+'"'),d.resolve(n.result,n.tag)?(n.result=d.construct(n.result,n.tag),n.anchor!==null&&(n.anchorMap[n.anchor]=n.result)):se(n,"cannot resolve a node with !<"+n.tag+"> explicit tag")}return n.listener!==null&&n.listener("close",n),n.tag!==null||n.anchor!==null||p}function cl(n){var e=n.position,t,i,s,r=!1,o;for(n.version=null,n.checkLineBreaks=n.legacy,n.tagMap=Object.create(null),n.anchorMap=Object.create(null);(o=n.input.charCodeAt(n.position))!==0&&(ze(n,!0,-1),o=n.input.charCodeAt(n.position),!(n.lineIndent>0||o!==37));){for(r=!0,o=n.input.charCodeAt(++n.position),t=n.position;o!==0&&!Je(o);)o=n.input.charCodeAt(++n.position);for(i=n.input.slice(t,n.position),s=[],i.length<1&&se(n,"directive name must not be less than one character in length");o!==0;){for(;ht(o);)o=n.input.charCodeAt(++n.position);if(o===35){do o=n.input.charCodeAt(++n.position);while(o!==0&&!tt(o));break}if(tt(o))break;for(t=n.position;o!==0&&!Je(o);)o=n.input.charCodeAt(++n.position);s.push(n.input.slice(t,n.position))}o!==0&&kn(n),dt.call(Gn,i)?Gn[i](n,i,s):Jt(n,'unknown document directive "'+i+'"')}if(ze(n,!0,-1),n.lineIndent===0&&n.input.charCodeAt(n.position)===45&&n.input.charCodeAt(n.position+1)===45&&n.input.charCodeAt(n.position+2)===45?(n.position+=3,ze(n,!0,-1)):r&&se(n,"directives end mark is expected"),Dt(n,n.lineIndent-1,Ht,!1,!0),ze(n,!0,-1),n.checkLineBreaks&&Wa.test(n.input.slice(e,n.position))&&Jt(n,"non-ASCII line breaks are interpreted as content"),n.documents.push(n.result),n.position===n.lineStart&&tn(n)){n.input.charCodeAt(n.position)===46&&(n.position+=3,ze(n,!0,-1));return}if(n.position<n.length-1)se(n,"end of the stream or a document separator is expected");else return}function Ns(n,e){n=String(n),e=e||{},n.length!==0&&(n.charCodeAt(n.length-1)!==10&&n.charCodeAt(n.length-1)!==13&&(n+=`
`),n.charCodeAt(0)===65279&&(n=n.slice(1)));var t=new Xa(n,e),i=n.indexOf("\0");for(i!==-1&&(t.position=i,se(t,"null byte is not allowed in input")),t.input+="\0";t.input.charCodeAt(t.position)===32;)t.lineIndent+=1,t.position+=1;for(;t.position<t.length-1;)cl(t);return t.documents}function dl(n,e,t){e!==null&&typeof e=="object"&&typeof t>"u"&&(t=e,e=null);var i=Ns(n,t);if(typeof e!="function")return i;for(var s=0,r=i.length;s<r;s+=1)e(i[s])}function ul(n,e){var t=Ns(n,e);if(t.length!==0){if(t.length===1)return t[0];throw new He("expected a single document in the stream, but found more")}}var pl=dl,gl=ul,hl={loadAll:pl,load:gl},As=Object.prototype.toString,Os=Object.prototype.hasOwnProperty,Pn=65279,fl=9,It=10,ml=13,yl=32,bl=33,vl=34,mn=35,wl=37,Sl=38,_l=39,xl=42,Is=44,El=45,Qt=58,Cl=61,kl=62,Dl=63,Pl=64,Rs=91,Ls=93,Tl=96,Fs=123,Ml=124,$s=125,We={};We[0]="\\0";We[7]="\\a";We[8]="\\b";We[9]="\\t";We[10]="\\n";We[11]="\\v";We[12]="\\f";We[13]="\\r";We[27]="\\e";We[34]='\\"';We[92]="\\\\";We[133]="\\N";We[160]="\\_";We[8232]="\\L";We[8233]="\\P";var Nl=["y","Y","yes","Yes","YES","on","On","ON","n","N","no","No","NO","off","Off","OFF"],Al=/^[-+]?[0-9_]+(?::[0-9_]+)+(?:\.[0-9_]*)?$/;function Ol(n,e){var t,i,s,r,o,a,l;if(e===null)return{};for(t={},i=Object.keys(e),s=0,r=i.length;s<r;s+=1)o=i[s],a=String(e[o]),o.slice(0,2)==="!!"&&(o="tag:yaml.org,2002:"+o.slice(2)),l=n.compiledTypeMap.fallback[o],l&&Os.call(l.styleAliases,a)&&(a=l.styleAliases[a]),t[o]=a;return t}function Il(n){var e,t,i;if(e=n.toString(16).toUpperCase(),n<=255)t="x",i=2;else if(n<=65535)t="u",i=4;else if(n<=4294967295)t="U",i=8;else throw new He("code point within a string may not be greater than 0xFFFFFFFF");return"\\"+t+Ve.repeat("0",i-e.length)+e}var Rl=1,Rt=2;function Ll(n){this.schema=n.schema||Cn,this.indent=Math.max(1,n.indent||2),this.noArrayIndent=n.noArrayIndent||!1,this.skipInvalid=n.skipInvalid||!1,this.flowLevel=Ve.isNothing(n.flowLevel)?-1:n.flowLevel,this.styleMap=Ol(this.schema,n.styles||null),this.sortKeys=n.sortKeys||!1,this.lineWidth=n.lineWidth||80,this.noRefs=n.noRefs||!1,this.noCompatMode=n.noCompatMode||!1,this.condenseFlow=n.condenseFlow||!1,this.quotingType=n.quotingType==='"'?Rt:Rl,this.forceQuotes=n.forceQuotes||!1,this.replacer=typeof n.replacer=="function"?n.replacer:null,this.implicitTypes=this.schema.compiledImplicit,this.explicitTypes=this.schema.compiledExplicit,this.tag=null,this.result="",this.duplicates=[],this.usedDuplicates=null}function Kn(n,e){for(var t=Ve.repeat(" ",e),i=0,s=-1,r="",o,a=n.length;i<a;)s=n.indexOf(`
`,i),s===-1?(o=n.slice(i),i=a):(o=n.slice(i,s+1),i=s+1),o.length&&o!==`
`&&(r+=t),r+=o;return r}function yn(n,e){return`
`+Ve.repeat(" ",n.indent*e)}function Fl(n,e){var t,i,s;for(t=0,i=n.implicitTypes.length;t<i;t+=1)if(s=n.implicitTypes[t],s.resolve(e))return!0;return!1}function Zt(n){return n===yl||n===fl}function Lt(n){return 32<=n&&n<=126||161<=n&&n<=55295&&n!==8232&&n!==8233||57344<=n&&n<=65533&&n!==Pn||65536<=n&&n<=1114111}function Hn(n){return Lt(n)&&n!==Pn&&n!==ml&&n!==It}function Jn(n,e,t){var i=Hn(n),s=i&&!Zt(n);return(t?i:i&&n!==Is&&n!==Rs&&n!==Ls&&n!==Fs&&n!==$s)&&n!==mn&&!(e===Qt&&!s)||Hn(e)&&!Zt(e)&&n===mn||e===Qt&&s}function $l(n){return Lt(n)&&n!==Pn&&!Zt(n)&&n!==El&&n!==Dl&&n!==Qt&&n!==Is&&n!==Rs&&n!==Ls&&n!==Fs&&n!==$s&&n!==mn&&n!==Sl&&n!==xl&&n!==bl&&n!==Ml&&n!==Cl&&n!==kl&&n!==_l&&n!==vl&&n!==wl&&n!==Pl&&n!==Tl}function Ul(n){return!Zt(n)&&n!==Qt}function Mt(n,e){var t=n.charCodeAt(e),i;return t>=55296&&t<=56319&&e+1<n.length&&(i=n.charCodeAt(e+1),i>=56320&&i<=57343)?(t-55296)*1024+i-56320+65536:t}function Us(n){var e=/^\n* /;return e.test(n)}var Bs=1,bn=2,zs=3,js=4,St=5;function Bl(n,e,t,i,s,r,o,a){var l,c=0,p=null,g=!1,h=!1,m=i!==-1,d=-1,f=$l(Mt(n,0))&&Ul(Mt(n,n.length-1));if(e||o)for(l=0;l<n.length;c>=65536?l+=2:l++){if(c=Mt(n,l),!Lt(c))return St;f=f&&Jn(c,p,a),p=c}else{for(l=0;l<n.length;c>=65536?l+=2:l++){if(c=Mt(n,l),c===It)g=!0,m&&(h=h||l-d-1>i&&n[d+1]!==" ",d=l);else if(!Lt(c))return St;f=f&&Jn(c,p,a),p=c}h=h||m&&l-d-1>i&&n[d+1]!==" "}return!g&&!h?f&&!o&&!s(n)?Bs:r===Rt?St:bn:t>9&&Us(n)?St:o?r===Rt?St:bn:h?js:zs}function zl(n,e,t,i,s){n.dump=function(){if(e.length===0)return n.quotingType===Rt?'""':"''";if(!n.noCompatMode&&(Nl.indexOf(e)!==-1||Al.test(e)))return n.quotingType===Rt?'"'+e+'"':"'"+e+"'";var r=n.indent*Math.max(1,t),o=n.lineWidth===-1?-1:Math.max(Math.min(n.lineWidth,40),n.lineWidth-r),a=i||n.flowLevel>-1&&t>=n.flowLevel;function l(c){return Fl(n,c)}switch(Bl(e,a,n.indent,o,l,n.quotingType,n.forceQuotes&&!i,s)){case Bs:return e;case bn:return"'"+e.replace(/'/g,"''")+"'";case zs:return"|"+Qn(e,n.indent)+Zn(Kn(e,r));case js:return">"+Qn(e,n.indent)+Zn(Kn(jl(e,o),r));case St:return'"'+Vl(e)+'"';default:throw new He("impossible error: invalid scalar style")}}()}function Qn(n,e){var t=Us(n)?String(e):"",i=n[n.length-1]===`
`,s=i&&(n[n.length-2]===`
`||n===`
`),r=s?"+":i?"":"-";return t+r+`
`}function Zn(n){return n[n.length-1]===`
`?n.slice(0,-1):n}function jl(n,e){for(var t=/(\n+)([^\n]*)/g,i=function(){var c=n.indexOf(`
`);return c=c!==-1?c:n.length,t.lastIndex=c,Xn(n.slice(0,c),e)}(),s=n[0]===`
`||n[0]===" ",r,o;o=t.exec(n);){var a=o[1],l=o[2];r=l[0]===" ",i+=a+(!s&&!r&&l!==""?`
`:"")+Xn(l,e),s=r}return i}function Xn(n,e){if(n===""||n[0]===" ")return n;for(var t=/ [^ ]/g,i,s=0,r,o=0,a=0,l="";i=t.exec(n);)a=i.index,a-s>e&&(r=o>s?o:a,l+=`
`+n.slice(s,r),s=r+1),o=a;return l+=`
`,n.length-s>e&&o>s?l+=n.slice(s,o)+`
`+n.slice(o+1):l+=n.slice(s),l.slice(1)}function Vl(n){for(var e="",t=0,i,s=0;s<n.length;t>=65536?s+=2:s++)t=Mt(n,s),i=We[t],!i&&Lt(t)?(e+=n[s],t>=65536&&(e+=n[s+1])):e+=i||Il(t);return e}function Yl(n,e,t){var i="",s=n.tag,r,o,a;for(r=0,o=t.length;r<o;r+=1)a=t[r],n.replacer&&(a=n.replacer.call(t,String(r),a)),(st(n,e,a,!1,!1)||typeof a>"u"&&st(n,e,null,!1,!1))&&(i!==""&&(i+=","+(n.condenseFlow?"":" ")),i+=n.dump);n.tag=s,n.dump="["+i+"]"}function ei(n,e,t,i){var s="",r=n.tag,o,a,l;for(o=0,a=t.length;o<a;o+=1)l=t[o],n.replacer&&(l=n.replacer.call(t,String(o),l)),(st(n,e+1,l,!0,!0,!1,!0)||typeof l>"u"&&st(n,e+1,null,!0,!0,!1,!0))&&((!i||s!=="")&&(s+=yn(n,e)),n.dump&&It===n.dump.charCodeAt(0)?s+="-":s+="- ",s+=n.dump);n.tag=r,n.dump=s||"[]"}function Gl(n,e,t){var i="",s=n.tag,r=Object.keys(t),o,a,l,c,p;for(o=0,a=r.length;o<a;o+=1)p="",i!==""&&(p+=", "),n.condenseFlow&&(p+='"'),l=r[o],c=t[l],n.replacer&&(c=n.replacer.call(t,l,c)),st(n,e,l,!1,!1)&&(n.dump.length>1024&&(p+="? "),p+=n.dump+(n.condenseFlow?'"':"")+":"+(n.condenseFlow?"":" "),st(n,e,c,!1,!1)&&(p+=n.dump,i+=p));n.tag=s,n.dump="{"+i+"}"}function ql(n,e,t,i){var s="",r=n.tag,o=Object.keys(t),a,l,c,p,g,h;if(n.sortKeys===!0)o.sort();else if(typeof n.sortKeys=="function")o.sort(n.sortKeys);else if(n.sortKeys)throw new He("sortKeys must be a boolean or a function");for(a=0,l=o.length;a<l;a+=1)h="",(!i||s!=="")&&(h+=yn(n,e)),c=o[a],p=t[c],n.replacer&&(p=n.replacer.call(t,c,p)),st(n,e+1,c,!0,!0,!0)&&(g=n.tag!==null&&n.tag!=="?"||n.dump&&n.dump.length>1024,g&&(n.dump&&It===n.dump.charCodeAt(0)?h+="?":h+="? "),h+=n.dump,g&&(h+=yn(n,e)),st(n,e+1,p,!0,g)&&(n.dump&&It===n.dump.charCodeAt(0)?h+=":":h+=": ",h+=n.dump,s+=h));n.tag=r,n.dump=s||"{}"}function ti(n,e,t){var i,s,r,o,a,l;for(s=t?n.explicitTypes:n.implicitTypes,r=0,o=s.length;r<o;r+=1)if(a=s[r],(a.instanceOf||a.predicate)&&(!a.instanceOf||typeof e=="object"&&e instanceof a.instanceOf)&&(!a.predicate||a.predicate(e))){if(t?a.multi&&a.representName?n.tag=a.representName(e):n.tag=a.tag:n.tag="?",a.represent){if(l=n.styleMap[a.tag]||a.defaultStyle,As.call(a.represent)==="[object Function]")i=a.represent(e,l);else if(Os.call(a.represent,l))i=a.represent[l](e,l);else throw new He("!<"+a.tag+'> tag resolver accepts not "'+l+'" style');n.dump=i}return!0}return!1}function st(n,e,t,i,s,r,o){n.tag=null,n.dump=t,ti(n,t,!1)||ti(n,t,!0);var a=As.call(n.dump),l=i,c;i&&(i=n.flowLevel<0||n.flowLevel>e);var p=a==="[object Object]"||a==="[object Array]",g,h;if(p&&(g=n.duplicates.indexOf(t),h=g!==-1),(n.tag!==null&&n.tag!=="?"||h||n.indent!==2&&e>0)&&(s=!1),h&&n.usedDuplicates[g])n.dump="*ref_"+g;else{if(p&&h&&!n.usedDuplicates[g]&&(n.usedDuplicates[g]=!0),a==="[object Object]")i&&Object.keys(n.dump).length!==0?(ql(n,e,n.dump,s),h&&(n.dump="&ref_"+g+n.dump)):(Gl(n,e,n.dump),h&&(n.dump="&ref_"+g+" "+n.dump));else if(a==="[object Array]")i&&n.dump.length!==0?(n.noArrayIndent&&!o&&e>0?ei(n,e-1,n.dump,s):ei(n,e,n.dump,s),h&&(n.dump="&ref_"+g+n.dump)):(Yl(n,e,n.dump),h&&(n.dump="&ref_"+g+" "+n.dump));else if(a==="[object String]")n.tag!=="?"&&zl(n,n.dump,e,r,l);else{if(a==="[object Undefined]")return!1;if(n.skipInvalid)return!1;throw new He("unacceptable kind of an object to dump "+a)}n.tag!==null&&n.tag!=="?"&&(c=encodeURI(n.tag[0]==="!"?n.tag.slice(1):n.tag).replace(/!/g,"%21"),n.tag[0]==="!"?c="!"+c:c.slice(0,18)==="tag:yaml.org,2002:"?c="!!"+c.slice(18):c="!<"+c+">",n.dump=c+" "+n.dump)}return!0}function Wl(n,e){var t=[],i=[],s,r;for(vn(n,t,i),s=0,r=i.length;s<r;s+=1)e.duplicates.push(t[i[s]]);e.usedDuplicates=new Array(r)}function vn(n,e,t){var i,s,r;if(n!==null&&typeof n=="object")if(s=e.indexOf(n),s!==-1)t.indexOf(s)===-1&&t.push(s);else if(e.push(n),Array.isArray(n))for(s=0,r=n.length;s<r;s+=1)vn(n[s],e,t);else for(i=Object.keys(n),s=0,r=i.length;s<r;s+=1)vn(n[i[s]],e,t)}function Kl(n,e){e=e||{};var t=new Ll(e);t.noRefs||Wl(n,t);var i=n;return t.replacer&&(i=t.replacer.call({"":i},"",i)),st(t,0,i,!0,!0)?t.dump+`
---`,3);if(e!==-1){const t=n.slice(3,e+1),i=n.slice(e+4);return{frontmatter:t,body:i}}}return{frontmatter:null,body:n}}function Ys(n){if(!n)return null;try{const e=Zl(n);return typeof e=="object"&&e!==null?e:{}}catch(e){throw lt.error("[FrontmatterUtils] YAML parse failed:",String(e)),new Error("Malformed frontmatter: "+String(e))}}function ec(n){return Xl(n,{schema:Ql,noRefs:!0,sortKeys:!1})}async function Yt(n,e){try{try{const o=n.metadataCache.getFileCache(e);if(o&&o.frontmatter&&typeof o.frontmatter=="object"){const a=o.frontmatter[wn];if(typeof a=="string")return a;if(a!=null)return String(a)}}catch(o){lt.debug("[FrontmatterUtils] metadataCache read failed, falling back to file read.",String(o))}const t=await n.vault.read(e),{frontmatter:i}=Vs(t);if(!i)return null;const s=Ys(i);if(!s)return null;const r=s[wn];return typeof r=="string"?r:r!=null?String(r):null}catch(t){return lt.error("[FrontmatterUtils] Failed to read mm_uid for file:",e.path,String(t)),null}}async function tc(n,e,t){try{const i=await n.vault.read(e),{frontmatter:s,body:r}=Vs(i);let o={};if(s)try{o=Ys(s)||{}}catch(c){throw lt.error("[FrontmatterUtils] Malformed frontmatter when writing mm_uid for",e.path,String(c)),c}o[wn]=t;const l=`---
${ec(o).trimEnd()}
---
${r}`;if(n.vault&&typeof n.vault.modify=="function"){await n.vault.modify(e,l),lt.info("[FrontmatterUtils] Wrote mm_uid to",e.path);return}if(n.vault&&n.vault.adapter&&typeof n.vault.adapter.write=="function"){await n.vault.adapter.write(e.path,l),lt.info("[FrontmatterUtils] Wrote mm_uid to (adapter) ",e.path);return}await Vt.promises.writeFile(e.path,l,{encoding:"utf8"}),lt.info("[FrontmatterUtils] Wrote mm_uid to (fs) ",e.path)}catch(i){throw lt.error("[FrontmatterUtils] Failed to write mm_uid for file:",e.path,String(i)),i}}var it=(n=>(n.NOT_SYNCED="not-synced",n.SYNCED="synced",n.PRIVATE="private",n.SYNCING="syncing",n.ERROR="error",n))(it||{});class nc{constructor(e,t,i,s,r){this.activeSyncs=new Map,this.syncQueue=[],this.isProcessingQueue=!1,this.app=e,this.settings=t,this.graphitiService=i,this.syncRegistryService=s,this.logger=r,this.logger.info("SyncStatusManager initialized")}async enqueue(e,t="obsidian_mm_individual"){return new Promise((i,s)=>{const r={file:e,source_description:t,resolve:i,reject:s};this.syncQueue.push(r),this.syncQueue.length===1?this.logger.info(`Starting sync for ${e.name}`):this.logger.info(`Sync queued for ${e.name} (position ${this.syncQueue.length} in queue)`),this.processQueue()})}async processQueue(){if(!(this.isProcessingQueue||this.syncQueue.length===0)){for(this.isProcessingQueue=!0;this.syncQueue.length>0;){const e=this.syncQueue.shift();try{const t=await this.syncNote(e.file,e.source_description);e.resolve(t)}catch(t){e.reject(t)}}this.isProcessingQueue=!1}}updateSettings(e){this.settings=e,this.logger.setDebug(e.enableDebugLogging),this.logger.debug("SyncStatusManager settings updated")}async getNoteSyncStatus(e){var t;try{if(this.activeSyncs.has(e.path))return{status:it.SYNCING,reason:"Sync operation in progress"};if(this.isNotePrivate(e))return{status:it.PRIVATE,reason:"Note is marked private or in excluded folder"};const i=await Yt(this.app,e);if(!i)return{status:it.NOT_SYNCED,reason:"Note has no mm_uid - has not been synced to Graphiti"};const s=this.app.vault.getName(),r=this.getCurrentDatabaseType(),o=this.syncRegistryService.getSyncRecord(i,s);if(o){const a=o.syncs.find(c=>c.database_id===r);if(a){if(a.error_message)return{status:it.ERROR,reason:`Last sync failed: ${a.error_message}`,lastSynced:a.last_sync,episodeId:a.episode_uuid,syncType:a.source_description};const c=(t=a.source_description)!=null&&t.includes("individual")?"individual sync":"sync";return{status:it.SYNCED,reason:`Note has been synced to Graphiti (${c})`,lastSynced:a.last_sync,episodeId:a.episode_uuid,syncType:a.source_description}}const l=o.syncs.map(c=>c.database_id).join(", ");return{status:it.NOT_SYNCED,reason:`Note was synced to other databases (${l}) but not current database (${r})`}}return{status:it.NOT_SYNCED,reason:`Note has mm_uid (${i}) but no sync record found - may need re-sync`}}catch(i){return this.logger.error("Error determining sync status",{file:e.path,error:i}),{status:it.ERROR,reason:`Error determining status: ${i instanceof Error?i.message:String(i)}`}}}getStatus(e){var t;try{if(this.activeSyncs.has(e.path))return"SYNCING";if(this.isNotePrivate(e))return"PRIVATE";const i=this.app.metadataCache.getFileCache(e),s=(t=i==null?void 0:i.frontmatter)==null?void 0:t.mm_uid;if(!s||typeof s!="string")return"NOT_SYNCED";const r=this.app.vault.getName(),o=this.getCurrentDatabaseType(),a=this.syncRegistryService.getSyncRecord(s,r);if(a){const l=a.syncs.find(c=>c.database_id===o);return l?l.error_message?"ERROR":"SYNCED":"NOT_SYNCED"}return"NOT_SYNCED"}catch(i){return this.logger.error("Error getting sync status",{file:e.path,error:i}),"ERROR"}}extractMmUidFromSyncResult(e){var t,i,s,r;try{if(e.episode_uuid&&typeof e.episode_uuid=="string")return this.logger.debug(`Extracted mm_uid from top-level episode_uuid: ${e.episode_uuid}`),e.episode_uuid;if(e.notes&&Array.isArray(e.notes))for(const o of e.notes){if(o.episode_uuid&&typeof o.episode_uuid=="string")return this.logger.debug("Extracted mm_uid from notes array episode_uuid",{mmUid:o.episode_uuid}),o.episode_uuid;if((i=(t=o.graphiti_response)==null?void 0:t.episode)!=null&&i.uuid&&typeof o.graphiti_response.episode.uuid=="string")return this.logger.debug("Extracted mm_uid from graphiti_response.episode.uuid",{mmUid:o.graphiti_response.episode.uuid}),o.graphiti_response.episode.uuid}if(e.pythonStdout&&typeof e.pythonStdout=="string"){const o=e.pythonStdout.split(`
`);for(const a of o)if(a.trim())try{const l=JSON.parse(a);if(l.episode_uuid&&typeof l.episode_uuid=="string")return this.logger.debug("Extracted mm_uid from Python stdout top-level",{mmUid:l.episode_uuid}),l.episode_uuid;if(l.notes&&Array.isArray(l.notes))for(const c of l.notes){if(c.episode_uuid&&typeof c.episode_uuid=="string")return this.logger.debug(`Extracted mm_uid from Python stdout notes array: ${c.episode_uuid}`),c.episode_uuid;if((r=(s=c.graphiti_response)==null?void 0:s.episode)!=null&&r.uuid&&typeof c.graphiti_response.episode.uuid=="string")return this.logger.debug(`Extracted mm_uid from Python stdout graphiti_response: ${c.graphiti_response.episode.uuid}`),c.graphiti_response.episode.uuid}}catch{continue}}return this.logger.warn("Could not extract mm_uid from sync result",{result:e}),null}catch(o){return this.logger.error("Error extracting mm_uid from sync result",{error:o,result:e}),null}}isNotePrivate(e){var t;try{if(this.settings.excludedFolders.some(r=>e.path.startsWith(r.endsWith("/")?r:r+"/")))return this.logger.debug("Note is in excluded folder",{file:e.path,excludedFolders:this.settings.excludedFolders}),!0;if(this.settings.includedFolders.length>0&&!this.settings.includedFolders.some(o=>e.path.startsWith(o.endsWith("/")?o:o+"/")))return this.logger.debug("Note is not in included folders",{file:e.path,includedFolders:this.settings.includedFolders}),!0;const s=this.app.metadataCache.getFileCache(e);return((t=s==null?void 0:s.frontmatter)==null?void 0:t.private)===!0?(this.logger.debug("Note marked as private in frontmatter",{file:e.path}),!0):!1}catch(i){return this.logger.error("Error checking if note is private",{file:e.path,error:i}),!1}}getCurrentDatabaseType(){return this.settings.databaseType||"neo4j"}async syncNote(e,t="obsidian_mm_individual"){this.logger.debug("[SYNC-DIAGNOSIS] SyncStatusManager.syncNote() called - this path INCLUDES registry recording");const i=e.path;try{if(this.activeSyncs.has(i))throw new Error("Note is already being synced");if(this.isNotePrivate(e))throw new Error("Cannot sync private note");this.logger.info(`Starting sync for file: ${i}`),this.activeSyncs.set(i,!0);const r=this.app.vault.adapter.basePath,o=this.normalizeNotePath(i,r);this.logger.debug("[SYNC-DIAGNOSIS] Initiating individual note sync",{file:o,vaultPath:r});const a=await this.graphitiService.testManualSync(o,t);if(a.status==="success"){const l=this.extractMmUidFromSyncResult(a);l||this.logger.warn("Sync completed but no mm_uid extracted from result",{file:i,result:a}),await this.updateNoteProperties(e,a,t,l||void 0),this.settings.showNotifications&&new C.Notice(`[SUCCESS] ${e.name} synced successfully`)}else{const l=await Yt(this.app,e),c=this.app.vault.getName(),p=this.getCurrentDatabaseType(),g=a.message||"Sync failed";try{l?await this.syncRegistryService.addOrUpdateSyncRecord({mmUid:l,notePath:e.path,vaultId:c,syncEntry:{database_id:p,group_id:await this.syncRegistryService.generateGroupId(e.path,c),episode_uuid:l,last_sync:new Date().toISOString(),source_description:t,error_message:g}}):await this.syncRegistryService.addOrUpdateSyncRecord({mmUid:`error-${Date.now()}`,notePath:e.path,vaultId:c,syncEntry:{database_id:p,group_id:await this.syncRegistryService.generateGroupId(e.path,c),episode_uuid:`error-${Date.now()}`,last_sync:new Date().toISOString(),source_description:t,error_message:g}})}catch(h){this.logger.error("Failed to record sync error in registry",{error:h,file:i,mmUid:l||"none"})}this.settings.showNotifications&&new C.Notice(`[ERROR] Failed to sync ${e.name}: ${g}`),this.logger.error(`Note sync failed for ${i}: ${a.message||"Unknown error"}`,{mmUid:l||"none"})}return a}catch(s){const r=s instanceof Error?s.message:String(s);return this.settings.showNotifications&&new C.Notice(`[ERROR] Sync error for ${e.name}: ${r}`),this.logger.error("Note sync error",{file:i,error:s}),{status:"error",processed:0,skipped:0,total:1,batchCount:0,nodeTypesLoaded:0,edgeTypesLoaded:0,message:r}}finally{this.activeSyncs.has(i)&&(this.activeSyncs.delete(i),this.logger.debug("[RACE-FIX] Cleaned up activeSyncs in finally block (error case)",{file:i}))}}async updateNoteProperties(e,t,i="obsidian_manual",s){const r=e.path;try{const o=await Yt(this.app,e),a=s||this.extractMmUidFromSyncResult(t);if(!a){this.logger.warn("No mm_uid found in sync result for note properties update",{file:e.path,result:t});return}this.activeSyncs.delete(r);const l=this.app.vault.getName(),c=this.getCurrentDatabaseType(),p=new Date().toISOString();o?(this.logger.debug(`Note already has mm_uid in frontmatter: ${o}, preserving original`),await this.syncRegistryService.addOrUpdateSyncRecord({mmUid:o,notePath:e.path,vaultId:l,syncEntry:{database_id:c,group_id:await this.syncRegistryService.generateGroupId(e.path,l),episode_uuid:a,last_sync:p,source_description:i}}),this.logger.info(`Updated existing sync record for ${e.path} with preserved mm_uid: ${o}`)):(await tc(this.app,e,a),this.logger.debug(`Written mm_uid to frontmatter: ${e.path} -> ${a}`),await this.syncRegistryService.addOrUpdateSyncRecord({mmUid:a,notePath:e.path,vaultId:l,syncEntry:{database_id:c,group_id:await this.syncRegistryService.generateGroupId(e.path,l),episode_uuid:a,last_sync:p,source_description:i}}),this.logger.info(`Created new sync record and frontmatter for ${e.path} with mm_uid: ${a}`))}catch(o){throw this.logger.error(`Failed to update note properties for ${e.path}`,{error:o,mmUid:s||this.extractMmUidFromSyncResult(t)||"none"}),o}}generateEpisodeId(e){if(e.episode_uuid)return this.logger.debug("Generated Episode ID: Top-level episode_uuid found.",{episodeId:e.episode_uuid}),e.episode_uuid;if(e.notes&&Array.isArray(e.notes))for(const r of e.notes){if(r.episode_uuid)return this.logger.debug("Extracted episode UUID from result.notes",{episodeId:r.episode_uuid}),r.episode_uuid;if(r.graphiti_response&&r.graphiti_response.episode&&r.graphiti_response.episode.uuid)return this.logger.debug("Extracted episode UUID from graphiti_response.episode.uuid",{episodeId:r.graphiti_response.episode.uuid}),r.graphiti_response.episode.uuid}if(e.pythonStdout)try{const r=e.pythonStdout.split(`
`);for(const o of r)if(o.trim())try{const a=JSON.parse(o);if(a.notes&&Array.isArray(a.notes))for(const l of a.notes){if(l.episode_uuid)return this.logger.debug("Generated Episode ID: Extracted from Python stdout notes array.",{episodeId:l.episode_uuid}),l.episode_uuid;if(l.graphiti_response&&l.graphiti_response.episode&&l.graphiti_response.episode.uuid)return this.logger.debug("Generated Episode ID: Extracted from Python stdout graphiti_response.episode.uuid in notes array.",{episodeId:l.graphiti_response.episode.uuid}),l.graphiti_response.episode.uuid}if(a.episode_uuid||a.episodeId){const l=a.episode_uuid||a.episodeId;return this.logger.debug("Generated Episode ID: Extracted from Python stdout top-level.",{episodeId:l}),l}}catch{this.logger.debug("generateEpisodeId: Could not parse Python stdout line as JSON (skipping)",{line:o});continue}}catch(r){this.logger.debug("generateEpisodeId: Could not parse episode UUID from Python stdout (overall error).",{error:r})}const t=Date.now(),i=Math.random().toString(36).substring(2,8),s=`episode-${t}-${i}`;return this.logger.warn("Generated Episode ID: Fallback ID generated (UUID not found in result).",{fallbackId:s,originalResult:e}),s}updateFrontmatter(e,t){const i=e.split(`
`);if(i[0]==="---"){let r=-1;for(let o=1;o<i.length;o++)if(i[o]==="---"){r=o;break}if(r!==-1){const o=i.slice(r+1).join(`
`);return`---
${this.serializeFrontmatter(t)}---
${o}`}}return`---
${this.serializeFrontmatter(t)}---
${bodyContent}`}serializeFrontmatter(e){let t="";for(const[i,s]of Object.entries(e))typeof s=="string"?t+=`${i}: "${s}"
`:t+=`${i}: ${s}
`;return t}getActiveSync(e){return this.activeSyncs.has(e)}getActiveSyncs(){return Array.from(this.activeSyncs.keys())}normalizeNotePath(e,t=null){let i=Nt.normalize(e);process.platform==="win32"&&i.startsWith("/")&&(i=i.substring(1)),i=i.replace(/\\/g,"/");const s=this.app.vault.getName();if(i.startsWith(s+"/")&&(i=i.substring(s.length+1)),t){let r=Nt.resolve(t,i);r=r.replace(/\\/g,"/");const o=r.split("/"),a=[],l=new Set;for(const c of o)c!==""&&(l.has(c)?a[a.length-1]!==c&&a.push(c):(a.push(c),l.add(c)));return r=a.join("/"),process.platform!=="win32"&&!r.startsWith("/")?r=`/${r}`:process.platform==="win32"&&/^[a-zA-Z]:\//.test(r),Nt.normalize(r).replace(/\\/g,"/")}return i}destroy(){this.activeSyncs.clear(),this.logger.info("SyncStatusManager destroyed")}}class ic{constructor(e,t,i){this.settings=e,this.app=t,this.logger=i}async resolveFolderForNote(e,t,i){try{if(i){const o=await this.validateAndCreateFolder(i,this.app.vault);return{success:o,folderPath:i,message:o?"Target folder validated":"Failed to validate target folder",created:!1}}const s=this.settings.mcpTools.defaults.inboxFolder||"",r=await this.validateAndCreateFolder(s,this.app.vault);return{success:r,folderPath:s,message:r?"Default folder resolved":"Failed to resolve default folder",created:!1}}catch(s){return this.logger.error("Error resolving folder for note",s),{success:!1,folderPath:"",message:`Error: ${s instanceof Error?s.message:String(s)}`}}}async validateAndCreateFolder(e,t){try{if(!e||e.trim()==="")return this.logger.debug("validateAndCreateFolder: empty folderPath, using vault root"),!0;const i=e.replace(/\\/g,"/").replace(/^\/+|\/+$/g,""),s=t==null?void 0:t.adapter;let r=!1;if(s&&typeof s.exists=="function")try{r=await s.exists(i)}catch(c){this.logger.warn("validateAndCreateFolder: adapter.exists threw, falling back to vault.getAbstractFileByPath",c),r=!1}if(!r)try{r=!!t.getAbstractFileByPath(i)}catch{r=!1}if(r)return this.logger.debug("validateAndCreateFolder: folder exists",{folderPath:i}),!0;const o=i.split("/").filter(Boolean);let a="",l=!1;for(const c of o){a=a?`${a}/${c}`:c;try{let p=!1;s&&typeof s.exists=="function"&&(p=await s.exists(a)),p||(typeof t.createFolder=="function"?(await t.createFolder(a),l=!0,this.logger.info("validateAndCreateFolder: created folder",{path:a})):s&&typeof s.mkdir=="function"?(await s.mkdir(a),l=!0,this.logger.info("validateAndCreateFolder: created folder via adapter.mkdir",{path:a})):this.logger.warn("validateAndCreateFolder: no method to create folder found",{path:a}))}catch(p){return this.logger.error("validateAndCreateFolder: failed to create folder segment",{path:a,error:p}),!1}}return this.logger.debug("validateAndCreateFolder: validation complete",{folderPath:i,created:l}),!0}catch(i){return this.logger.error("validateAndCreateFolder: unexpected error",i),!1}}generatePeriodicNotePath(e,t){const i=e.getFullYear(),s=String(e.getMonth()+1).padStart(2,"0"),r=String(e.getDate()).padStart(2,"0");return`${i}-${s}-${r}.md`}}class Gs{constructor(e,t,i,s,r){this.pythonProcess=null,this.mcpServerProcess=null,this.activeProcesses=new Set,this.isCancelled=!1,this.pathCache=new Map,this.cacheHits=0,this.cacheMisses=0,this.lastCacheLogTime=0,this.plugin=e,this.settings=t,this.schemaService=new vs(e.app),this.logger=new en(e,t.enableDebugLogging),this.noteSelectionService=new Do(e.app,e,this.logger),this.syncRegistryService=i,this.syncStatusManager=s,this.vaultRegistryService=r,this.logger.info("GraphitiService initialized"),this.logger.logSystemInfo()}invalidatePathCache(e){e?(this.pathCache.delete(e),this.logger.debug(`[PATHS] Invalidated cache for vault: ${e}`)):(this.pathCache.clear(),this.logger.debug("[PATHS] Cleared entire path cache"))}updateSettings(e){this.settings=e,this.logger.setDebug(e.enableDebugLogging),this.logger.debug("Settings updated in GraphitiService",{debugMode:e.enableDebugLogging})}getCurrentEmbeddingDimensions(){return this.settings.embedderProvider==="ollama"?String(this.settings.ollamaEmbeddingDim||768):"1536"}async initialize(){this.vaultRegistryService.onActiveVaultChange(t=>{t?this.invalidatePathCache(t):this.invalidatePathCache(),this.getVaultAwarePaths(t)}),this.vaultRegistryService.onRegistryUpdate(()=>{this.invalidatePathCache()});const e=this.vaultRegistryService.getActiveVaultId();e?this.getVaultAwarePaths(e):this.getVaultAwarePaths(null),this.initializeMCPToolsServices()}initializeMCPToolsServices(){this.mcpFolderResolver=new ic(this.settings,this.plugin.app,this.logger),this.logger.debug("MCP tools services initialized")}async resolveMCPNoteFolder(e,t,i){return this.mcpFolderResolver||this.initializeMCPToolsServices(),await this.mcpFolderResolver.resolveFolderForNote(e,t,i)}async syncNotesWithSettings(e,t,i="obsidian_mm_individual"){try{let s;if(e?s=e:this.settings.syncOptions==="new_only"?s=(await this.noteSelectionService.getNotesForAutoSync()).map(l=>l.path):s=(await this.noteSelectionService.getFilteredSyncableNotes()).map(l=>l.path),s.length===0)return{status:"error",processed:0,skipped:0,total:0,batchCount:0,nodeTypesLoaded:0,edgeTypesLoaded:0,message:"No notes available for sync after applying settings filters"};const r={notesPaths:s,batchSize:this.settings.batchSize||10,debug:this.settings.enableDebugLogging,source_description:i,crossEncoderClient:this.settings.crossEncoderClient,crossEncoderModel:this.settings.crossEncoderModel,use_custom_ontology:this.settings.useCustomOntology};this.logger.info("Starting settings-based sync",{totalNotes:s.length,batchSize:r.batchSize,includedFolders:this.settings.includedFolders,excludedFolders:this.settings.excludedFolders});const o=await this.syncNotes(r,t,i);return this.logger.debug(`SYNC_COMPLETE: syncNotesWithSettings() finished - status: ${o.status}, processed: ${o.processed}, skipped: ${o.skipped}, total: ${o.total}, batches: ${o.batchCount}`),o}catch(s){return this.logger.error("Settings-based sync failed",s),{status:"error",processed:0,skipped:0,total:0,batchCount:0,nodeTypesLoaded:0,edgeTypesLoaded:0,message:s instanceof Error?s.message:String(s)}}}async autoSync(e){if(!this.settings.autoSync&&e!=="manual")return{status:"error",processed:0,skipped:0,total:0,batchCount:0,nodeTypesLoaded:0,edgeTypesLoaded:0,message:"Auto-sync is disabled in settings"};let t;e==="manual"?t="obsidian_mm_individual":this.settings.syncOptions==="new_only"?t="obsidian_auto_new":t="obsidian_auto_updated",this.logger.debug("Enhanced auto-sync triggered",{triggerType:e,source_description:t,autoSyncEnabled:this.settings.autoSync,syncOptions:this.settings.syncOptions,syncInterval:this.settings.syncInterval});const i=await this.noteSelectionService.getNotesForAutoSync(this.settings.syncOptions);if(i.length===0)return this.logger.debug("No notes found for auto-sync based on current sync options",{syncOptions:this.settings.syncOptions,triggerType:e,source_description:t}),{status:"success",processed:0,skipped:0,total:0,batchCount:0,nodeTypesLoaded:0,edgeTypesLoaded:0,message:"No notes to sync based on current sync options"};const s=i.map(r=>r.path);return this.logger.debug("Auto-sync processing notes",{triggerType:e,source_description:t,totalNotes:s.length,syncOptions:this.settings.syncOptions,notesSample:s.slice(0,3)}),await this.noteSelectionService.selectNotes(s),this.logger.debug("Auto-sync selected notes into queue for sequential processing",{selectedCount:s.length}),await this.syncSelectedNotes(r=>{this.logger.debug("Enhanced auto-sync progress",{triggerType:e,source_description:t,syncOptions:this.settings.syncOptions,progress:r})},t)}async testConnection(){try{const e=await this.executePythonCommand(["-c",'import sys; import graphiti_core; print(f"Python {sys.version_info.major}.{sys.version_info.minor}, Graphiti installed")']);return e.success&&e.output?{success:!0,message:`✅ Connection successful: ${e.output.trim()}`}:{success:!1,message:`❌ Connection failed: ${e.error||"Unknown error"}`}}catch(e){return{success:!1,message:`❌ Connection test failed: ${e instanceof Error?e.message:String(e)}`}}}async installDependencies(e){return new Promise(t=>{var i,s;try{this.logger.info("Starting dependency installation process");const{pluginDir:r,bridgeDir:o}=this.getVaultAwarePaths(),a=Me.join(o,"install.py");if(this.logger.debug("Installation paths:",{pluginDir:r,bridgePath:o,installPath:a}),!require("fs").existsSync(a)){const w=`Install script not found at: ${a}`;this.logger.error(w),t({success:!1,message:`❌ ${w}`});return}e==null||e("Starting Python dependency installation..."),this.logger.info("Executing Python install script");const c="python",p=[a,"--llm-provider",this.settings.llmProvider,"--embedder-provider",this.settings.embedderProvider];this.logger.debug("Command:",{command:c,args:p});const{spawn:g}=require("child_process"),h=g(c,p,{stdio:["pipe","pipe","pipe"],cwd:o});let m="",d="",f=Date.now();(i=h.stdout)==null||i.on("data",w=>{const S=w.toString();m+=S,this.logger.logPythonOutput("stdout",S);const x=S.split(`
`);for(const E of x)if(E.trim()){const D=Date.now();D-f>100&&(E.includes("Installing")?e==null||e(`Installing: ${E.trim()}`):E.includes("Downloading")?e==null||e(`Downloading: ${E.trim()}`):E.includes("Collecting")?e==null||e(`Collecting: ${E.trim()}`):E.includes("Building")?e==null||e(`Building: ${E.trim()}`):E.includes("Successfully")?e==null||e(`✅ ${E.trim()}`):E.includes("Requirement already satisfied")?e==null||e(`✓ ${E.trim()}`):E.trim().length>0&&(e==null||e(`📦 ${E.trim()}`)),f=D)}}),(s=h.stderr)==null||s.on("data",w=>{const S=w.toString();d+=S,this.logger.logPythonOutput("stderr",S),S.includes("%")||S.includes("Downloading")||S.includes("Installing")?e==null||e(`📥 ${S.trim()}`):(S.includes("ERROR")||S.includes("error"))&&(this.logger.error("Python error output:",S),e==null||e(`❌ Error: ${S.trim()}`))}),h.on("close",w=>{if(this.logger.debug("Process closed",{exitCode:w}),w===0)e==null||e("✅ Installation completed successfully!"),this.logger.info("Installation completed successfully"),t({success:!0,message:"✅ Dependencies installed successfully"});else{const S=`Installation failed with code ${w}`;this.logger.error(S,{exitCode:w,stderr:d,stdout:m}),t({success:!1,message:`❌ ${S}: ${d||m||"Unknown error"}`})}}),h.on("error",w=>{this.logger.error("Failed to start Python process",w);let S=w.message;w.message.includes("ENOENT")&&(S="Python not found. Please ensure Python 3.10+ is installed and in your PATH."),t({success:!1,message:`❌ Failed to start installation: ${S}`})});const v=setTimeout(()=>{h.killed||(this.logger.error("Installation timeout - killing process"),h.kill(),t({success:!1,message:"❌ Installation timed out after 10 minutes"}))},6e5);h.on("exit",()=>{clearTimeout(v)})}catch(r){this.logger.error("Installation exception",r),t({success:!1,message:`❌ Installation error: ${r instanceof Error?r.message:String(r)}`})}})}async syncNotes(e,t,i){try{this.logger.debug("SYNC_START: syncNotes() called",{notesCount:e.notesPaths.length,batchSize:e.batchSize,debugMode:e.debug,notesSample:e.notesPaths.slice(0,3),fullNotesPathsCount:e.notesPaths.length});try{const l=this.settings.embeddingModel,c=this.getCurrentEmbeddingDimensions();if(await this.vaultRegistryService.hasEmbeddingModelChanged(l,c)){const g=await this.vaultRegistryService.getEmbeddingModelMismatchDetails(l,c);this.logger.warn("[SYNC] Embedding model change detected before sync",{currentModel:l,currentDimensions:c,storedModel:g==null?void 0:g.storedModel,storedDimensions:g==null?void 0:g.storedDimensions})}}catch(l){this.logger.debug("[SYNC] Embedding model validation error (continuing)",l)}const s=this.validateSyncConfig(e);if(!s.isValid)throw new Error(`Configuration error: ${s.errors.join(", ")}`);const{vaultPath:r}=this.getVaultAwarePaths();this.settings.useCustomOntology?t==null||t({current:5,total:100,message:"Preparing dynamic custom ontology sync...",percentage:5}):t==null||t({current:5,total:100,message:"Using generic episode sync (custom ontology disabled)...",percentage:5});const o=await this.prepareSyncConfig(e,r,i),a=await this.executePythonSync(o,t);return this.logger.debug(`SYNC_COMPLETE: syncNotes() finished - status: ${a.status}, processed: ${a.processed}, skipped: ${a.skipped}, total: ${a.total}, batches: ${a.batchCount}`),a}catch(s){return{status:"error",processed:0,skipped:0,total:e.notesPaths.length,batchCount:0,nodeTypesLoaded:0,edgeTypesLoaded:0,message:s instanceof Error?s.message:String(s)}}}getNoteSelectionService(){return this.noteSelectionService}async syncNotesSequentially(e,t="obsidian_mm_individual"){this.logger.debug("Starting sequential sync"),this.isCancelled=!1;const i=this.noteSelectionService.getSelectedNotePaths();if(!i||i.length===0)return this.logger.warn("No notes found in selection"),{status:"error",processed:0,skipped:0,total:0,batchCount:0,nodeTypesLoaded:0,edgeTypesLoaded:0,message:"No notes selected for sync"};this.logger.debug(`Processing ${i.length} notes sequentially`);let s=0,r=0;const o=[],a=[],{vaultPath:l}=this.getVaultAwarePaths();for(let h=0;h<i.length;h++){if(this.isCancelled)return this.logger.info("[CANCEL] Sequential sync cancelled by user"),{status:"error",processed:s,skipped:r+(i.length-h),total:i.length,batchCount:0,nodeTypesLoaded:0,edgeTypesLoaded:0,message:"Sync cancelled by user"};const m=i[h];e==null||e({current:h,total:i.length,message:`Processing note ${h+1}/${i.length}: ${m}`,percentage:h/i.length*100});try{this.logger.debug(`Processing note ${h+1}/${i.length}: ${m}`);const f=require("path").join(l,m),v=this.plugin.app.vault.getAbstractFileByPath(m);if(!v||!(v instanceof C.TFile)){this.logger.error(`Could not find TFile for path: ${m}`),r++;continue}const w=await this.syncStatusManager.syncNote(v,t);o.push(w),w.status==="success"?(s++,this.logger.info(`Successfully synced note: ${m}`),this.noteSelectionService.deselectNotes([m])):(r++,this.logger.warn(`Failed to sync note: ${m}. Status: ${w.status}, Message: ${w.message}`),w.message&&a.push(`Note '${m}': ${w.message}`))}catch(d){r++;const f=d instanceof Error?d.message:String(d);a.push(`Note '${m}': ${f}`),this.logger.error(`Error syncing note ${m}`,d)}e==null||e({current:h+1,total:i.length,message:`Completed ${m}`,percentage:(h+1)/i.length*100})}const c=s>0?"success":"error",p={status:c,processed:s,skipped:r,total:i.length,batchCount:i.length,nodeTypesLoaded:0,edgeTypesLoaded:0,notes:o,errors:a,hasErrors:a.length>0,message:`Sequential sync completed. Processed: ${s}, Skipped: ${r}.`},g=o.slice(0,5).map(h=>{const m=(h==null?void 0:h.note_path)??(h==null?void 0:h.path)??"",d=(h==null?void 0:h.status)??"unknown",f=(h==null?void 0:h.episode_uuid)??(h==null?void 0:h.episode_id)??"";return{note:m,status:d,episode_uuid:f}});return this.logger.debug("Sequential auto-sync completed",{finalStatus:c,processed:s,skipped:r,total:i.length,notesSample:g}),p}async syncSelectedNotes(e,t="obsidian_mm_quicksync"){this.logger.debug("SYNC_START: syncSelectedNotes() called",{selectedPaths:this.noteSelectionService.getSelectedNotePaths()});const i=this.noteSelectionService.getSelectedNotePaths(),s=await this.noteSelectionService.validateSelection();if(!s.isValid)return{status:"error",processed:0,skipped:i.length,total:i.length,batchCount:0,nodeTypesLoaded:0,edgeTypesLoaded:0,message:`Selection validation failed: ${s.errors.join(", ")}`};const r=await this.syncNotesSequentially(e,t);return this.logger.debug(`SYNC_COMPLETE: syncSelectedNotes() finished - status: ${r.status}, processed: ${r.processed}, skipped: ${r.skipped}, total: ${r.total}`),r}async quickSync(e,t){try{return await this.noteSelectionService.selectAllMatching(e)===0?{status:"error",processed:0,skipped:0,total:0,batchCount:0,nodeTypesLoaded:0,edgeTypesLoaded:0,message:"No notes matched the filter criteria"}:this.syncSelectedNotes(t)}catch(i){return{status:"error",processed:0,skipped:0,total:0,batchCount:0,nodeTypesLoaded:0,edgeTypesLoaded:0,message:i instanceof Error?i.message:String(i)}}}async getSyncStatistics(){const[e,t,i,s]=await Promise.all([this.noteSelectionService.getSelectionSummary(),this.noteSelectionService.validateSelection(),this.noteSelectionService.getAvailableTypes(),this.noteSelectionService.getAvailableTags()]);return{summary:e,validation:t,availableTypes:i,availableTags:s}}cancelSync(){this.logger.info("[CANCEL] Cancelling sync operation - killing all Python processes"),this.isCancelled=!0,this.activeProcesses.forEach(e=>{e.killed||(this.logger.debug("[CANCEL] Killing tracked Python process",{pid:e.pid}),e.kill("SIGTERM"))}),this.activeProcesses.clear(),this.pythonProcess&&(this.logger.debug("[CANCEL] Killing main Python process",{pid:this.pythonProcess.pid}),this.pythonProcess.kill("SIGTERM"),this.pythonProcess=null)}getPluginDirectory(){return this.getVaultAwarePaths().pluginDir}findDuplicatePathSegments(e){const t=Math.floor(e.length/2);if(t>0){let i=!0;for(let s=0;s<t;s++)if(e[s]!==e[s+t]){i=!1;break}if(i)return t}for(let i=1;i<e.length;i++)for(let s=i+1;s<e.length;s++)if(e[i]===e[s]){let r=1;for(;i+r<s&&s+r<e.length&&e[i+r]===e[s+r];)r++;if(r>=2&&s+r>=e.length)return s}return-1}getVaultPathFallback(){const e=this.getVaultAwarePaths(null);return this.logger.debug("Vault Path Fallback Resolution",{vaultPath:e.vaultPath,pluginDir:e.pluginDir,resolvedAt:e.resolvedAt}),e.vaultPath}getVaultAwarePaths(e){const t=Bt.performance.now(),i=e||this.vaultRegistryService.getActiveVaultId()||"default";if(this.pathCache.has(i)){const o=this.pathCache.get(i);return this.cacheHits++,(Bt.performance.now()-t).toFixed(2),this.logCacheMetrics(i),o}this.cacheMisses++;const s=this.resolvePathsForVault(i);this.pathCache.set(i,s);const r=(Bt.performance.now()-t).toFixed(2);return this.logger.debug(`[CACHE_MISS] Vault: ${i}, Time: ${r}ms. Paths resolved.`),this.logCacheMetrics(i),s}resolvePathsForVault(e){const t=require("fs"),i=require("path");if(!e)throw this.logger.error("[PATHS] Invalid vault ID provided for path resolution"),new Error("Cannot resolve paths: Invalid vault ID");const s=this.vaultRegistryService.getVault(e);let r;s!=null&&s.path?(r=s.path,this.logger.debug("[PATHS] Vault path resolved from registry/fallback for vault ID: "+e+".")):(r=this.plugin.app.vault.adapter.basePath,this.logger.warn("[PATHS] Using internal adapter.basePath as fallback for vault path. Vault not found in registry.",{vaultId:e,path:r}));let o=i.normalize(r);const a=o.split(i.sep),l=this.findDuplicatePathSegments(a);l!==-1&&(o=a.slice(0,l).join(i.sep),this.logger.warn("🔧 Fixed duplicated vault path during resolution",{original:r,normalized:o,fixed:o,duplicateStartIndex:l}));let c=null,p=null;const g=this.plugin.manifest.id||"megamem-mcp",h=Me.join(o,".obsidian","plugins",g),m=Me.join(h,"graphiti_bridge");if(t.existsSync(m)&&(c=h,p=m),!c){const f=i.resolve(o,".."),v=Me.join(f,"graphiti_bridge");t.existsSync(v)&&(c=f,p=v)}if(!c){const f=Me.join(o,"graphiti_bridge");t.existsSync(f)&&(c=o,p=f)}if(!c){const f=this.plugin.manifest.dir||"";if(f){const v=f,w=Me.join(v,"graphiti_bridge");t.existsSync(w)&&(c=v,p=w)}}if(!c||!p){const f=`❌ Critical path resolution failure for vault ID "${e}". Could not locate required plugin or bridge directories.`;throw this.logger.error(f,{vaultPath:o,pluginManifestDir:this.plugin.manifest.dir,pluginId:g,activeVaultDetails:s}),new Error(f)}return t.existsSync(o)||this.logger.warn("[PATHS] Vault path does not exist resolved during final check",{vaultPath:o}),t.existsSync(c)||this.logger.warn("[PATHS] Plugin directory does not exist resolved during final check",{pluginDir:c}),t.existsSync(p)||this.logger.warn("[PATHS] Bridge directory does not exist resolved during final check",{bridgeDir:p}),{pluginDir:c,vaultPath:o,bridgeDir:p,resolvedAt:new Date().toISOString()}}sanitizeConfigForLogging(e){const t={...e};return t.llm_api_key&&(t.llm_api_key="***"),t.embedder_api_key&&(t.embedder_api_key="***"),t.api_keys&&(t.api_keys=Object.keys(t.api_keys).reduce((i,s)=>(i[s]=t.api_keys[s]?"***":null,i),{})),t.database_password&&(t.database_password="***"),t}getApiKeyForProvider(e){switch(e){case"openai":return this.settings.apiKeys.openai;case"anthropic":return this.settings.apiKeys.anthropic;case"google":return this.settings.apiKeys.google;case"azure":return this.settings.apiKeys.azure;case"groq":return this.settings.apiKeys.groq;case"voyage":return this.settings.apiKeys.voyage;case"venice":return this.settings.apiKeys.venice;case"openrouter":return this.settings.apiKeys.openrouter;case"ollama":return"not-required";default:return}}getDatabaseConfig(){return this.settings.databaseType==="neo4j"?this.settings.databaseConfigs.neo4j:this.settings.databaseType==="falkordb"?this.settings.databaseConfigs.falkordb:null}prepareDatabaseConfig(){const e=this.getDatabaseConfig();if(!e)throw new Error(`No database configuration found for type: ${this.settings.databaseType}`);if(this.settings.databaseType==="neo4j")return{database_url:e.uri,database_username:e.username,database_password:e.password,database_name:e.database};if(this.settings.databaseType==="falkordb")return{database_url:`redis://${e.host}:${e.port}`,database_username:e.username||null,database_password:e.password||null,database_name:e.database};throw new Error(`Unsupported database type: ${this.settings.databaseType}`)}validateSyncConfig(e){const t=[];(!e.notesPaths||e.notesPaths.length===0)&&t.push("No notes selected for sync"),e.batchSize<=0&&t.push("Batch size must be greater than 0"),this.settings.llmProvider||t.push("LLM provider not configured"),this.getApiKeyForProvider(this.settings.llmProvider)||t.push(`API key not configured for LLM provider: ${this.settings.llmProvider}`),this.settings.embedderProvider||t.push("Embedder provider not configured");const s=this.getDatabaseConfig();return s?this.settings.databaseType==="neo4j"?s.uri||t.push("Neo4j URI not configured"):this.settings.databaseType==="falkordb"&&(s.host||t.push("FalkorDB host not configured"),s.port||t.push("FalkorDB port not configured")):t.push(`Database configuration not found for type: ${this.settings.databaseType}`),{isValid:t.length===0,errors:t}}async prepareSyncConfig(e,t,i){const s=t||this.getVaultPathFallback(),r=this.plugin.settings,o=[];for(const l of e.notesPaths)try{const c=this.plugin.app.vault.getName();let p=this.syncStatusManager.normalizeNotePath(l,s);Nt.isAbsolute(p)&&s?p=Nt.relative(s,p).replace(/\\/g,"/"):p=p.replace(/\\/g,"/");const g=this.plugin.app.vault.getAbstractFileByPath(p);if(g&&g instanceof C.TFile){const h=await Yt(this.plugin.app,g);if(h){o.push(h),this.logger.debug("Retrieved previous episode UUID from frontmatter",{notePath:l,vaultRelativePath:p,mmUid:h});continue}}this.logger.debug("No previous episode UUID found - new note will get fresh episode",{notePath:l,vaultRelativePath:p})}catch(c){this.logger.debug("Error retrieving episode UUID for note",{notePath:l,error:c})}const a={llm_provider:r.llmProvider,llm_api_key:this.getApiKeyForProvider(r.llmProvider),llm_model:r.llmModel,llm_small_model:r.llmSmallModel,azure_endpoint:r.azureEndpoint,azure_api_version:r.azureApiVersion,ollama_base_url:r.ollamaBaseUrl,openrouter_preset_slug:r.openrouterPresetSlug,openrouter_use_preset_with_custom_model:r.openrouterUsePresetWithCustomModel,embedder_provider:r.embedderProvider,embedder_api_key:this.getApiKeyForProvider(r.embedderProvider),embedding_model:r.embeddingModel,api_keys:r.apiKeys,database_type:r.databaseType,...this.prepareDatabaseConfig(),use_custom_ontology:r.useCustomOntology,default_namespace:r.defaultNamespace,enable_folder_namespacing:r.enableFolderNamespacing,enable_property_namespacing:r.enablePropertyNamespacing,namespace_strategy:r.namespaceStrategy,folder_namespace_mappings:r.folderNamespaceMappings,notes:e.notesPaths,batch_size:e.batchSize,debug:r.enableDebugLogging,vault_path:s,source_description:i||e.source_description||"obsidian_mm_individual",cross_encoder_client:e.crossEncoderClient||r.crossEncoderClient||"none",cross_encoder_model:r.crossEncoderClient==="bge"||r.crossEncoderClient==="none"?void 0:e.crossEncoderModel||r.crossEncoderModel,previous_episode_uuids:o};return this.logger.info(`Sync configuration prepared: Total notes: ${e.notesPaths.length}, Previous episodes: ${o.length}, First time sync: ${e.notesPaths.length-o.length}`),a}async executePythonSync(e,t){if(this.settings.experimentalDaemonMode&&this.plugin.pythonDaemonBridge)return this.logger.info("Using daemon mode for sync"),await this.executeDaemonSync(e,t);this.logger.info("Using traditional sync mode");const{bridgeDir:i}=this.getVaultAwarePaths(),s=Me.join(i,"sync.py");let r=[];Array.isArray(e.notes)&&e.notes.length>0?r=e.notes:Array.isArray(e.notesPaths)&&e.notesPaths.length>0?r=e.notesPaths:typeof e.notes=="string"&&(r=[e.notes]);const o=d=>new Promise(f=>{var v,w,S,x;try{const{pluginDir:E}=this.getVaultAwarePaths();this.pythonProcess=at.spawn("python",[s,"--vault-path",d.vault_path,"--plugin-data-path",E],{cwd:i,stdio:["pipe","pipe","pipe"]}),this.activeProcesses.add(this.pythonProcess),(v=this.pythonProcess.stdin)==null||v.write(JSON.stringify(d)),(w=this.pythonProcess.stdin)==null||w.end();let D="",M="";(S=this.pythonProcess.stdout)==null||S.on("data",N=>{const P=N.toString();D+=P,this.settings.enableDebugLogging&&this.logger.logPythonOutput("stdout",P)}),(x=this.pythonProcess.stderr)==null||x.on("data",N=>{const P=N.toString();M+=P,this.logger.logPythonOutput("stderr",P)}),this.pythonProcess.on("close",N=>{if(this.activeProcesses.delete(this.pythonProcess),this.pythonProcess=null,N===0)try{const P=JSON.parse(D.trim());if(P._diagnostics&&Array.isArray(P._diagnostics))for(const I of P._diagnostics)this.logger.info(`[PYTHON-DIAGNOSTICS] ${I}`);f({success:!0,result:P,stdout:D,stderr:M,exitCode:N})}catch(P){f({success:!1,stdout:D,stderr:M||String(P),exitCode:N})}else f({success:!1,stdout:D,stderr:M,exitCode:N})}),this.pythonProcess.on("error",N=>{this.pythonProcess&&this.activeProcesses.delete(this.pythonProcess),this.pythonProcess=null,f({success:!1,stdout:void 0,stderr:N.message,exitCode:-1})})}catch(E){this.pythonProcess=null,f({success:!1,stdout:void 0,stderr:E instanceof Error?E.message:String(E),exitCode:-1})}});if(r.length<=1){const d=r.length===1?r[0]:Array.isArray(e.notes)&&e.notes.length>0?e.notes[0]:void 0;let f;if(d)try{f=await this.syncRegistryService.generateGroupId(d,this.plugin.app.vault.getName())}catch{}const v={...e,...f?{group_id:f}:{},notes:r.length===1?r:e.notes},w=await o(v);if(w.success&&w.result){if(w.result.status==="rate_limited"){const S=w.result.retry_after||60,x=w.result.reset_time,E=w.result.provider_message||"API rate limit exceeded";let D="Rate limit exceeded - sync paused";if(x){const M=new Date(x);D+=` until ${M.toLocaleString()}`}else D+=` for ${Math.round(S/60)} minutes`;return this.logger.warn("Rate limit detected in single sync - pausing",{retryAfter:S,resetTime:x,providerMessage:E,pauseMessage:D}),{status:"error",processed:0,skipped:1,total:1,batchCount:0,nodeTypesLoaded:0,edgeTypesLoaded:0,message:D}}return w.result}else{const S=`Python sync failed${w.exitCode!==void 0?` with exit code ${w.exitCode}`:""}: ${w.stderr||w.stdout||"Unknown error"}`,x=w.stderr?w.stderr.split(`
`)[0]:"Unknown error";return this.logger.error("Python sync process failed",{exitCode:w.exitCode,stderr:x,stderrLength:w.stderr?w.stderr.length:0}),{status:"error",processed:0,skipped:r.length||1,total:r.length||1,batchCount:0,nodeTypesLoaded:0,edgeTypesLoaded:0,message:S}}}let a=0,l=0,c=0,p=0;const g=[],h=[];for(let d=0;d<r.length;d++){if(this.isCancelled)return this.logger.info("[CANCEL] Sequential sync cancelled by user"),{status:"error",processed:a,skipped:l+(r.length-d),total:r.length,batchCount:r.length,nodeTypesLoaded:c,edgeTypesLoaded:p,errors:[...g,"Sync cancelled by user"],hasErrors:!0,notes:h};const f=r[d];t==null||t({current:d,total:r.length,message:`Processing note ${d+1}/${r.length}: ${f}`,percentage:d/r.length*100});let v;try{v=await this.syncRegistryService.generateGroupId(f,this.plugin.app.vault.getName())}catch{}const w={...e,...v?{group_id:v}:{},notes:[f],batch_size:1,notesPaths:[f]},S=await o(w);if(S.success&&S.result){const x=S.result;if(x.status==="rate_limited"){l++;const E=x.retry_after||60,D=x.reset_time,M=x.provider_message||"API rate limit exceeded";let N="Rate limit exceeded - sync paused";if(D){const I=new Date(D);N+=` until ${I.toLocaleString()}`}else N+=` for ${Math.round(E/60)} minutes`;g.push(`Note ${f}: ${N}`),this.logger.warn("Rate limit detected - sync pausing",{note:f,retryAfter:E,resetTime:D,providerMessage:M,pauseMessage:N}),t==null||t({current:d,total:r.length,message:N,percentage:d/r.length*100}),h.push(x);const P=E>300?3e4:Math.min(E*1e3,1e4);await new Promise(I=>setTimeout(I,P)),t==null||t({current:d,total:r.length,message:"Resuming sync after rate limit pause...",percentage:d/r.length*100})}else x.status==="success"?a++:(l++,g.push(`Note ${f}: ${x.message||"failed"}`));typeof x.nodeTypesLoaded=="number"&&(c+=x.nodeTypesLoaded),typeof x.edgeTypesLoaded=="number"&&(p+=x.edgeTypesLoaded),h.push(x)}else{l++;const x=`Python sync failed for note ${f} (exitCode=${S.exitCode}): ${S.stderr||S.stdout||""}`;g.push(x);const E=S.stderr?S.stderr.split(`
`)[0]:"Unknown error";this.logger.error("Python sync failed for note",{note:f,exitCode:S.exitCode,stderr:E,stderrLength:S.stderr?S.stderr.length:0})}t==null||t({current:d+1,total:r.length,message:`Completed ${f}`,percentage:(d+1)/r.length*100}),await new Promise(x=>setTimeout(x,500))}return{status:a>0?"success":"error",processed:a,skipped:l,total:r.length,batchCount:r.length,nodeTypesLoaded:c,edgeTypesLoaded:p,errors:g,hasErrors:g.length>0,notes:h}}async executeDaemonSync(e,t){const i=this.plugin.pythonDaemonBridge;if(!i)return this.logger.error("Daemon bridge not available, falling back to traditional sync"),await this.executeTraditionalSync(e,t);let s=[];Array.isArray(e.notes)&&e.notes.length>0?s=e.notes:Array.isArray(e.notesPaths)&&e.notesPaths.length>0?s=e.notesPaths:typeof e.notes=="string"&&(s=[e.notes]);try{if(s.length<=1){const r=await i.executeDaemonSync(e);return this.parseDaemonSyncResult(r)}else{let r=0,o=0,a=0,l=0;const c=[],p=[];for(let h=0;h<s.length;h++){if(this.isCancelled)return{status:"error",processed:r,skipped:o+(s.length-h),total:s.length,batchCount:s.length,nodeTypesLoaded:a,edgeTypesLoaded:l,errors:[...c,"Sync cancelled by user"],hasErrors:!0,notes:p};const m=s[h];t==null||t({current:h,total:s.length,message:`Processing note ${h+1}/${s.length}: ${m}`,percentage:h/s.length*100});const d={...e,notes:[m],batch_size:1,notesPaths:[m]};try{const f=await i.executeDaemonSync(d),v=this.parseDaemonSyncResult(f);v.status==="success"?r++:(o++,c.push(`Note ${m}: ${v.message||"failed"}`)),typeof v.nodeTypesLoaded=="number"&&(a+=v.nodeTypesLoaded),typeof v.edgeTypesLoaded=="number"&&(l+=v.edgeTypesLoaded),p.push(v)}catch(f){o++;const v=`Daemon sync failed for note ${m}: ${f instanceof Error?f.message:String(f)}`;c.push(v),this.logger.error("Daemon sync failed for note",{note:m,error:f})}t==null||t({current:h+1,total:s.length,message:`Completed ${m}`,percentage:(h+1)/s.length*100}),await new Promise(f=>setTimeout(f,500))}return{status:r>0?"success":"error",processed:r,skipped:o,total:s.length,batchCount:s.length,nodeTypesLoaded:a,edgeTypesLoaded:l,errors:c,hasErrors:c.length>0,notes:p}}}catch(r){return this.logger.error("Daemon sync failed, falling back to traditional sync",r),await this.executeTraditionalSync(e,t)}}parseDaemonSyncResult(e){if(typeof e=="string")try{e=JSON.parse(e)}catch{return{status:"error",processed:0,skipped:1,total:1,batchCount:0,nodeTypesLoaded:0,edgeTypesLoaded:0,message:"Failed to parse daemon result"}}return{status:e.status||"error",processed:e.status==="success"?1:0,skipped:e.status==="success"?0:1,total:1,batchCount:1,nodeTypesLoaded:e.nodeTypesLoaded||0,edgeTypesLoaded:e.edgeTypesLoaded||0,message:e.message,notes:[e]}}async executeTraditionalSync(e,t){const{bridgeDir:i}=this.getVaultAwarePaths(),s=Me.join(i,"sync.py");let r=[];Array.isArray(e.notes)&&e.notes.length>0?r=e.notes:Array.isArray(e.notesPaths)&&e.notesPaths.length>0?r=e.notesPaths:typeof e.notes=="string"&&(r=[e.notes]);const o=d=>new Promise(f=>{var v,w,S,x;try{const{pluginDir:E}=this.getVaultAwarePaths();this.pythonProcess=at.spawn("python",[s,"--vault-path",d.vault_path,"--plugin-data-path",E],{cwd:i,stdio:["pipe","pipe","pipe"]}),this.activeProcesses.add(this.pythonProcess),(v=this.pythonProcess.stdin)==null||v.write(JSON.stringify(d)),(w=this.pythonProcess.stdin)==null||w.end();let D="",M="";(S=this.pythonProcess.stdout)==null||S.on("data",N=>{const P=N.toString();D+=P,this.settings.enableDebugLogging&&this.logger.logPythonOutput("stdout",P)}),(x=this.pythonProcess.stderr)==null||x.on("data",N=>{const P=N.toString();M+=P,this.logger.logPythonOutput("stderr",P)}),this.pythonProcess.on("close",N=>{if(this.activeProcesses.delete(this.pythonProcess),this.pythonProcess=null,N===0)try{const P=JSON.parse(D.trim());if(P._diagnostics&&Array.isArray(P._diagnostics))for(const I of P._diagnostics)this.logger.info(`[PYTHON-DIAGNOSTICS] ${I}`);f({success:!0,result:P,stdout:D,stderr:M,exitCode:N})}catch(P){f({success:!1,stdout:D,stderr:M||String(P),exitCode:N})}else f({success:!1,stdout:D,stderr:M,exitCode:N})}),this.pythonProcess.on("error",N=>{this.pythonProcess&&this.activeProcesses.delete(this.pythonProcess),this.pythonProcess=null,f({success:!1,stdout:void 0,stderr:N.message,exitCode:-1})})}catch(E){this.pythonProcess=null,f({success:!1,stdout:void 0,stderr:E instanceof Error?E.message:String(E),exitCode:-1})}});if(r.length<=1){const d=r.length===1?r[0]:Array.isArray(e.notes)&&e.notes.length>0?e.notes[0]:void 0;let f;if(d)try{f=await this.syncRegistryService.generateGroupId(d,this.plugin.app.vault.getName())}catch{}const v={...e,...f?{group_id:f}:{},notes:r.length===1?r:e.notes},w=await o(v);if(w.success&&w.result){if(w.result.status==="rate_limited"){const S=w.result.retry_after||60,x=w.result.reset_time,E=w.result.provider_message||"API rate limit exceeded";let D="Rate limit exceeded - sync paused";if(x){const M=new Date(x);D+=` until ${M.toLocaleString()}`}else D+=` for ${Math.round(S/60)} minutes`;return this.logger.warn("Rate limit detected in single sync - pausing",{retryAfter:S,resetTime:x,providerMessage:E,pauseMessage:D}),{status:"error",processed:0,skipped:1,total:1,batchCount:0,nodeTypesLoaded:0,edgeTypesLoaded:0,message:D}}return w.result}else{const S=`Python sync failed${w.exitCode!==void 0?` with exit code ${w.exitCode}`:""}: ${w.stderr||w.stdout||"Unknown error"}`,x=w.stderr?w.stderr.split(`
`)[0]:"Unknown error";return this.logger.error("Python sync process failed",{exitCode:w.exitCode,stderr:x,stderrLength:w.stderr?w.stderr.length:0}),{status:"error",processed:0,skipped:r.length||1,total:r.length||1,batchCount:0,nodeTypesLoaded:0,edgeTypesLoaded:0,message:S}}}let a=0,l=0,c=0,p=0;const g=[],h=[];for(let d=0;d<r.length;d++){if(this.isCancelled)return this.logger.info("[CANCEL] Sequential sync cancelled by user"),{status:"error",processed:a,skipped:l+(r.length-d),total:r.length,batchCount:r.length,nodeTypesLoaded:c,edgeTypesLoaded:p,errors:[...g,"Sync cancelled by user"],hasErrors:!0,notes:h};const f=r[d];t==null||t({current:d,total:r.length,message:`Processing note ${d+1}/${r.length}: ${f}`,percentage:d/r.length*100});let v;try{v=await this.syncRegistryService.generateGroupId(f,this.plugin.app.vault.getName())}catch{}const w={...e,...v?{group_id:v}:{},notes:[f],batch_size:1,notesPaths:[f]},S=await o(w);if(S.success&&S.result){const x=S.result;if(x.status==="rate_limited"){l++;const E=x.retry_after||60,D=x.reset_time,M=x.provider_message||"API rate limit exceeded";let N="Rate limit exceeded - sync paused";if(D){const I=new Date(D);N+=` until ${I.toLocaleString()}`}else N+=` for ${Math.round(E/60)} minutes`;g.push(`Note ${f}: ${N}`),this.logger.warn("Rate limit detected - sync pausing",{note:f,retryAfter:E,resetTime:D,providerMessage:M,pauseMessage:N}),t==null||t({current:d,total:r.length,message:N,percentage:d/r.length*100}),h.push(x);const P=E>300?3e4:Math.min(E*1e3,1e4);await new Promise(I=>setTimeout(I,P)),t==null||t({current:d,total:r.length,message:"Resuming sync after rate limit pause...",percentage:d/r.length*100})}else x.status==="success"?a++:(l++,g.push(`Note ${f}: ${x.message||"failed"}`));typeof x.nodeTypesLoaded=="number"&&(c+=x.nodeTypesLoaded),typeof x.edgeTypesLoaded=="number"&&(p+=x.edgeTypesLoaded),h.push(x)}else{l++;const x=`Python sync failed for note ${f} (exitCode=${S.exitCode}): ${S.stderr||S.stdout||""}`;g.push(x);const E=S.stderr?S.stderr.split(`
`)[0]:"Unknown error";this.logger.error("Python sync failed for note",{note:f,exitCode:S.exitCode,stderr:E,stderrLength:S.stderr?S.stderr.length:0})}t==null||t({current:d+1,total:r.length,message:`Completed ${f}`,percentage:(d+1)/r.length*100}),await new Promise(x=>setTimeout(x,500))}return{status:a>0?"success":"error",processed:a,skipped:l,total:r.length,batchCount:r.length,nodeTypesLoaded:c,edgeTypesLoaded:p,errors:g,hasErrors:g.length>0,notes:h}}async executePythonCommand(e){return new Promise(t=>{var o,a;const i=at.spawn("python",e,{stdio:["pipe","pipe","pipe"]});let s="",r="";(o=i.stdout)==null||o.on("data",l=>{s+=l.toString()}),(a=i.stderr)==null||a.on("data",l=>{r+=l.toString()}),i.on("close",l=>{t({success:l===0,output:s.trim(),error:r.trim()})}),i.on("error",l=>{t({success:!1,error:l.message})})})}async executePythonConnectionTest(e,t){return new Promise(i=>{var s,r;try{const{bridgeDir:o}=this.getVaultAwarePaths(),a=Me.join(o,"test_connections.py");if(!require("fs").existsSync(a)){i({success:!1,message:`Test script not found at: ${a}`});return}this.logger.info("Executing connection test",{testType:e});const c=at.spawn("python",[a,"--test-type",e,"--config",JSON.stringify(t)],{cwd:o,stdio:["pipe","pipe","pipe"]});let p="",g="";(s=c.stdout)==null||s.on("data",h=>{const m=h.toString();p+=m,this.logger.logPythonOutput("stdout",m)}),(r=c.stderr)==null||r.on("data",h=>{const m=h.toString();g+=m,this.logger.logPythonOutput("stderr",m)}),c.on("close",h=>{if(this.logger.debug("Connection test process completed",{exitCode:h}),h===0)try{const m=JSON.parse(p.trim()),d={success:m.success,message:m.message,latency:m.latency};m.cross_encoder&&(d.cross_encoder=m.cross_encoder),i(d)}catch(m){this.logger.error("Failed to parse connection test result",m),i({success:!1,message:`Failed to parse test result: ${p||g}`})}else this.logger.error("Connection test failed",{exitCode:h,stderr:g,stdout:p}),i({success:!1,message:`Connection test failed (exit code ${h}): ${g||p||"Unknown error"}`})}),c.on("error",h=>{this.logger.error("Failed to start connection test process",h);let m=h.message;h.message.includes("ENOENT")&&(m="Python not found. Please ensure Python 3.10+ is installed and in your PATH."),i({success:!1,message:`Failed to start connection test: ${m}`})})}catch(o){this.logger.error("Connection test exception",o),i({success:!1,message:`Connection test error: ${o instanceof Error?o.message:String(o)}`})}})}async testDatabaseConnection(){var e;try{const t={database_type:this.settings.databaseType,...this.prepareDatabaseConfig()},i=this.getDatabaseConfig();return this.logger.debug("Testing database connection",{databaseType:this.settings.databaseType,databaseConfig:i,hasPassword:!!(i!=null&&i.password),passwordLength:((e=i==null?void 0:i.password)==null?void 0:e.length)||0}),await this.executePythonConnectionTest("database",t)}catch(t){return this.logger.error("Database connection test error",t),{success:!1,message:`Database test error: ${t instanceof Error?t.message:String(t)}`}}}async testLLMConnection(){try{const e={llm_provider:this.settings.llmProvider,api_keys:this.settings.apiKeys,llm_model:this.settings.llmModel,azure_endpoint:this.settings.azureEndpoint,azure_api_version:this.settings.azureApiVersion,ollama_base_url:this.settings.ollamaBaseUrl,database_type:this.settings.databaseType,...this.prepareDatabaseConfig()};return this.logger.debug("Testing LLM connection",{llmProvider:this.settings.llmProvider,hasApiKeys:Object.keys(this.settings.apiKeys).length>0,sanitizedConfig:this.sanitizeConfigForLogging(e)}),await this.executePythonConnectionTest("llm",e)}catch(e){return this.logger.error("LLM connection test error",e),{success:!1,message:`LLM test error: ${e instanceof Error?e.message:String(e)}`}}}async testEmbeddingConnection(){try{const e={embedder_provider:this.settings.embedderProvider,api_keys:this.settings.apiKeys,embedding_model:this.settings.embeddingModel,database_type:this.settings.databaseType,...this.prepareDatabaseConfig()};return this.logger.debug("Testing embedding connection",{embedderProvider:this.settings.embedderProvider,embeddingModel:this.settings.embeddingModel,hasApiKeys:Object.keys(this.settings.apiKeys).length>0,sanitizedConfig:this.sanitizeConfigForLogging(e)}),await this.executePythonConnectionTest("embedding",e)}catch(e){return this.logger.error("Embedding connection test error",e),{success:!1,message:`Embedding test error: ${e instanceof Error?e.message:String(e)}`}}}async testEmbeddingWithDimensions(){try{const e={embedder_provider:this.settings.embedderProvider,api_keys:this.settings.apiKeys,embedding_model:this.settings.embeddingModel,database_type:this.settings.databaseType,...this.prepareDatabaseConfig()};return this.logger.debug("Testing embedding connection with dimensions",{embedderProvider:this.settings.embedderProvider,embeddingModel:this.settings.embeddingModel,hasApiKeys:Object.keys(this.settings.apiKeys).length>0,sanitizedConfig:this.sanitizeConfigForLogging(e)}),await this.executePythonConnectionTest("embedding-test",e)}catch(e){return this.logger.error("Enhanced embedding connection test error",e),{success:!1,message:`Enhanced embedding test error: ${e instanceof Error?e.message:String(e)}`}}}async testProviderCombination(){try{const e={llm_provider:this.settings.llmProvider,llm_model:this.settings.llmModel,azure_endpoint:this.settings.azureEndpoint,azure_api_version:this.settings.azureApiVersion,ollama_base_url:this.settings.ollamaBaseUrl,embedder_provider:this.settings.embedderProvider,embedding_model:this.settings.embeddingModel,api_keys:this.settings.apiKeys,database_type:this.settings.databaseType,...this.prepareDatabaseConfig()};return this.logger.debug("Testing provider combination",{llmProvider:this.settings.llmProvider,embedderProvider:this.settings.embedderProvider,llmModel:this.settings.llmModel,embeddingModel:this.settings.embeddingModel,hasApiKeys:Object.keys(this.settings.apiKeys).length>0,sanitizedConfig:this.sanitizeConfigForLogging(e)}),await this.executePythonConnectionTest("combination",e)}catch(e){return this.logger.error("Provider combination test error",e),{success:!1,message:`Provider combination test error: ${e instanceof Error?e.message:String(e)}`}}}async testFullPipeline(){try{const e={llm_provider:this.settings.llmProvider,api_keys:this.settings.apiKeys,llm_model:this.settings.llmModel,azure_endpoint:this.settings.azureEndpoint,azure_api_version:this.settings.azureApiVersion,ollama_base_url:this.settings.ollamaBaseUrl,embedder_provider:this.settings.embedderProvider,embedding_model:this.settings.embeddingModel,cross_encoder_client:this.settings.crossEncoderClient||"none",cross_encoder_model:this.settings.crossEncoderClient==="bge"||this.settings.crossEncoderClient==="none"?void 0:this.settings.crossEncoderModel,database_type:this.settings.databaseType,...this.prepareDatabaseConfig()};return this.logger.debug("Testing full LLM + embedding pipeline",{llmProvider:this.settings.llmProvider,embedderProvider:this.settings.embedderProvider,llmModel:this.settings.llmModel,embeddingModel:this.settings.embeddingModel,hasApiKeys:Object.keys(this.settings.apiKeys).length>0,sanitizedConfig:this.sanitizeConfigForLogging(e)}),await this.executePythonConnectionTest("combination-pipeline",e)}catch(e){return this.logger.error("Full pipeline test error",e),{success:!1,message:`Pipeline test error: ${e instanceof Error?e.message:String(e)}`}}}async validateAPIKeys(){try{const e=[],t=[],i=this.getApiKeyForProvider(this.settings.llmProvider);if(this.settings.llmProvider==="ollama"?e.push(`${this.settings.llmProvider}: Local provider (no API key required)`):i?i.length<10?t.push(`API key for ${this.settings.llmProvider} appears too short (${i.length} chars)`):e.push(`${this.settings.llmProvider}: API key present (${i.length} chars)`):t.push(`Missing API key for LLM provider: ${this.settings.llmProvider}`),this.settings.embedderProvider!==this.settings.llmProvider){const s=this.getApiKeyForProvider(this.settings.embedderProvider);this.settings.embedderProvider==="ollama"?e.push(`${this.settings.embedderProvider}: Local provider (no API key required)`):s?s.length<10?t.push(`API key for ${this.settings.embedderProvider} appears too short (${s.length} chars)`):e.push(`${this.settings.embedderProvider}: API key present (${s.length} chars)`):t.push(`Missing API key for embedder provider: ${this.settings.embedderProvider}`)}return t.length>0?(this.logger.error("API key validation failed",{errors:t,validationResults:e}),{success:!1,message:`Validation failed: ${t.join(", ")}`}):(this.logger.info("API key validation successful",{validationResults:e}),{success:!0,message:`All API keys valid: ${e.join(", ")}`})}catch(e){return this.logger.error("API key validation error",e),{success:!1,message:`Validation error: ${e instanceof Error?e.message:String(e)}`}}}async initializeDatabaseSchema(){try{const e={database_type:this.settings.databaseType,...this.prepareDatabaseConfig(),llm_provider:this.settings.llmProvider,api_keys:this.settings.apiKeys,llm_model:this.settings.llmModel,azure_endpoint:this.settings.azureEndpoint,azure_api_version:this.settings.azureApiVersion,ollama_base_url:this.settings.ollamaBaseUrl},t=this.getDatabaseConfig();return this.logger.info("Initializing database schema",{databaseType:this.settings.databaseType,databaseConfig:t,llmProvider:this.settings.llmProvider}),await this.executePythonSchemaInitialization(e)}catch(e){return this.logger.error("Database schema initialization error",e),{success:!1,message:`Schema initialization error: ${e instanceof Error?e.message:String(e)}`}}}async executePythonSchemaInitialization(e){return new Promise(t=>{var i,s;try{const{bridgeDir:r}=this.getVaultAwarePaths(),o=Me.join(r,"test_connections.py");if(!require("fs").existsSync(o)){t({success:!1,message:`Test script not found at: ${o}`});return}this.logger.info("Executing schema initialization");const l=at.spawn("python",[o,"--test-type","schema-init","--config",JSON.stringify(e)],{cwd:r,stdio:["pipe","pipe","pipe"]});let c="",p="";(i=l.stdout)==null||i.on("data",g=>{const h=g.toString();c+=h,this.logger.logPythonOutput("stdout",h)}),(s=l.stderr)==null||s.on("data",g=>{const h=g.toString();p+=h,this.logger.logPythonOutput("stderr",h)}),l.on("close",g=>{if(this.logger.debug("Schema initialization process completed",{exitCode:g}),g===0)try{const h=JSON.parse(c.trim());t({success:h.success,message:h.message})}catch(h){this.logger.error("Failed to parse schema initialization result",h),t({success:!1,message:`Failed to parse initialization result: ${c||p}`})}else this.logger.error("Schema initialization failed",{exitCode:g,stderr:p,stdout:c}),t({success:!1,message:`Schema initialization failed (exit code ${g}): ${p||c||"Unknown error"}`})}),l.on("error",g=>{this.logger.error("Failed to start schema initialization process",g);let h=g.message;g.message.includes("ENOENT")&&(h="Python not found. Please ensure Python 3.10+ is installed and in your PATH."),t({success:!1,message:`Failed to start schema initialization: ${h}`})})}catch(r){this.logger.error("Schema initialization exception",r),t({success:!1,message:`Schema initialization error: ${r instanceof Error?r.message:String(r)}`})}})}async testManualSync(e,t="obsidian_mm_individual"){var s;const i=Date.now();try{this.logger.info(`Starting manual sync test for file: ${e}, Source: ${t}`);try{const S=this.settings.embeddingModel,x=this.getCurrentEmbeddingDimensions(),E=await this.vaultRegistryService.hasEmbeddingModelChanged(S,x);if(E){const D=await this.vaultRegistryService.getEmbeddingModelMismatchDetails(S,x);this.logger.warn("[TEST_SYNC] Embedding model change detected before test sync",{hasChanged:E,storedModel:D==null?void 0:D.storedModel,storedDimensions:D==null?void 0:D.storedDimensions,currentModel:S,currentDimensions:x,noteFile:e});const M=`Embedding model changed from ${(D==null?void 0:D.storedModel)||"unknown"} to ${S}. This may affect vector similarity in your knowledge graph.`;new C.Notice(M,8e3)}}catch(S){this.logger.debug("[TEST_SYNC] Failed to validate embedding model (test sync continues)",{error:S,noteFile:e})}if(!require("fs").existsSync(e))throw new Error(`Note file not found: ${e}`);const o={notesPaths:[e],batchSize:1,debug:this.settings.enableDebugLogging,source_description:t,crossEncoderClient:this.settings.crossEncoderClient,crossEncoderModel:this.settings.crossEncoderModel,use_custom_ontology:this.settings.useCustomOntology},a=await this.syncNotes(o,S=>{this.logger.debug("Manual sync progress",S),new C.Notice(`Manual sync: ${S.message} (${S.percentage.toFixed(1)}%)`)},t),l=a.processing_duration_seconds??(a.notes&&Array.isArray(a.notes)&&((s=a.notes[0])==null?void 0:s.processing_duration_seconds))??Math.round((Date.now()-i)/1e3),c=1,p=0,g=1,h=1,m=a!=null&&a.notes&&Array.isArray(a.notes)?a.notes[0]:null,d=a.note_name||(m==null?void 0:m.note_name)||"unknown",f=await this.syncRegistryService.generateGroupId(e,this.plugin.app.vault.getName()),v=a.episode_uuid||(m==null?void 0:m.episode_uuid)||"unknown",w=a.status||(m==null?void 0:m.status)||"unknown";return this.logger.info(`ManualSyncResult: note_name:${d}, status: ${w}, processed: ${c}, skipped: ${p}, total: ${g}, batches: ${h}, processed_in: ${l}s, group_id: ${f}, uuid: ${v}, source_description: ${t}`),a}catch(r){return this.logger.error("[ERROR] Manual sync test failed",r),{status:"error",processed:0,skipped:0,total:1,batchCount:0,nodeTypesLoaded:0,edgeTypesLoaded:0,message:r instanceof Error?r.message:String(r)}}}getPlugin(){return typeof window.app<"u"?window.app.plugins.plugins["megamem-mcp"]:null}async addEntityDefinition(e,t){const i=this.getPlugin();if(!(i!=null&&i.settings))throw new Error("Plugin settings not available");i.settings.entityDescriptions||(i.settings.entityDescriptions={}),i.settings.entityDescriptions[e]={className:e.replace(/\s+/g,"").replace(/[^a-zA-Z0-9]/g,""),description:t,isUserDefined:!0,source:"user",lastModified:new Date().toISOString()},await i.saveSettings(),this.logger.info("Added entity definition",{entityName:e})}async removeEntityDefinition(e){var i;const t=this.getPlugin();(i=t==null?void 0:t.settings)!=null&&i.entityDescriptions&&(delete t.settings.entityDescriptions[e],await t.saveSettings(),this.logger.info("Removed entity definition",{entityName:e}))}async updateEntityDescription(e,t){var s,r;const i=this.getPlugin();if(!((r=(s=i==null?void 0:i.settings)==null?void 0:s.entityDescriptions)!=null&&r[e]))throw new Error(`Entity ${e} not found`);i.settings.entityDescriptions[e]={...i.settings.entityDescriptions[e],description:t,lastModified:new Date().toISOString()},await i.saveSettings(),this.logger.info("Updated entity description",{entityName:e})}async addPropertyDefinition(e,t,i){const s=this.getPlugin();if(!(s!=null&&s.settings))throw new Error("Plugin settings not available");s.settings.propertyDescriptions||(s.settings.propertyDescriptions={}),s.settings.propertyDescriptions[e]||(s.settings.propertyDescriptions[e]={}),s.settings.propertyDescriptions[e][t]={description:i,fieldType:"str",isUserDefined:!0,source:"user",lastModified:new Date().toISOString()},await s.saveSettings(),this.logger.info("Added property definition",{entityName:e,propertyName:t})}async removePropertyDefinition(e,t){var s,r;const i=this.getPlugin();(r=(s=i==null?void 0:i.settings)==null?void 0:s.propertyDescriptions)!=null&&r[e]&&(delete i.settings.propertyDescriptions[e][t],Object.keys(i.settings.propertyDescriptions[e]).length===0&&delete i.settings.propertyDescriptions[e],await i.saveSettings(),this.logger.info("Removed property definition",{entityName:e,propertyName:t}))}async updatePropertyDescription(e,t,i){var r,o,a;const s=this.getPlugin();if(!((a=(o=(r=s==null?void 0:s.settings)==null?void 0:r.propertyDescriptions)==null?void 0:o[e])!=null&&a[t]))throw new Error(`Property ${e}.${t} not found`);s.settings.propertyDescriptions[e][t]={...s.settings.propertyDescriptions[e][t],description:i,lastModified:new Date().toISOString()},await s.saveSettings(),this.logger.info("Updated property description",{entityName:e,propertyName:t})}async loadAllDefaultEntityDescriptions(){const e=this.getPlugin();if(!(e!=null&&e.settings))throw new Error("Plugin settings not available");e.settings.entityDescriptions||(e.settings.entityDescriptions={});const t=this.schemaService.getAvailableDefaultEntityTypes();let i=0,s=0;for(const r of t){const o=this.schemaService.getDefaultEntityDescription(r);if(o)if(e.settings.entityDescriptions[r]){const a=e.settings.entityDescriptions[r];a.source!=="user"&&(e.settings.entityDescriptions[r]={...a,description:o,source:"discovery",lastModified:new Date().toISOString()},s++)}else e.settings.entityDescriptions[r]={className:r.replace(/\s+/g,"").replace(/[^a-zA-Z0-9]/g,""),description:o,isUserDefined:!1,source:"discovery",lastModified:new Date().toISOString()},i++}await e.saveSettings(),this.logger.info("Loaded all default entity descriptions",{addedCount:i,updatedCount:s})}async loadAllDefaultPropertyDescriptions(){const e=this.getPlugin();if(!(e!=null&&e.settings))throw new Error("Plugin settings not available");e.settings.propertyDescriptions||(e.settings.propertyDescriptions={});let t=0,i=0;const s=await this.schemaService.discoverAllSchemas();for(const r of s){const o=r.typeName;e.settings.propertyDescriptions[o]||(e.settings.propertyDescriptions[o]={});for(const a of r.properties){const l=a.name,c=this.schemaService.getDefaultPropertyDescription(l);if(c)if(e.settings.propertyDescriptions[o][l]){const p=e.settings.propertyDescriptions[o][l];p.source!=="user"&&(e.settings.propertyDescriptions[o][l]={...p,description:c,source:"discovery",lastModified:new Date().toISOString()},i++)}else e.settings.propertyDescriptions[o][l]={description:c,fieldType:a.inferredType==="string"?"str":a.inferredType==="number"?"float":a.inferredType==="boolean"?"bool":a.inferredType==="date"?"datetime":a.inferredType==="array"?"List[str]":"str",isUserDefined:!1,source:"discovery",lastModified:new Date().toISOString()},t++}}await e.saveSettings(),this.logger.info("Loaded all default property descriptions",{addedCount:t,updatedCount:i})}async saveData(){const e=this.getPlugin();if(!(e!=null&&e.settings))throw new Error("Plugin settings not available");await e.saveSettings(),this.logger.info("Saved data to data.json")}logCacheMetrics(e){const t=Bt.performance.now();if(t-this.lastCacheLogTime>5e3||(this.cacheHits+this.cacheMisses)%10===0){const r=this.cacheHits+this.cacheMisses,o=r>0?(this.cacheHits/r*100).toFixed(2):"0.00",a=this.pathCache.size,c=(a*200/1024).toFixed(2);this.logger.debug(`[CACHE_HEALTH] Vault: ${e}, Hits: ${this.cacheHits}, Misses: ${this.cacheMisses}, Hit Ratio: ${o}%, Cache Size: ${a} entries, Est. Memory: ${c} KB`),this.cacheHits=0,this.cacheMisses=0,this.lastCacheLogTime=t}}async startMcpServer(){try{if(this.mcpServerProcess&&!this.mcpServerProcess.killed)return{success:!1,message:"MCP server is already running",pid:this.mcpServerProcess.pid};const{pluginDir:e}=this.getVaultAwarePaths(),t=Me.join(e,"mcp-server","megamem_mcp_server.py");return require("fs").existsSync(t)?(this.logger.info("Starting MCP server process",{mcpServerPath:t}),this.mcpServerProcess=at.spawn("python",[t],{stdio:["pipe","pipe","pipe"],cwd:Me.join(e,"mcp-server")}),new Promise(s=>{var o,a;const r=setTimeout(()=>{this.mcpServerProcess&&(this.mcpServerProcess.kill(),this.mcpServerProcess=null),s({success:!1,message:"MCP server startup timeout"})},1e4);this.mcpServerProcess.on("spawn",()=>{clearTimeout(r),this.logger.info("MCP server started successfully",{pid:this.mcpServerProcess.pid}),s({success:!0,message:"MCP server started successfully",pid:this.mcpServerProcess.pid})}),this.mcpServerProcess.on("error",l=>{clearTimeout(r),this.mcpServerProcess=null,this.logger.error("Failed to start MCP server",l),s({success:!1,message:`Failed to start MCP server: ${l.message}`})}),this.mcpServerProcess.on("exit",(l,c)=>{this.mcpServerProcess=null,this.logger.warn("MCP server process exited",{code:l,signal:c})}),(o=this.mcpServerProcess.stdout)==null||o.on("data",l=>{this.logger.debug("MCP server stdout",{output:l.toString().trim()})}),(a=this.mcpServerProcess.stderr)==null||a.on("data",l=>{this.logger.warn("MCP server stderr",{output:l.toString().trim()})})})):{success:!1,message:`MCP server not found at: ${t}`}}catch(e){return this.logger.error("Error starting MCP server",e),{success:!1,message:`Error starting MCP server: ${e instanceof Error?e.message:String(e)}`}}}async stopMcpServer(){try{if(!this.mcpServerProcess||this.mcpServerProcess.killed)return{success:!0,message:"MCP server is not running"};const e=this.mcpServerProcess.pid;return this.logger.info("Stopping MCP server process",{pid:e}),new Promise(t=>{var s;const i=setTimeout(()=>{this.mcpServerProcess&&!this.mcpServerProcess.killed&&(this.logger.warn("Force killing MCP server process"),this.mcpServerProcess.kill("SIGKILL"))},5e3);this.mcpServerProcess.on("exit",()=>{clearTimeout(i),this.mcpServerProcess=null,this.logger.info("MCP server stopped successfully"),t({success:!0,message:"MCP server stopped successfully"})}),(s=this.mcpServerProcess)==null||s.kill("SIGTERM")})}catch(e){return this.logger.error("Error stopping MCP server",e),{success:!1,message:`Error stopping MCP server: ${e instanceof Error?e.message:String(e)}`}}}isMcpServerRunning(){return this.mcpServerProcess!==null&&!this.mcpServerProcess.killed}getMcpServerStatus(){return this.mcpServerProcess?this.mcpServerProcess.killed?{running:!1,status:"stopped",message:"MCP server process was killed"}:{running:!0,pid:this.mcpServerProcess.pid,status:"running",message:`MCP server is running (PID: ${this.mcpServerProcess.pid})`}:{running:!1,status:"stopped",message:"MCP server is not running"}}generateClaudeDesktopConfig(){try{const{pluginDir:e}=this.getVaultAwarePaths(),t=Me.join(e,"mcp-server","megamem_mcp_server.py"),i=Me.join(e,"data.json");if(!require("fs").existsSync(t))return{success:!1,message:`MCP server not found at: ${t}`};const r={megamem:{command:"python",args:[t.replace(/\\/g,"/")],env:{OBSIDIAN_CONFIG_PATH:i.replace(/\\/g,"/")}}},o=require("os"),a=require("path"),l=a.join(o.homedir(),"AppData","Roaming","Claude"),c=a.join(l,"claude_desktop_config.json");return{success:!0,config:r,message:"Claude Desktop configuration generated successfully",configPath:c}}catch(e){return this.logger.error("Error generating Claude Desktop config",e),{success:!1,message:`Error generating config: ${e instanceof Error?e.message:String(e)}`}}}}class sc{constructor(e,t,i,s){this.daemonProcess=null,this.commandQueue=[],this.isProcessing=!1,this.isShuttingDown=!1,this.startupPromise=null,this.plugin=e,this.settings=t,this.logger=i,this.vaultRegistry=s}async preloadDaemon(){return this.startDaemon()}async startDaemon(){if(!(this.daemonProcess&&!this.daemonProcess.killed))return this.startupPromise?this.startupPromise:(this.startupPromise=this._startDaemonInternal(),this.startupPromise)}async _startDaemonInternal(){return new Promise((e,t)=>{var i,s;try{const r=this.getBridgePath(),o=Me.join(r,"sync_daemon.py"),a=require("fs");this.logger.debug("[DAEMON] Resolved paths",{bridgePath:r,daemonScript:o,exists:a.existsSync(o)}),this.logger.info("[DAEMON] Starting Python daemon process");const l={...process.env};this.settings.logPerformance&&(l.GRAPHITI_LOG_PERFORMANCE="true"),this.daemonProcess=at.spawn("python",[o],{stdio:["pipe","pipe","pipe"],cwd:r,env:l});let c=!1;const p=setTimeout(()=>{c||(this.logger.error("[DAEMON] Startup timeout"),t(new Error("Daemon startup timeout")))},12e4);this.logger.debug("[DAEMON] Waiting up to 120s for daemon readiness"),(i=this.daemonProcess.stdout)==null||i.on("data",g=>{const h=g.toString().trim();this.logger.logPythonOutput("stdout",h),h.includes('"status": "ready"')&&!c&&(c=!0,clearTimeout(p),this.logger.info("[DAEMON] Process ready - BGE model loaded"),this.startupPromise=null,e())}),(s=this.daemonProcess.stderr)==null||s.on("data",g=>{const h=g.toString().trim();this.logger.logPythonOutput("stderr",h)}),this.daemonProcess.on("error",g=>{this.logger.error("[DAEMON] Process error:",g),this.startupPromise=null,c||(clearTimeout(p),t(g))}),this.daemonProcess.on("exit",(g,h)=>{this.logger.info(`[DAEMON] Process exited with code ${g}, signal ${h}`),this.daemonProcess=null,this.startupPromise=null,c||(clearTimeout(p),t(new Error(`Daemon process exited with code ${g}`)))})}catch(r){this.logger.error("[DAEMON] Failed to start process:",r),this.startupPromise=null,t(r)}})}async executeDaemonSync(e){try{await this.startDaemon();const i={command:"sync",config:{...e,logPerformance:this.settings.logPerformance}};return await this.executeCommand(i)}catch(t){throw this.logger.error("[DAEMON] Sync execution failed:",t),t}}async executeCommand(e){if(this.isShuttingDown)throw new Error("Daemon is shutting down");return new Promise((t,i)=>{const s=setTimeout(()=>{i(new Error("Command timeout - daemon may be unresponsive"))},6e5),r={command:e,resolve:o=>{clearTimeout(s),t(o)},reject:o=>{clearTimeout(s),i(o)},timeout:s};this.commandQueue.push(r),this.processQueue()})}async processQueue(){if(!(this.isProcessing||this.commandQueue.length===0)){for(this.isProcessing=!0;this.commandQueue.length>0&&!this.isShuttingDown;){const e=this.commandQueue.shift();try{const t=await this.sendCommandToDaemon(e.command);e.resolve(t)}catch(t){e.reject(t)}}this.isProcessing=!1}}async sendCommandToDaemon(e){const t=this.daemonProcess;if(!t||t.killed)throw new Error("Daemon process not available");return new Promise((i,s)=>{var c,p;let r="",o=!1;const a=g=>{var h;r+=g.toString();try{const m=r.split(`
`);for(const d of m)if(d.trim()&&!o){const f=JSON.parse(d.trim());o=!0,(h=t.stdout)==null||h.removeListener("data",a),i(f);return}}catch{}};(c=t.stdout)==null||c.on("data",a);const l=JSON.stringify(e)+`
`;(p=t.stdin)==null||p.write(l),setTimeout(()=>{var g;o||((g=t.stdout)==null||g.removeListener("data",a),s(new Error("Command response timeout")))},6e5)})}async shutdown(){var t;if(this.isShuttingDown)return;this.isShuttingDown=!0,this.logger.info("[DAEMON] Shutting down daemon process"),this.commandQueue.forEach(i=>{clearTimeout(i.timeout),i.reject(new Error("Daemon shutting down"))}),this.commandQueue=[];const e=this.daemonProcess;if(e&&!e.killed)try{const i={command:"shutdown"};(t=e.stdin)==null||t.write(JSON.stringify(i)+`
`),await new Promise(s=>setTimeout(s,2e3)),e&&!e.killed&&e.kill("SIGTERM")}catch(i){this.logger.error("[DAEMON] Error during shutdown:",i),e&&!e.killed&&e.kill("SIGKILL")}this.daemonProcess=null,this.isShuttingDown=!1,this.startupPromise=null}getBridgePath(){var o,a,l,c,p;const e=require("fs");let t=this.vaultRegistry.getActiveVault();if(t||(this.vaultRegistry.ensureActiveVault(),t=this.vaultRegistry.getActiveVault()),t!=null&&t.path){const g=Me.join(t.path,".obsidian","plugins","megamem-mcp","graphiti_bridge");if(e.existsSync(Me.join(g,"sync_daemon.py")))return this.logger.debug("[DAEMON] Using vault-aware bridge path",{path:g}),g}const i=((a=(o=this.plugin)==null?void 0:o.manifest)==null?void 0:a.dir)||"",s=((p=(c=(l=this.plugin.app)==null?void 0:l.vault)==null?void 0:c.adapter)==null?void 0:p.basePath)||"",r=s?Me.join(s,i,"graphiti_bridge"):Me.join(i,"graphiti_bridge");return this.logger.debug("[DAEMON] Using fallback bridge path",{path:r,vaultPath:(t==null?void 0:t.path)||"none",manifestDir:i,currentVaultPath:s}),r}isRunning(){return!!(this.daemonProcess&&!this.daemonProcess.killed)}getStatus(){return{running:this.isRunning(),queueLength:this.commandQueue.length,processing:this.isProcessing}}}function fe(){}function qs(n){return n()}function ni(){return Object.create(null)}function $e(n){n.forEach(qs)}function Tn(n){return typeof n=="function"}function Mn(n,e){return n!=n?e==e:n!==e||n&&typeof n=="object"||typeof n=="function"}function rc(n){return Object.keys(n).length===0}function u(n,e){n.appendChild(e)}function Q(n,e,t){n.insertBefore(e,t||null)}function J(n){n.parentNode&&n.parentNode.removeChild(n)}function Ye(n,e){for(let t=0;t<n.length;t+=1)n[t]&&n[t].d(e)}function b(n){return document.createElement(n)}function Xt(n){return document.createElementNS("http://www.w3.org/2000/svg",n)}function V(n){return document.createTextNode(n)}function k(){return V(" ")}function oc(){return V("")}function ee(n,e,t,i){return n.addEventListener(e,t,i),()=>n.removeEventListener(e,t,i)}function ut(n){return function(e){return e.stopPropagation(),n.call(this,e)}}function y(n,e,t){t==null?n.removeAttribute(e):n.getAttribute(e)!==t&&n.setAttribute(e,t)}function ac(n){return Array.from(n.childNodes)}function ne(n,e){e=""+e,n.data!==e&&(n.data=e)}function Ie(n,e){n.value=e??""}function ii(n,e,t,i){t==null?n.style.removeProperty(e):n.style.setProperty(e,t,i?"important":"")}function et(n,e,t){for(let i=0;i<n.options.length;i+=1){const s=n.options[i];if(s.__value===e){s.selected=!0;return}}(!t||e!==void 0)&&(n.selectedIndex=-1)}function Tt(n){const e=n.querySelector(":checked");return e&&e.__value}let Ft;function At(n){Ft=n}function Ws(){if(!Ft)throw new Error("Function called outside component initialization");return Ft}function Nn(n){Ws().$$.on_mount.push(n)}function Ks(n){Ws().$$.on_destroy.push(n)}const _t=[],Sn=[];let kt=[];const si=[],lc=Promise.resolve();let _n=!1;function cc(){_n||(_n=!0,lc.then(Hs))}function pt(n){kt.push(n)}const dn=new Set;let vt=0;function Hs(){if(vt!==0)return;const n=Ft;do{try{for(;vt<_t.length;){const e=_t[vt];vt++,At(e),dc(e.$$)}}catch(e){throw _t.length=0,vt=0,e}for(At(null),_t.length=0,vt=0;Sn.length;)Sn.pop()();for(let e=0;e<kt.length;e+=1){const t=kt[e];dn.has(t)||(dn.add(t),t())}kt.length=0}while(_t.length);for(;si.length;)si.pop()();_n=!1,dn.clear(),At(n)}function dc(n){if(n.fragment!==null){n.update(),$e(n.before_update);const e=n.dirty;n.dirty=[-1],n.fragment&&n.fragment.p(n.ctx,e),n.after_update.forEach(pt)}}function uc(n){const e=[],t=[];kt.forEach(i=>n.indexOf(i)===-1?e.push(i):t.push(i)),t.forEach(i=>i()),kt=e}const Gt=new Set;let gt;function Ee(){gt={r:0,c:[],p:gt}}function Ce(){gt.r||$e(gt.c),gt=gt.p}function z(n,e){n&&n.i&&(Gt.delete(n),n.i(e))}function G(n,e,t,i){if(n&&n.o){if(Gt.has(n))return;Gt.add(n),gt.c.push(()=>{Gt.delete(n),i&&(t&&n.d(1),i())}),n.o(e)}else i&&i()}function ke(n){return(n==null?void 0:n.length)!==void 0?n:Array.from(n)}function le(n){n&&n.c()}function re(n,e,t){const{fragment:i,after_update:s}=n.$$;i&&i.m(e,t),pt(()=>{const r=n.$$.on_mount.map(qs).filter(Tn);n.$$.on_destroy?n.$$.on_destroy.push(...r):$e(r),n.$$.on_mount=[]}),s.forEach(pt)}function oe(n,e){const t=n.$$;t.fragment!==null&&(uc(t.after_update),$e(t.on_destroy),t.fragment&&t.fragment.d(e),t.on_destroy=t.fragment=null,t.ctx=[])}function pc(n,e){n.$$.dirty[0]===-1&&(_t.push(n),cc(),n.$$.dirty.fill(0)),n.$$.dirty[e/31|0]|=1<<e%31}function An(n,e,t,i,s,r,o=null,a=[-1]){const l=Ft;At(n);const c=n.$$={fragment:null,ctx:[],props:r,update:fe,not_equal:s,bound:ni(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(e.context||(l?l.$$.context:[])),callbacks:ni(),dirty:a,skip_bound:!1,root:e.target||l.$$.root};o&&o(c.root);let p=!1;if(c.ctx=t?t(n,e.props||{},(g,h,...m)=>{const d=m.length?m[0]:h;return c.ctx&&s(c.ctx[g],c.ctx[g]=d)&&(!c.skip_bound&&c.bound[g]&&c.bound[g](d),p&&pc(n,g)),h}):[],c.update(),p=!0,$e(c.before_update),c.fragment=i?i(c.ctx):!1,e.target){if(e.hydrate){const g=ac(e.target);c.fragment&&c.fragment.l(g),g.forEach(J)}else c.fragment&&c.fragment.c();e.intro&&z(n.$$.fragment),re(n,e.target,e.anchor),Hs()}At(l)}class On{constructor(){on(this,"$$");on(this,"$$set")}$destroy(){oe(this,1),this.$destroy=fe}$on(e,t){if(!Tn(t))return fe;const i=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return i.push(t),()=>{const s=i.indexOf(t);s!==-1&&i.splice(s,1)}}$set(e){this.$$set&&!rc(e)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}}const gc="4";typeof window<"u"&&(window.__svelte||(window.__svelte={v:new Set})).v.add(gc);function hc(n){let e,t;return{c(){e=b("span"),y(e,"class",t="obsidian-icon inline-flex items-center justify-center "+n[3][n[0]]+" "+n[1]),y(e,"aria-hidden","true")},m(i,s){Q(i,e,s),n[5](e)},p(i,[s]){s&3&&t!==(t="obsidian-icon inline-flex items-center justify-center "+i[3][i[0]]+" "+i[1])&&y(e,"class",t)},i:fe,o:fe,d(i){i&&J(e),n[5](null)}}}function fc(n,e,t){let{icon:i}=e,{size:s="medium"}=e,{extraClasses:r=""}=e,o,a=null;const l={small:"w-3 h-3",medium:"w-4 h-4",large:"w-5 h-5",inherit:""};function c(){o&&i&&(C.setIcon(o,i),s==="inherit"?(t(2,o.style.width="1em",o),t(2,o.style.height="1em",o)):(t(2,o.style.width="",o),t(2,o.style.height="",o)))}Nn(()=>{c(),a=new MutationObserver(g=>{g.forEach(h=>{h.type==="attributes"&&(h.attributeName==="class"||h.attributeName==="style")&&c()})}),o&&(a.observe(o,{attributes:!0}),o.parentElement&&a.observe(o.parentElement,{attributes:!0}))}),Ks(()=>{a==null||a.disconnect()});function p(g){Sn[g?"unshift":"push"](()=>{o=g,t(2,o)})}return n.$$set=g=>{"icon"in g&&t(4,i=g.icon),"size"in g&&t(0,s=g.size),"extraClasses"in g&&t(1,r=g.extraClasses)},c(),[s,r,o,l,i,p]}class ce extends On{constructor(e){super(),An(this,e,fc,hc,Mn,{icon:4,size:0,extraClasses:1})}}function ri(n,e,t){const i=n.slice();return i[158]=e[t],i}function oi(n,e,t){const i=n.slice();return i[161]=e[t],i}function ai(n,e,t){const i=n.slice();return i[161]=e[t],i}function li(n,e,t){const i=n.slice();return i[166]=e[t],i}function ci(n,e,t){const i=n.slice();return i[158]=e[t],i}function di(n,e,t){const i=n.slice();return i[171]=e[t],i[173]=t,i}function ui(n,e,t){const i=n.slice();return i[158]=e[t],i}function pi(n,e,t){const i=n.slice();return i[158]=e[t],i}function gi(n,e,t){const i=n.slice();return i[161]=e[t],i}function hi(n,e,t){const i=n.slice();return i[161]=e[t],i}function fi(n,e,t){const i=n.slice();return i[182]=e[t][0],i[183]=e[t][1],i}function mi(n,e,t){const i=n.slice();return i[182]=e[t],i}function yi(n,e,t){const i=n.slice();return i[188]=e[t][0],i[189]=e[t][1],i}function bi(n,e,t){var o,a;const i=n.slice();i[192]=e[t],i[196]=t;const s=((o=i[192].properties)==null?void 0:o.filter(function(...c){return n[104](i[192],...c)}))||[];i[193]=s;const r=((a=i[192].properties)==null?void 0:a.length)||0;return i[194]=r,i}function vi(n,e,t){var p,g,h,m,d,f,v,w,S,x,E,D;const i=n.slice();i[197]=e[t],i[205]=t;const s=(h=(p=i[3])==null?void 0:p.globallyIgnoredFields)==null?void 0:h.includes((g=i[197])==null?void 0:g.name);i[198]=s;const r=i[62](i[192].typeName,(m=i[197])==null?void 0:m.name);i[199]=r;const o=((v=(f=(d=i[3])==null?void 0:d.propertySelections)==null?void 0:f[i[192].typeName])==null?void 0:v[i[199]])??!1;i[200]=o;const a=i[64](i[192].typeName,(w=i[197])==null?void 0:w.name);i[201]=a;const l=i[63](i[192].typeName,(S=i[197])==null?void 0:S.name);i[202]=l;const c=!!((D=(E=i[24][i[192].typeName])==null?void 0:E[((x=i[197])==null?void 0:x.name)||""])!=null&&D.description);return i[203]=c,i}function wi(n,e,t){const i=n.slice();i[192]=e[t],i[207]=e,i[173]=t;const s=ad(i[192]);return i[206]=s,i}function un(n){const e=n.slice(),t=e[69]();return e[208]=t,e}function pn(n){const e=n.slice(),t=e[0].reduce((i,s)=>{var r;return i+(((r=s.properties)==null?void 0:r.length)||0)},0);return e[209]=t,e}function Si(n){let e,t,i=n[0].length+"",s,r;return{c(){e=b("span"),t=V("("),s=V(i),r=V(")"),y(e,"class","text-xs opacity-80 font-normal")},m(o,a){Q(o,e,a),u(e,t),u(e,s),u(e,r)},p(o,a){a[0]&1&&i!==(i=o[0].length+"")&&ne(s,i)},d(o){o&&J(e)}}}function _i(n){let e,t,i=n[209]+"",s,r;return{c(){e=b("span"),t=V("("),s=V(i),r=V(")"),y(e,"class","text-xs opacity-80 font-normal")},m(o,a){Q(o,e,a),u(e,t),u(e,s),u(e,r)},p(o,a){a[0]&1&&i!==(i=o[209]+"")&&ne(s,i)},d(o){o&&J(e)}}}function xi(n){let e,t,i,s,r,o,a,l,c,p,g,h,m,d,f,v,w,S,x,E,D,M,N,P,I,T,L,A,B,U,j,W,X,K,$,R,q,O=n[0].length>0&&Ei(un(n)),Y=n[0].length>0&&Ci(n);return{c(){e=b("div"),t=b("div"),i=b("h3"),i.textContent="LLM Automatic Ontologies",s=k(),r=b("p"),r.textContent="Use AI to automatically generate entity descriptions, property definitions, and relationships from your vault content.",o=k(),a=b("div"),l=b("button"),l.textContent="Generate Entity Descriptions",c=k(),p=b("button"),p.textContent="Suggest Property Descriptions",g=k(),h=b("button"),h.textContent="Generate Complete Ontology",m=k(),d=b("button"),d.textContent="Load All Default Entity Descriptions",f=k(),v=b("span"),v.textContent="LLM integration coming soon",w=k(),O&&O.c(),S=k(),x=b("div"),E=b("h3"),E.textContent="Base Entity Type",D=k(),M=b("div"),N=b("div"),P=b("h4"),P.textContent="BaseEntity",I=k(),T=b("div"),L=b("button"),L.textContent="View Properties",A=k(),B=b("span"),B.textContent="SYSTEM",U=k(),j=b("div"),j.innerHTML='<p class="text-[var(--text-default)] text-sm leading-relaxed">Base entity class that provides core properties inherited by all other entity types. Contains fundamental metadata for knowledge graph processing.</p>',W=k(),X=b("div"),X.innerHTML='<span class="flex items-center gap-1">Inherited by all entities</span> <span class="flex items-center gap-1">3 core properties</span> <span class="flex items-center gap-1">Always enabled</span>',K=k(),Y&&Y.c(),y(i,"class","text-xl font-semibold mb-2 flex items-center gap-2"),y(r,"class","mb-4 opacity-90 leading-relaxed text-[var(--text-on-accent)]"),y(l,"class","px-4 py-2 bg-[rgba(255,255,255,0.06)] border border-[rgba(255,255,255,0.08)] rounded-md text-sm transition-all duration-200 backdrop-blur-sm hover:bg-[rgba(255,255,255,0.09)] disabled:opacity-50 disabled:cursor-not-allowed text-[var(--text-on-accent)]"),l.disabled=!0,y(p,"class","px-4 py-2 bg-[rgba(255,255,255,0.06)] border border-[rgba(255,255,255,0.08)] rounded-md text-sm transition-all duration-200 backdrop-blur-sm hover:bg-[rgba(255,255,255,0.09)] disabled:opacity-50 disabled:cursor-not-allowed text-[var(--text-on-accent)]"),p.disabled=!0,y(h,"class","px-4 py-2 bg-[rgba(255,255,255,0.06)] border border-[rgba(255,255,255,0.08)] rounded-md text-sm transition-all duration-200 backdrop-blur-sm hover:bg-[rgba(255,255,255,0.09)] disabled:opacity-50 disabled:cursor-not-allowed text-[var(--text-on-accent)]"),h.disabled=!0,y(d,"class","px-4 py-2 bg-[rgba(255,255,255,0.04)] border border-[rgba(255,255,255,0.06)] rounded-md text-sm transition-all duration-200 backdrop-blur-sm hover:bg-[rgba(255,255,255,0.06)] hover:border-[rgba(255,255,255,0.08)] text-[var(--text-on-accent)]"),y(d,"title","Load all default entity descriptions into data.json"),y(v,"class","text-xs opacity-70 italic text-[var(--text-on-accent)]"),y(a,"class","flex gap-3 flex-wrap items-center"),y(t,"class","bg-gradient-to-br from-[var(--interactive-accent)] to-[var(--background-secondary)] text-[var(--text-on-accent)] p-6 rounded-xl mb-6 shadow-md"),y(E,"class","text-lg font-semibold mb-4 text-[var(--text-default)]"),y(P,"class","text-lg font-semibold text-[var(--text-default)]"),y(L,"class","px-3 py-1 bg-[var(--background-secondary)] border border-[var(--background-modifier-border)] rounded text-sm hover:bg-[var(--background-modifier-border)] transition-colors duration-150 text-[var(--text-default)]"),y(L,"title","View Properties"),y(B,"class","text-xs px-2 py-1 bg-[var(--background-modifier-border)] text-[var(--text-muted)] rounded font-bold uppercase tracking-wide ml-2"),y(T,"class","flex gap-1 items-center"),y(N,"class","flex justify-between items-center mb-3"),y(j,"class","mb-3"),y(X,"class","flex gap-4 text-sm text-[var(--text-default)]"),y(M,"class","bg-[var(--background-primary-alt)] border-2 border-[var(--background-modifier-border)] rounded-lg p-4 max-w-lg"),y(x,"class","mb-8"),y(e,"class","animate-fadeIn"),y(e,"id","entities-panel")},m(te,Se){Q(te,e,Se),u(e,t),u(t,i),u(t,s),u(t,r),u(t,o),u(t,a),u(a,l),u(a,c),u(a,p),u(a,g),u(a,h),u(a,m),u(a,d),u(a,f),u(a,v),u(e,w),O&&O.m(e,null),u(e,S),u(e,x),u(x,E),u(x,D),u(x,M),u(M,N),u(N,P),u(N,I),u(N,T),u(T,L),u(T,A),u(T,B),u(M,U),u(M,j),u(M,W),u(M,X),u(e,K),Y&&Y.m(e,null),$=!0,R||(q=[ee(d,"click",n[72]),ee(L,"click",n[87])],R=!0)},p(te,Se){te[0].length>0?O?O.p(un(te),Se):(O=Ei(un(te)),O.c(),O.m(e,S)):O&&(O.d(1),O=null),te[0].length>0?Y?(Y.p(te,Se),Se[0]&1&&z(Y,1)):(Y=Ci(te),Y.c(),z(Y,1),Y.m(e,null)):Y&&(Ee(),G(Y,1,1,()=>{Y=null}),Ce())},i(te){$||(z(Y),$=!0)},o(te){G(Y),$=!1},d(te){te&&J(e),O&&O.d(),Y&&Y.d(),R=!1,$e(q)}}}function Ei(n){let e,t,i,s,r,o,a,l,c,p,g,h,m,d,f,v,w,S,x,E,D,M,N,P,I,T=n[208].warnings>0&&mc(n);return{c(){e=b("div"),t=b("h3"),t.textContent="Graphiti Compliance Dashboard",i=k(),s=b("div"),r=b("div"),o=b("span"),o.textContent=`${n[208].score}%`,a=k(),l=b("span"),l.textContent="Compliance Score",c=k(),p=b("div"),g=b("div"),h=b("span"),h.textContent=`${n[208].valid}`,m=k(),d=b("span"),d.textContent="Valid",f=k(),v=b("div"),w=b("span"),w.textContent=`${n[208].warnings}`,S=k(),x=b("span"),x.textContent="Warnings",E=k(),D=b("div"),M=b("span"),M.textContent=`${n[208].protectedCount}`,N=k(),P=b("span"),P.textContent="Protected",I=k(),T&&T.c(),y(t,"class","text-lg font-semibold mb-4 text-[var(--text-default)] flex items-center gap-2"),y(o,"class","text-2xl font-bold text-[var(--text-default)]"),y(l,"class","text-xs text-[var(--text-muted)] uppercase tracking-wide"),y(r,"class","flex flex-col items-center p-4 rounded-lg min-w-24 "+(n[208].score>=80?"bg-[var(--background-modifier-success)] border border-[var(--background-modifier-border)]":n[208].score>=60?"bg-[var(--background-modifier-border)] border border-[var(--background-modifier-border)]":"bg-[var(--background-modifier-error)] border border-[var(--background-modifier-border)]")),y(h,"class","text-xl font-bold text-[var(--text-success)]"),y(d,"class","text-xs text-[var(--text-muted)] uppercase tracking-wide"),y(g,"class","flex flex-col items-center p-2"),y(w,"class","text-xl font-bold text-[var(--text-error)]"),y(x,"class","text-xs text-[var(--text-muted)] uppercase tracking-wide"),y(v,"class","flex flex-col items-center p-2"),y(M,"class","text-xl font-bold text-[var(--text-error)]"),y(P,"class","text-xs text-[var(--text-muted)] uppercase tracking-wide"),y(D,"class","flex flex-col items-center p-2"),y(p,"class","flex gap-6"),y(s,"class","flex items-center gap-8 mb-4"),y(e,"class","bg-[var(--background-secondary)] border border-[var(--background-modifier-border)] rounded-lg p-6 mb-6")},m(L,A){Q(L,e,A),u(e,t),u(e,i),u(e,s),u(s,r),u(r,o),u(r,a),u(r,l),u(s,c),u(s,p),u(p,g),u(g,h),u(g,m),u(g,d),u(p,f),u(p,v),u(v,w),u(v,S),u(v,x),u(p,E),u(p,D),u(D,M),u(D,N),u(D,P),u(e,I),T&&T.m(e,null)},p(L,A){L[208].warnings>0&&T.p(L,A)},d(L){L&&J(e),T&&T.d()}}}function mc(n){let e,t,i,s;return{c(){e=b("div"),t=b("button"),t.textContent=`Apply All Naming Suggestions (${n[208].warnings})`,y(t,"class","px-4 py-2 bg-[var(--background-modifier-success)] text-[var(--text-on-accent)] rounded hover:opacity-90 font-medium"),y(e,"class","pt-4 border-t border-[var(--background-modifier-border)]")},m(r,o){Q(r,e,o),u(e,t),i||(s=ee(t,"click",n[70]),i=!0)},p:fe,d(r){r&&J(e),i=!1,s()}}}function Ci(n){let e,t,i,s=n[0].length+"",r,o,a,l,c,p=ke(n[0]),g=[];for(let m=0;m<p.length;m+=1)g[m]=Di(wi(n,p,m));const h=m=>G(g[m],1,1,()=>{g[m]=null});return{c(){e=b("div"),t=b("h3"),i=V("Custom Entity Types ("),r=V(s),o=V(")"),a=k(),l=b("div");for(let m=0;m<g.length;m+=1)g[m].c();y(t,"class","text-lg font-semibold mb-4"),y(l,"class","grid grid-cols-1 lg:grid-cols-2 gap-4 max-w-full")},m(m,d){Q(m,e,d),u(e,t),u(t,i),u(t,r),u(t,o),u(e,a),u(e,l);for(let f=0;f<g.length;f+=1)g[f]&&g[f].m(l,null);c=!0},p(m,d){if((!c||d[0]&1)&&s!==(s=m[0].length+"")&&ne(r,s),d[0]&33554817|d[1]&254|d[2]&512){p=ke(m[0]);let f;for(f=0;f<p.length;f+=1){const v=wi(m,p,f);g[f]?(g[f].p(v,d),z(g[f],1)):(g[f]=Di(v),g[f].c(),z(g[f],1),g[f].m(l,null))}for(Ee(),f=p.length;f<g.length;f+=1)h(f);Ce()}},i(m){if(!c){for(let d=0;d<p.length;d+=1)z(g[d]);c=!0}},o(m){g=g.filter(Boolean);for(let d=0;d<g.length;d+=1)G(g[d]);c=!1},d(m){m&&J(e),Ye(g,m)}}}function yc(n){let e,t=n[36](n[192].typeName)+"",i;return{c(){e=b("p"),i=V(t),y(e,"class","text-[var(--text-default)] text-sm leading-relaxed")},m(s,r){Q(s,e,r),u(e,i)},p(s,r){r[0]&1&&t!==(t=s[36](s[192].typeName)+"")&&ne(i,t)},i:fe,o:fe,d(s){s&&J(e)}}}function bc(n){let e,t,i,s,r=n[37](n[192].typeName),o,a,l,c,p,g,h,m;function d(){n[91].call(i,n[192])}let f=r&&ki(n);function v(){return n[93](n[192])}return{c(){e=b("div"),t=b("div"),i=b("textarea"),s=k(),f&&f.c(),o=k(),a=b("div"),l=b("button"),l.textContent="Save",c=k(),p=b("button"),p.textContent="Cancel",y(i,"placeholder","Enter entity description..."),y(i,"class","flex-1 p-2 border border-[var(--background-modifier-border)] rounded focus:outline-none focus:ring-2 focus:ring-[var(--interactive-accent)] focus:border-[var(--interactive-accent)] text-sm leading-relaxed resize-vertical min-h-15"),y(i,"rows","3"),y(t,"class","flex gap-2"),y(l,"class","px-3 py-1 bg-[var(--interactive-accent)] text-[var(--text-on-accent)] rounded text-sm font-medium hover:opacity-90 transition-colors duration-200"),y(p,"class","px-3 py-1 bg-[var(--background-modifier-border)] text-[var(--text-default)] rounded text-sm hover:opacity-90 transition-colors duration-200"),y(a,"class","flex gap-2 justify-end"),y(e,"class","flex flex-col gap-2")},m(w,S){Q(w,e,S),u(e,t),u(t,i),Ie(i,n[8][n[192].typeName]),u(t,s),f&&f.m(t,null),u(e,o),u(e,a),u(a,l),u(a,c),u(a,p),g=!0,h||(m=[ee(i,"input",d),ee(l,"click",v),ee(p,"click",n[35])],h=!0)},p(w,S){n=w,S[0]&257&&Ie(i,n[8][n[192].typeName]),S[0]&1&&(r=n[37](n[192].typeName)),r?f?(f.p(n,S),S[0]&1&&z(f,1)):(f=ki(n),f.c(),z(f,1),f.m(t,null)):f&&(Ee(),G(f,1,1,()=>{f=null}),Ce())},i(w){g||(z(f),g=!0)},o(w){G(f),g=!1},d(w){w&&J(e),f&&f.d(),h=!1,$e(m)}}}function ki(n){let e,t,i,s,r,o,a,l;t=new ce({props:{icon:"download",size:"medium"}});function c(){return n[92](n[192])}return{c(){e=b("button"),le(t.$$.fragment),i=k(),s=b("span"),s.textContent="Load Default",y(e,"class","px-2 py-2 bg-[var(--background-modifier-success)] text-[var(--text-success)] border border-[var(--background-modifier-success)] rounded hover:opacity-90 transition-colors duration-200 text-sm whitespace-nowrap flex items-center gap-1"),y(e,"title",r="Load default description for "+n[192].typeName)},m(p,g){Q(p,e,g),re(t,e,null),u(e,i),u(e,s),o=!0,a||(l=ee(e,"click",ut(c)),a=!0)},p(p,g){n=p,(!o||g[0]&1&&r!==(r="Load default description for "+n[192].typeName))&&y(e,"title",r)},i(p){o||(z(t.$$.fragment,p),o=!0)},o(p){G(t.$$.fragment,p),o=!1},d(p){p&&J(e),oe(t),a=!1,l()}}}function Di(n){let e,t,i,s=n[192].typeName+"",r,o,a,l,c,p,g,h,m=n[25][n[192].typeName]?"Enabled":"Disabled",d,f,v,w,S,x,E,D,M,N,P,I,T,L,A,B,U,j=n[192].fileCount+"",W,X,K,$,R=n[192].properties.length+"",q,O,Y,te=n[206].score+"",Se,be,me,De,Re,ve,_e,de;function pe(){return n[88](n[192])}function we(){return n[89](n[192])}x=new ce({props:{icon:"pencil",size:"medium"}});function Le(){return n[90](n[192])}M=new ce({props:{icon:"sparkles",size:"medium"}});const ge=[bc,yc],Be=[];function je(Ue,xe){return Ue[7]===Ue[192].typeName?0:1}return I=je(n),T=Be[I]=ge[I](n),{c(){e=b("div"),t=b("div"),i=b("button"),r=V(s),o=k(),a=b("div"),l=b("label"),c=b("input"),g=k(),h=b("span"),d=V(m),w=k(),S=b("button"),le(x.$$.fragment),E=k(),D=b("button"),le(M.$$.fragment),N=k(),P=b("div"),T.c(),L=k(),A=b("div"),B=b("span"),U=V("Files: "),W=V(j),X=k(),K=b("span"),$=V("Props: "),q=V(R),O=k(),Y=b("span"),Se=V(te),be=V("% compliant"),De=k(),y(i,"class","text-lg font-semibold text-[var(--text-default)] hover:opacity-90 transition-colors duration-200 text-left"),y(c,"type","checkbox"),c.checked=p=!!n[25][n[192].typeName],y(c,"class","w-4 h-4 text-[var(--text-success)] bg-[var(--background-secondary)] border-[var(--background-modifier-border)] rounded focus:ring-[var(--text-success)] focus:ring-2"),y(h,"class",f="text-xs text-[var(--text-muted)] "+(n[25][n[192].typeName]?"text-[var(--text-success)]":"text-[var(--text-muted)]")),y(l,"class","flex items-center gap-1 cursor-pointer"),y(l,"title",v=n[25][n[192].typeName]?"Enabled in data.json - uncheck to disable":"Disabled - check to enable in data.json"),y(S,"class","p-1 rounded opacity-60 hover:opacity-100 hover:bg-[var(--background-modifier-border)] transition-all duration-200"),y(S,"title","Edit Description"),y(D,"class","p-1 rounded opacity-50 cursor-not-allowed"),y(D,"title","LLM Suggest"),D.disabled=!0,y(a,"class","flex gap-1 items-center"),y(t,"class","flex justify-between items-center mb-3"),y(P,"class","mb-3"),y(B,"class","flex items-center gap-1"),y(K,"class","flex items-center gap-1"),y(Y,"class",me="flex items-center gap-1 "+(n[206].score>=80?"text-[var(--text-success)]":n[206].score>=60?"text-[var(--text-warning)]":"text-[var(--text-error)]")),y(A,"class","flex gap-4 text-sm text-[var(--text-muted)]"),y(e,"class",Re="bg-[var(--background-secondary-alt)] border border-[var(--background-modifier-border)] rounded-lg p-4 cursor-pointer transition-all duration-200 hover:border-[var(--interactive-accent)] hover:shadow-md "+(as===n[192].typeName?"border-[var(--interactive-accent)] shadow-md ring-2 ring-[var(--background-modifier-border)]":""))},m(Ue,xe){Q(Ue,e,xe),u(e,t),u(t,i),u(i,r),u(t,o),u(t,a),u(a,l),u(l,c),u(l,g),u(l,h),u(h,d),u(a,w),u(a,S),re(x,S,null),u(a,E),u(a,D),re(M,D,null),u(e,N),u(e,P),Be[I].m(P,null),u(e,L),u(e,A),u(A,B),u(B,U),u(B,W),u(A,X),u(A,K),u(K,$),u(K,q),u(A,O),u(A,Y),u(Y,Se),u(Y,be),u(e,De),ve=!0,_e||(de=[ee(i,"click",pe),ee(c,"change",ut(we)),ee(S,"click",ut(Le))],_e=!0)},p(Ue,xe){n=Ue,(!ve||xe[0]&1)&&s!==(s=n[192].typeName+"")&&ne(r,s),(!ve||xe[0]&33554433&&p!==(p=!!n[25][n[192].typeName]))&&(c.checked=p),(!ve||xe[0]&33554433)&&m!==(m=n[25][n[192].typeName]?"Enabled":"Disabled")&&ne(d,m),(!ve||xe[0]&33554433&&f!==(f="text-xs text-[var(--text-muted)] "+(n[25][n[192].typeName]?"text-[var(--text-success)]":"text-[var(--text-muted)]")))&&y(h,"class",f),(!ve||xe[0]&33554433&&v!==(v=n[25][n[192].typeName]?"Enabled in data.json - uncheck to disable":"Disabled - check to enable in data.json"))&&y(l,"title",v);let Qe=I;I=je(n),I===Qe?Be[I].p(n,xe):(Ee(),G(Be[Qe],1,1,()=>{Be[Qe]=null}),Ce(),T=Be[I],T?T.p(n,xe):(T=Be[I]=ge[I](n),T.c()),z(T,1),T.m(P,null)),(!ve||xe[0]&1)&&j!==(j=n[192].fileCount+"")&&ne(W,j),(!ve||xe[0]&1)&&R!==(R=n[192].properties.length+"")&&ne(q,R),(!ve||xe[0]&1)&&te!==(te=n[206].score+"")&&ne(Se,te),(!ve||xe[0]&1&&me!==(me="flex items-center gap-1 "+(n[206].score>=80?"text-[var(--text-success)]":n[206].score>=60?"text-[var(--text-warning)]":"text-[var(--text-error)]")))&&y(Y,"class",me),(!ve||xe[0]&1&&Re!==(Re="bg-[var(--background-secondary-alt)] border border-[var(--background-modifier-border)] rounded-lg p-4 cursor-pointer transition-all duration-200 hover:border-[var(--interactive-accent)] hover:shadow-md "+(as===n[192].typeName?"border-[var(--interactive-accent)] shadow-md ring-2 ring-[var(--background-modifier-border)]":"")))&&y(e,"class",Re)},i(Ue){ve||(z(x.$$.fragment,Ue),z(M.$$.fragment,Ue),z(T),ve=!0)},o(Ue){G(x.$$.fragment,Ue),G(M.$$.fragment,Ue),G(T),ve=!1},d(Ue){Ue&&J(e),oe(x),oe(M),Be[I].d(),_e=!1,$e(de)}}}function Pi(n){let e,t,i,s,r,o,a,l,c,p,g,h,m,d,f,v,w,S,x,E,D,M,N,P,I,T,L,A,B,U;s=new ce({props:{icon:"sparkles"}});const j=[wc,vc],W=[];function X(K,$){return K[0].length>0?0:1}return T=X(n),L=W[T]=j[T](n),{c(){e=b("div"),t=b("div"),i=b("h3"),le(s.$$.fragment),r=k(),o=b("span"),o.textContent="LLM Automatic Property Descriptions",a=k(),l=b("p"),l.textContent="Use AI to automatically generate property descriptions and configure property settings for all entities.",c=k(),p=b("div"),g=b("button"),g.textContent="Generate All Property Descriptions (disabled)",h=k(),m=b("button"),m.textContent="Suggest Property Types (disabled)",d=k(),f=b("button"),f.textContent="Load Default Descriptions",v=k(),w=b("button"),w.textContent="Enable Default Properties",S=k(),x=b("span"),x.textContent="LLM integration coming soon",E=k(),D=b("div"),M=b("h3"),M.textContent="All Entity Properties",N=k(),P=b("p"),P.textContent="Configure property mappings, descriptions, and field types for all entity types.",I=k(),L.c(),y(i,"class","text-xl font-semibold mb-2 flex items-center gap-2"),y(l,"class","mb-4 opacity-90 leading-relaxed"),y(g,"class","px-4 py-2 bg-[rgba(255,255,255,0.06)] border border-[rgba(255,255,255,0.08)] rounded-md text-sm transition-all duration-200 backdrop-blur-sm hover:bg-[rgba(255,255,255,0.09)] disabled:opacity-50 disabled:cursor-not-allowed"),g.disabled=!0,y(m,"class","px-4 py-2 bg-[rgba(255,255,255,0.06)] border border-[rgba(255,255,255,0.08)] rounded-md text-sm transition-all duration-200 backdrop-blur-sm hover:bg-[rgba(255,255,255,0.09)] disabled:opacity-50 disabled:cursor-not-allowed"),m.disabled=!0,y(f,"class","px-4 py-2 bg-[rgba(255,255,255,0.04)] border border-[rgba(255,255,255,0.06)] rounded-md text-sm transition-all duration-200 backdrop-blur-sm hover:bg-[rgba(255,255,255,0.06)] hover:border-[rgba(255,255,255,0.08)]"),y(f,"title","Load all default property descriptions into data.json"),y(w,"class","px-4 py-2 bg-[rgba(255,255,255,0.04)] border border-[rgba(255,255,255,0.06)] rounded-md text-sm transition-all duration-200 backdrop-blur-sm hover:bg-[rgba(255,255,255,0.06)] hover:border-[rgba(255,255,255,0.08)]"),y(w,"title","Enable all properties for which we have default descriptions"),y(x,"class","text-xs opacity-70 italic"),y(p,"class","flex gap-3 flex-wrap items-center"),y(t,"class","bg-gradient-to-br from-[var(--interactive-accent)] to-[var(--background-secondary)] text-[var(--text-on-accent)] p-6 rounded-xl mb-6 shadow-md"),y(M,"class","text-lg font-semibold mb-2 text-[var(--text-default)]"),y(P,"class","text-[var(--text-muted)] mb-6"),y(e,"class","animate-fadeIn"),y(e,"id","properties-panel")},m(K,$){Q(K,e,$),u(e,t),u(t,i),re(s,i,null),u(i,r),u(i,o),u(t,a),u(t,l),u(t,c),u(t,p),u(p,g),u(p,h),u(p,m),u(p,d),u(p,f),u(p,v),u(p,w),u(p,S),u(p,x),u(e,E),u(e,D),u(D,M),u(D,N),u(D,P),u(D,I),W[T].m(D,null),A=!0,B||(U=[ee(f,"click",n[73]),ee(w,"click",n[74])],B=!0)},p(K,$){let R=T;T=X(K),T===R?W[T].p(K,$):(Ee(),G(W[R],1,1,()=>{W[R]=null}),Ce(),L=W[T],L?L.p(K,$):(L=W[T]=j[T](K),L.c()),z(L,1),L.m(D,null))},i(K){A||(z(s.$$.fragment,K),z(L),A=!0)},o(K){G(s.$$.fragment,K),G(L),A=!1},d(K){K&&J(e),oe(s),W[T].d(),B=!1,$e(U)}}}function vc(n){let e;return{c(){e=b("div"),e.innerHTML="<p>No entity types found. Run schema discovery first.</p>",y(e,"class","text-center py-8 text-[var(--text-muted)]")},m(t,i){Q(t,e,i)},p:fe,i:fe,o:fe,d(t){t&&J(e)}}}function wc(n){let e,t,i,s,r,o,a,l,c,p,g,h,m,d,f,v=n[6].has("BaseEntity"),w,S,x,E;const D=[_c,Sc],M=[];function N(A,B){return B[0]&64&&(g=null),g==null&&(g=!!A[6].has("BaseEntity")),g?0:1}h=N(n,[-1,-1,-1,-1,-1,-1,-1]),m=M[h]=D[h](n);let P=v&&Ti(),I=ke(n[0]),T=[];for(let A=0;A<I.length;A+=1)T[A]=Bi(bi(n,I,A));const L=A=>G(T[A],1,1,()=>{T[A]=null});return{c(){e=b("div"),t=b("div"),i=b("div"),s=b("button"),r=b("h4"),r.innerHTML='BaseEntity <span class="text-xs bg-[var(--background-modifier-border)] text-[var(--text-muted)] px-2 py-1 rounded ml-2">SYSTEM</span>',o=k(),a=b("div"),l=b("span"),l.textContent="3 of 3 enabled",c=k(),p=b("span"),m.c(),f=k(),P&&P.c(),w=k();for(let A=0;A<T.length;A+=1)T[A].c();y(r,"class","font-semibold text-[var(--text-default)]"),y(l,"class","text-xs text-[var(--text-muted)] bg-[var(--background-modifier-border)] px-2 py-1 rounded-full"),y(p,"class","text-lg text-[var(--text-muted)] font-bold ml-4"),y(a,"class","flex items-center gap-4"),y(s,"class","flex-1 flex justify-between items-center text-left cursor-pointer transition-colors duration-200 hover:opacity-90"),y(i,"class",d="flex justify-between items-center w-full p-4 bg-[var(--background-secondary)] border-none "+(n[6].has("BaseEntity")?"border-b border-[var(--background-modifier-border)]":"")),y(t,"class","bg-[var(--background-primary-alt)] border-2 border-[var(--background-modifier-border)] rounded-lg overflow-hidden"),y(t,"id","accordion-BaseEntity"),y(e,"class","flex flex-col gap-4")},m(A,B){Q(A,e,B),u(e,t),u(t,i),u(i,s),u(s,r),u(s,o),u(s,a),u(a,l),u(a,c),u(a,p),M[h].m(p,null),u(t,f),P&&P.m(t,null),u(e,w);for(let U=0;U<T.length;U+=1)T[U]&&T[U].m(e,null);S=!0,x||(E=ee(s,"click",n[94]),x=!0)},p(A,B){let U=h;if(h=N(A,B),h!==U&&(Ee(),G(M[U],1,1,()=>{M[U]=null}),Ce(),m=M[h],m||(m=M[h]=D[h](A),m.c()),z(m,1),m.m(p,null)),(!S||B[0]&64&&d!==(d="flex justify-between items-center w-full p-4 bg-[var(--background-secondary)] border-none "+(A[6].has("BaseEntity")?"border-b border-[var(--background-modifier-border)]":"")))&&y(i,"class",d),B[0]&64&&(v=A[6].has("BaseEntity")),v?P?B[0]&64&&z(P,1):(P=Ti(),P.c(),z(P,1),P.m(t,null)):P&&(Ee(),G(P,1,1,()=>{P=null}),Ce()),B[0]&50331721|B[1]&769|B[2]&57983){I=ke(A[0]);let j;for(j=0;j<I.length;j+=1){const W=bi(A,I,j);T[j]?(T[j].p(W,B),z(T[j],1)):(T[j]=Bi(W),T[j].c(),z(T[j],1),T[j].m(e,null))}for(Ee(),j=I.length;j<T.length;j+=1)L(j);Ce()}},i(A){if(!S){z(m),z(P);for(let B=0;B<I.length;B+=1)z(T[B]);S=!0}},o(A){G(m),G(P),T=T.filter(Boolean);for(let B=0;B<T.length;B+=1)G(T[B]);S=!1},d(A){A&&J(e),M[h].d(),P&&P.d(),Ye(T,A),x=!1,E()}}}function Sc(n){let e,t;return e=new ce({props:{icon:"chevron-right",size:"medium"}}),{c(){le(e.$$.fragment)},m(i,s){re(e,i,s),t=!0},i(i){t||(z(e.$$.fragment,i),t=!0)},o(i){G(e.$$.fragment,i),t=!1},d(i){oe(e,i)}}}function _c(n){let e,t;return e=new ce({props:{icon:"chevron-down",size:"medium"}}),{c(){le(e.$$.fragment)},m(i,s){re(e,i,s),t=!0},i(i){t||(z(e.$$.fragment,i),t=!0)},o(i){G(e.$$.fragment,i),t=!1},d(i){oe(e,i)}}}function Ti(n){let e,t,i,s,r,o,a,l,c,p,g,h,m,d,f,v,w,S,x,E,D,M,N,P,I,T,L,A,B,U,j,W,X,K,$,R,q;return p=new ce({props:{icon:"lock",size:"medium"}}),x=new ce({props:{icon:"lock",size:"medium"}}),A=new ce({props:{icon:"lock",size:"medium"}}),j=new ce({props:{icon:"info",size:"medium"}}),{c(){e=b("div"),t=b("div"),i=b("div"),s=b("div"),s.innerHTML=`<input type="checkbox" checked="${!0}" disabled="${!0}" class="rounded border-[var(--background-modifier-border)] text-[var(--interactive-accent)] focus:ring-[var(--interactive-accent)] disabled:opacity-50 disabled:cursor-not-allowed" title="Base Entity properties are always enabled"/> <span class="font-medium text-[var(--text-default)]">type</span> <span class="text-[var(--text-muted)] text-sm">(string)</span> <span class="text-xs px-2 py-1 bg-[var(--background-modifier-border)] text-[var(--text-muted)] rounded font-bold uppercase tracking-wide ml-auto">SYSTEM</span>`,r=k(),o=b("div"),a=b("input"),l=k(),c=b("button"),le(p.$$.fragment),g=k(),h=b("div"),m=b("div"),m.innerHTML=`<input type="checkbox" checked="${!0}" disabled="${!0}" class="rounded border-[var(--background-modifier-border)] text-[var(--interactive-accent)] focus:ring-[var(--interactive-accent)] disabled:opacity-50 disabled:cursor-not-allowed" title="Base Entity properties are always enabled"/> <span class="font-medium text-[var(--text-default)]">tags</span> <span class="text-[var(--text-muted)] text-sm">(List[str])</span> <span class="text-xs px-2 py-1 bg-[var(--background-modifier-border)] text-[var(--text-muted)] rounded font-bold uppercase tracking-wide ml-auto">SYSTEM</span>`,d=k(),f=b("div"),v=b("input"),w=k(),S=b("button"),le(x.$$.fragment),E=k(),D=b("div"),M=b("div"),M.innerHTML=`<input type="checkbox" checked="${!0}" disabled="${!0}" class="rounded border-[var(--background-modifier-border)] text-[var(--interactive-accent)] focus:ring-[var(--interactive-accent)] disabled:opacity-50 disabled:cursor-not-allowed" title="Base Entity properties are always enabled"/> <span class="font-medium text-[var(--text-default)]">created</span> <span class="text-[var(--text-muted)] text-sm">(datetime)</span> <span class="text-xs px-2 py-1 bg-[var(--background-modifier-border)] text-[var(--text-muted)] rounded font-bold uppercase tracking-wide ml-auto">SYSTEM</span>`,N=k(),P=b("div"),I=b("input"),T=k(),L=b("button"),le(A.$$.fragment),B=k(),U=b("div"),le(j.$$.fragment),W=k(),X=b("strong"),X.textContent="Base Entity Properties:",K=V(` These core properties are inherited by all custom entity types and are always enabled.\r
                      `),$=b("br"),R=b("span"),R.textContent="All generated Pydantic models automatically include these foundational fields.",y(s,"class","flex items-center gap-2 flex-wrap"),y(a,"type","text"),a.value="Entity type identifier for classification and model selection",a.disabled=!0,y(a,"class","flex-1 px-3 py-2 border border-[var(--background-modifier-border)] rounded focus:outline-none focus:ring-2 focus:ring-[var(--interactive-accent)] focus:border-[var(--interactive-accent)] text-sm min-w-48 disabled:opacity-50 bg-[var(--background-modifier-border)]"),y(c,"class","px-2 py-2 bg-[var(--background-modifier-border)] border border-[var(--background-modifier-border)] rounded text-sm opacity-50 cursor-not-allowed"),y(c,"title","System properties cannot be edited"),c.disabled=!0,y(o,"class","flex items-center gap-2"),y(i,"class","flex flex-col gap-2 p-3 bg-[var(--background-secondary)] border border-[var(--background-modifier-border)] rounded-md"),y(m,"class","flex items-center gap-2 flex-wrap"),y(v,"type","text"),v.value="Tags and labels for categorization and organization",v.disabled=!0,y(v,"class","flex-1 px-3 py-2 border border-[var(--background-modifier-border)] rounded focus:outline-none focus:ring-2 focus:ring-[var(--interactive-accent)] focus:border-[var(--interactive-accent)] text-sm min-w-48 disabled:opacity-50 bg-[var(--background-modifier-border)]"),y(S,"class","px-2 py-2 bg-[var(--background-modifier-border)] border border-[var(--background-modifier-border)] rounded text-sm opacity-50 cursor-not-allowed"),y(S,"title","System properties cannot be edited"),S.disabled=!0,y(f,"class","flex items-center gap-2"),y(h,"class","flex flex-col gap-2 p-3 bg-[var(--background-secondary)] border border-[var(--background-modifier-border)] rounded-md"),y(M,"class","flex items-center gap-2 flex-wrap"),y(I,"type","text"),I.value="Timestamp when the entity was first created or discovered",I.disabled=!0,y(I,"class","flex-1 px-3 py-2 border border-[var(--background-modifier-border)] rounded focus:outline-none focus:ring-2 focus:ring-[var(--interactive-accent)] focus:border-[var(--interactive-accent)] text-sm min-w-48 disabled:opacity-50 bg-[var(--background-modifier-border)]"),y(L,"class","px-2 py-2 bg-[var(--background-modifier-border)] border border-[var(--background-modifier-border)] rounded text-sm opacity-50 cursor-not-allowed"),y(L,"title","System properties cannot be edited"),L.disabled=!0,y(P,"class","flex items-center gap-2"),y(D,"class","flex flex-col gap-2 p-3 bg-[var(--background-secondary)] border border-[var(--background-modifier-border)] rounded-md"),y(t,"class","flex flex-col gap-3"),y(R,"class","text-xs text-[var(--text-muted)]"),y(U,"class","mt-4 p-3 bg-[var(--background-modifier-border)] border border-[var(--background-modifier-border)] rounded text-sm leading-relaxed text-[var(--text-default)] flex items-center gap-2"),y(e,"class","p-4 bg-[var(--background-secondary-alt)]")},m(O,Y){Q(O,e,Y),u(e,t),u(t,i),u(i,s),u(i,r),u(i,o),u(o,a),u(o,l),u(o,c),re(p,c,null),u(t,g),u(t,h),u(h,m),u(h,d),u(h,f),u(f,v),u(f,w),u(f,S),re(x,S,null),u(t,E),u(t,D),u(D,M),u(D,N),u(D,P),u(P,I),u(P,T),u(P,L),re(A,L,null),u(e,B),u(e,U),re(j,U,null),u(U,W),u(U,X),u(U,K),u(U,$),u(U,R),q=!0},i(O){q||(z(p.$$.fragment,O),z(x.$$.fragment,O),z(A.$$.fragment,O),z(j.$$.fragment,O),q=!0)},o(O){G(p.$$.fragment,O),G(x.$$.fragment,O),G(A.$$.fragment,O),G(j.$$.fragment,O),q=!1},d(O){O&&J(e),oe(p),oe(x),oe(A),oe(j)}}}function xc(n){let e,t;return e=new ce({props:{icon:"chevron-right",size:"medium"}}),{c(){le(e.$$.fragment)},m(i,s){re(e,i,s),t=!0},i(i){t||(z(e.$$.fragment,i),t=!0)},o(i){G(e.$$.fragment,i),t=!1},d(i){oe(e,i)}}}function Ec(n){let e,t;return e=new ce({props:{icon:"chevron-down",size:"medium"}}),{c(){le(e.$$.fragment)},m(i,s){re(e,i,s),t=!0},i(i){t||(z(e.$$.fragment,i),t=!0)},o(i){G(e.$$.fragment,i),t=!1},d(i){oe(e,i)}}}function Mi(n){let e,t,i,s,r,o;function a(){return n[97](n[192])}function l(){return n[98](n[192])}return{c(){e=b("div"),t=b("button"),t.textContent="Select All",i=k(),s=b("button"),s.textContent="Deselect All",y(t,"class","px-2 py-1 text-xs bg-[var(--background-modifier-success)] text-[var(--text-success)] border border-green-300 rounded hover:bg-green-200 transition-colors duration-200"),y(t,"title","Enable all non-protected, non-ignored properties"),y(s,"class","px-2 py-1 text-xs bg-[var(--background-modifier-error)] text-[var(--text-error)] border border-[var(--background-modifier-error)] rounded hover:bg-[var(--background-modifier-error)] transition-colors duration-200"),y(s,"title","Disable all properties"),y(e,"class","flex gap-2 ml-4")},m(c,p){Q(c,e,p),u(e,t),u(e,i),u(e,s),r||(o=[ee(t,"click",ut(a)),ee(s,"click",ut(l))],r=!0)},p(c,p){n=c},d(c){c&&J(e),r=!1,$e(o)}}}function Ni(n){let e,t,i,s,r;const o=[kc,Cc],a=[];function l(p,g){return p[192].properties&&p[192].properties.length>0?0:1}t=l(n),i=a[t]=o[t](n);let c=n[192].properties&&n[192].properties.length>0&&Ui(n);return{c(){e=b("div"),i.c(),s=k(),c&&c.c(),y(e,"class","p-4")},m(p,g){Q(p,e,g),a[t].m(e,null),u(e,s),c&&c.m(e,null),r=!0},p(p,g){let h=t;t=l(p),t===h?a[t].p(p,g):(Ee(),G(a[h],1,1,()=>{a[h]=null}),Ce(),i=a[t],i?i.p(p,g):(i=a[t]=o[t](p),i.c()),z(i,1),i.m(e,s)),p[192].properties&&p[192].properties.length>0?c?(c.p(p,g),g[0]&1&&z(c,1)):(c=Ui(p),c.c(),z(c,1),c.m(e,null)):c&&(Ee(),G(c,1,1,()=>{c=null}),Ce())},i(p){r||(z(i),z(c),r=!0)},o(p){G(i),G(c),r=!1},d(p){p&&J(e),a[t].d(),c&&c.d()}}}function Cc(n){let e;return{c(){e=b("p"),e.textContent="No properties found for this entity type.",y(e,"class","text-[var(--text-muted)] italic text-center py-4")},m(t,i){Q(t,e,i)},p:fe,i:fe,o:fe,d(t){t&&J(e)}}}function kc(n){let e,t,i=ke(n[192].properties),s=[];for(let o=0;o<i.length;o+=1)s[o]=$i(vi(n,i,o));const r=o=>G(s[o],1,1,()=>{s[o]=null});return{c(){e=b("div");for(let o=0;o<s.length;o+=1)s[o].c();y(e,"class","flex flex-col gap-3")},m(o,a){Q(o,e,a);for(let l=0;l<s.length;l+=1)s[l]&&s[l].m(e,null);t=!0},p(o,a){if(a[0]&16777225|a[1]&768|a[2]&8319){i=ke(o[192].properties);let l;for(l=0;l<i.length;l+=1){const c=vi(o,i,l);s[l]?(s[l].p(c,a),z(s[l],1)):(s[l]=$i(c),s[l].c(),z(s[l],1),s[l].m(e,null))}for(Ee(),l=i.length;l<s.length;l+=1)r(l);Ce()}},i(o){if(!t){for(let a=0;a<i.length;a+=1)z(s[a]);t=!0}},o(o){s=s.filter(Boolean);for(let a=0;a<s.length;a+=1)G(s[a]);t=!1},d(o){o&&J(e),Ye(s,o)}}}function Ai(n){let e,t,i=n[202]+"",s,r;return{c(){e=b("span"),t=V("MAPPED FROM: "),s=V(i),y(e,"class","text-xs px-2 py-1 bg-[var(--background-modifier-border)] text-[var(--text-muted)] rounded font-medium"),y(e,"title",r="This property is the result of a mapping from: "+n[202])},m(o,a){Q(o,e,a),u(e,t),u(e,s)},p(o,a){a[0]&1&&i!==(i=o[202]+"")&&ne(s,i),a[0]&1&&r!==(r="This property is the result of a mapping from: "+o[202])&&y(e,"title",r)},d(o){o&&J(e)}}}function Oi(n){let e,t,i,s,r,o=n[203]?"Property Defined":"Property Not Defined",a,l,c,p,g;function h(){return n[100](n[192],n[197])}return{c(){e=b("label"),t=b("input"),s=k(),r=b("span"),a=V(o),y(t,"type","checkbox"),t.checked=i=n[203],y(t,"class","w-4 h-4 text-[var(--text-success)] bg-[var(--background-secondary)] border-[var(--background-modifier-border)] rounded focus:ring-[var(--text-success)] focus:ring-2"),y(r,"class",l="text-xs "+(n[203]?"text-[var(--text-success)]":"text-[var(--text-muted)]")),y(e,"class","flex items-center gap-1 cursor-pointer"),y(e,"title",c=n[203]?"Property defined in data.json - uncheck to remove definition":"Property not defined - check to add definition to data.json")},m(m,d){Q(m,e,d),u(e,t),u(e,s),u(e,r),u(r,a),p||(g=ee(t,"change",ut(h)),p=!0)},p(m,d){n=m,d[0]&16777217&&i!==(i=n[203])&&(t.checked=i),d[0]&16777217&&o!==(o=n[203]?"Property Defined":"Property Not Defined")&&ne(a,o),d[0]&16777217&&l!==(l="text-xs "+(n[203]?"text-[var(--text-success)]":"text-[var(--text-muted)]"))&&y(r,"class",l),d[0]&16777217&&c!==(c=n[203]?"Property defined in data.json - uncheck to remove definition":"Property not defined - check to add definition to data.json")&&y(e,"title",c)},d(m){m&&J(e),p=!1,g()}}}function Dc(n){let e;return{c(){e=b("span"),e.textContent="DISABLED",y(e,"class","text-xs px-2 py-1 bg-[var(--background-modifier-border)] text-[var(--text-muted)] rounded font-bold uppercase tracking-wide ml-auto")},m(t,i){Q(t,e,i)},d(t){t&&J(e)}}}function Pc(n){let e;return{c(){e=b("span"),e.textContent="ENABLED",y(e,"class","text-xs px-2 py-1 bg-[var(--background-modifier-success)] text-[var(--text-on-accent)] rounded font-bold uppercase tracking-wide ml-auto")},m(t,i){Q(t,e,i)},d(t){t&&J(e)}}}function Tc(n){let e;return{c(){e=b("span"),e.textContent="NAMING",y(e,"class","text-xs px-2 py-1 bg-[var(--background-modifier-warning)] text-[var(--text-on-accent)] rounded font-bold uppercase tracking-wide ml-auto")},m(t,i){Q(t,e,i)},d(t){t&&J(e)}}}function Mc(n){let e;return{c(){e=b("span"),e.textContent="IGNORED",y(e,"class","text-xs px-2 py-1 bg-[var(--background-modifier-border)] text-[var(--text-muted)] rounded font-bold uppercase tracking-wide ml-auto")},m(t,i){Q(t,e,i)},d(t){t&&J(e)}}}function Nc(n){let e;return{c(){e=b("span"),e.textContent="PROTECTED",y(e,"class","text-xs px-2 py-1 bg-[var(--background-modifier-error)] text-[var(--text-on-accent)] rounded font-bold uppercase tracking-wide ml-auto")},m(t,i){Q(t,e,i)},d(t){t&&J(e)}}}function Ii(n){let e,t,i,s,r,o;t=new ce({props:{icon:"download",size:"medium"}});function a(){return n[102](n[192],n[197])}return{c(){var l;e=b("button"),le(t.$$.fragment),y(e,"class","px-2 py-2 bg-[var(--background-modifier-success)] text-[var(--text-on-accent)] border border-[var(--background-modifier-border)] rounded hover:opacity-90 transition-colors duration-200 text-sm whitespace-nowrap"),y(e,"title",i="Load default description for "+((l=n[197])==null?void 0:l.name))},m(l,c){Q(l,e,c),re(t,e,null),s=!0,r||(o=ee(e,"click",a),r=!0)},p(l,c){var p;n=l,(!s||c[0]&1&&i!==(i="Load default description for "+((p=n[197])==null?void 0:p.name)))&&y(e,"title",i)},i(l){s||(z(t.$$.fragment,l),s=!0)},o(l){G(t.$$.fragment,l),s=!1},d(l){l&&J(e),oe(t),r=!1,o()}}}function Ac(n){let e,t,i,s,r,o;return t=new ce({props:{icon:"info",size:"medium"}}),{c(){e=b("div"),le(t.$$.fragment),i=k(),s=b("strong"),s.textContent="Property Disabled:",r=V(" This property is currently disabled and will not be included in the generated Pydantic model."),y(e,"class","mt-2 p-3 bg-[var(--background-secondary)] border border-[var(--background-modifier-border)] rounded text-sm leading-relaxed text-[var(--text-default)] flex items-center gap-2")},m(a,l){Q(a,e,l),re(t,e,null),u(e,i),u(e,s),u(e,r),o=!0},p:fe,i(a){o||(z(t.$$.fragment,a),o=!0)},o(a){G(t.$$.fragment,a),o=!1},d(a){a&&J(e),oe(t)}}}function Oc(n){var x;let e,t,i,s,r,o=n[197].namingIssues.join(", ")+"",a,l,c,p,g,h,m=(((x=n[197])==null?void 0:x.suggestedName)||"Suggestion")+"",d,f,v,w;i=new ce({props:{icon:"lightbulb"}});function S(){return n[103](n[196],n[205])}return{c(){e=b("div"),t=b("strong"),le(i.$$.fragment),s=V(" Naming Suggestion:"),r=k(),a=V(o),l=k(),c=b("br"),p=k(),g=b("button"),h=V("Apply: "),d=V(m),y(g,"class","mt-2 px-3 py-1 bg-[var(--background-modifier-warning)] text-[var(--text-on-accent)] rounded text-xs font-medium hover:opacity-90 transition-colors duration-200"),y(e,"class","mt-2 p-3 bg-orange-100 border border-orange-200 rounded text-sm leading-relaxed text-gray-900")},m(E,D){Q(E,e,D),u(e,t),re(i,t,null),u(t,s),u(e,r),u(e,a),u(e,l),u(e,c),u(e,p),u(e,g),u(g,h),u(g,d),f=!0,v||(w=ee(g,"click",S),v=!0)},p(E,D){var M;n=E,(!f||D[0]&1)&&o!==(o=n[197].namingIssues.join(", ")+"")&&ne(a,o),(!f||D[0]&1)&&m!==(m=(((M=n[197])==null?void 0:M.suggestedName)||"Suggestion")+"")&&ne(d,m)},i(E){f||(z(i.$$.fragment,E),f=!0)},o(E){G(i.$$.fragment,E),f=!1},d(E){E&&J(e),oe(i),v=!1,w()}}}function Ic(n){var c,p;let e,t,i,s,r,o,a=(((p=(c=n[3])==null?void 0:c.globallyIgnoredFields)==null?void 0:p.join(", "))||"none")+"",l;return{c(){e=b("div"),t=b("strong"),t.textContent="🚫 Globally Ignored Field:",i=V(` This property is in the globally ignored fields list and will be automatically excluded from Pydantic model generation.\r
                                  `),s=b("br"),r=b("span"),o=V("Globally ignored fields: "),l=V(a),y(r,"class","text-xs text-[var(--text-muted)]"),y(e,"class","mt-2 p-3 bg-[var(--background-modifier-border)] border border-[var(--background-modifier-border)] rounded text-sm leading-relaxed text-[var(--text-default)]")},m(g,h){Q(g,e,h),u(e,t),u(e,i),u(e,s),u(e,r),u(r,o),u(r,l)},p(g,h){var m,d;h[0]&8&&a!==(a=(((d=(m=g[3])==null?void 0:m.globallyIgnoredFields)==null?void 0:d.join(", "))||"none")+"")&&ne(l,a)},i:fe,o:fe,d(g){g&&J(e)}}}function Rc(n){var l;let e,t,i,s,r,o;t=new ce({props:{icon:"alert-triangle",size:"medium"}});let a=((l=n[197])==null?void 0:l.suggestedName)&&n[197].suggestedName!==n[197].name&&Ri(n);return{c(){e=b("div"),le(t.$$.fragment),i=k(),s=b("strong"),s.textContent="Protected Attribute:",r=V(` This is a reserved Graphiti attribute and cannot be used.\r
                                  `),a&&a.c(),y(e,"class","mt-2 p-3 bg-[var(--background-modifier-error)] border border-[var(--background-modifier-border)] rounded text-sm leading-relaxed text-[var(--text-on-accent)] flex items-center gap-2")},m(c,p){Q(c,e,p),re(t,e,null),u(e,i),u(e,s),u(e,r),a&&a.m(e,null),o=!0},p(c,p){var g;(g=c[197])!=null&&g.suggestedName&&c[197].suggestedName!==c[197].name?a?a.p(c,p):(a=Ri(c),a.c(),a.m(e,null)):a&&(a.d(1),a=null)},i(c){o||(z(t.$$.fragment,c),o=!0)},o(c){G(t.$$.fragment,c),o=!1},d(c){c&&J(e),oe(t),a&&a.d()}}}function Ri(n){let e,t,i,s=n[197].suggestedName+"",r;return{c(){e=b("br"),t=V("Consider using: "),i=b("code"),r=V(s),y(i,"class","bg-black/10 px-1 py-0.5 rounded font-mono text-xs")},m(o,a){Q(o,e,a),Q(o,t,a),Q(o,i,a),u(i,r)},p(o,a){a[0]&1&&s!==(s=o[197].suggestedName+"")&&ne(r,s)},d(o){o&&(J(e),J(t),J(i))}}}function Li(n){let e,t,i,s=n[197].examples.slice(0,3).join(", ")+"",r,o,a=n[197].examples.length>3&&Fi();return{c(){e=b("div"),t=b("strong"),t.textContent="Examples:",i=k(),r=V(s),o=k(),a&&a.c(),y(e,"class","text-xs text-[var(--text-muted)] italic mt-1")},m(l,c){Q(l,e,c),u(e,t),u(e,i),u(e,r),u(e,o),a&&a.m(e,null)},p(l,c){c[0]&1&&s!==(s=l[197].examples.slice(0,3).join(", ")+"")&&ne(r,s),l[197].examples.length>3?a||(a=Fi(),a.c(),a.m(e,null)):a&&(a.d(1),a=null)},d(l){l&&J(e),a&&a.d()}}}function Fi(n){let e;return{c(){e=V("...")},m(t,i){Q(t,e,i)},d(t){t&&J(e)}}}function $i(n){var Be,je,Ue,xe,Qe,rt;let e,t,i,s,r,o,a,l,c=(((Be=n[197])==null?void 0:Be.name)||"Unknown")+"",p,g,h,m,d,f=(((je=n[197])==null?void 0:je.inferredType)||"string")+"",v,w,S,x,E,D,M,N,P,I,T,L,A=n[39](((Ue=n[197])==null?void 0:Ue.name)||"")&&!((xe=n[197])!=null&&xe.isProtected)&&!n[198],B,U,j,W,X,K,$,R,q,O,Y,te;function Se(...he){return n[99](n[196],n[205],...he)}let be=n[201]&&Ai(n),me=!((Qe=n[197])!=null&&Qe.isProtected)&&!n[198]&&Oi(n);function De(he,ye){var Pe,Te;return(Pe=he[197])!=null&&Pe.isProtected?Nc:he[198]?Mc:((Te=he[197])==null?void 0:Te.complianceStatus)==="warning"?Tc:he[200]?Pc:Dc}let Re=De(n),ve=Re(n);function _e(...he){return n[101](n[196],n[205],...he)}let de=A&&Ii(n);j=new ce({props:{icon:"sparkles",size:"medium"}});const pe=[Rc,Ic,Oc,Ac],we=[];function Le(he,ye){var Pe,Te;return(Pe=he[197])!=null&&Pe.isProtected?0:he[198]?1:(Te=he[197])!=null&&Te.namingIssues&&he[197].namingIssues.length>0?2:he[200]?-1:3}~(X=Le(n))&&(K=we[X]=pe[X](n));let ge=((rt=n[197])==null?void 0:rt.examples)&&n[197].examples.length>0&&Li(n);return{c(){var he,ye,Pe,Te,Fe,Ne,Ze;e=b("div"),t=b("div"),i=b("input"),a=k(),l=b("span"),p=V(c),h=k(),m=b("span"),d=V("("),v=V(f),w=V(")"),S=k(),be&&be.c(),x=k(),me&&me.c(),E=k(),ve.c(),D=k(),M=b("div"),N=b("input"),L=k(),de&&de.c(),B=k(),U=b("button"),le(j.$$.fragment),W=k(),K&&K.c(),$=k(),ge&&ge.c(),R=k(),y(i,"type","checkbox"),i.checked=s=n[200]&&!n[198],i.disabled=r=((he=n[197])==null?void 0:he.isProtected)||n[198],y(i,"class","rounded border-[var(--background-modifier-border)] text-[var(--interactive-accent)] focus:ring-[var(--interactive-accent)] disabled:opacity-50 disabled:cursor-not-allowed"),y(i,"title",o=n[198]?"This property is globally ignored and cannot be enabled":(ye=n[197])!=null&&ye.isProtected?"Protected properties cannot be enabled":"Enable/disable this property for Pydantic model generation"),y(l,"class",g="font-medium text-[var(--text-default)] "+(n[198]?"text-[var(--text-muted)] line-through":"")),y(m,"class","text-[var(--text-muted)] text-sm"),y(t,"class","flex items-center gap-2 flex-wrap"),y(N,"type","text"),N.value=P=n[67](n[192].typeName,((Pe=n[197])==null?void 0:Pe.name)||"",((Te=n[197])==null?void 0:Te.description)||""),y(N,"placeholder","Property description"),y(N,"class",I="flex-1 px-3 py-2 border border-[var(--background-modifier-border)] rounded focus:outline-none focus:ring-2 focus:ring-[var(--interactive-accent)] focus:border-[var(--interactive-accent)] text-sm min-w-48 disabled:opacity-50 "+(n[198]?"bg-[var(--background-modifier-border)]":"")),N.disabled=T=((Fe=n[197])==null?void 0:Fe.isProtected)||n[198],y(U,"class","px-2 py-2 bg-[var(--background-modifier-border)] border border-[var(--background-modifier-border)] rounded text-sm opacity-50 cursor-not-allowed"),y(U,"title","LLM Suggest Description"),U.disabled=!0,y(M,"class","flex items-center gap-2"),y(e,"class",q="flex flex-col gap-2 p-3 bg-[var(--background-secondary)] border border-[var(--background-modifier-border)] rounded-md "+((Ne=n[197])!=null&&Ne.isProtected?"border-l-4 border-l-[var(--text-error)] bg-[var(--background-modifier-error)]":((Ze=n[197])==null?void 0:Ze.complianceStatus)==="warning"?"border-l-4 border-l-[var(--text-warning)] bg-[var(--background-modifier-warning)]":n[198]?"border-l-4 border-l-[var(--text-muted)] bg-[var(--background-modifier-border)]":""))},m(he,ye){Q(he,e,ye),u(e,t),u(t,i),u(t,a),u(t,l),u(l,p),u(t,h),u(t,m),u(m,d),u(m,v),u(m,w),u(t,S),be&&be.m(t,null),u(t,x),me&&me.m(t,null),u(t,E),ve.m(t,null),u(e,D),u(e,M),u(M,N),u(M,L),de&&de.m(M,null),u(M,B),u(M,U),re(j,U,null),u(e,W),~X&&we[X].m(e,null),u(e,$),ge&&ge.m(e,null),u(e,R),O=!0,Y||(te=[ee(i,"change",Se),ee(N,"input",_e)],Y=!0)},p(he,ye){var Te,Fe,Ne,Ze,nt,Ge,ae,Oe,Pt,ft,mt,Xe,$t;n=he,(!O||ye[0]&9&&s!==(s=n[200]&&!n[198]))&&(i.checked=s),(!O||ye[0]&9&&r!==(r=((Te=n[197])==null?void 0:Te.isProtected)||n[198]))&&(i.disabled=r),(!O||ye[0]&9&&o!==(o=n[198]?"This property is globally ignored and cannot be enabled":(Fe=n[197])!=null&&Fe.isProtected?"Protected properties cannot be enabled":"Enable/disable this property for Pydantic model generation"))&&y(i,"title",o),(!O||ye[0]&1)&&c!==(c=(((Ne=n[197])==null?void 0:Ne.name)||"Unknown")+"")&&ne(p,c),(!O||ye[0]&9&&g!==(g="font-medium text-[var(--text-default)] "+(n[198]?"text-[var(--text-muted)] line-through":"")))&&y(l,"class",g),(!O||ye[0]&1)&&f!==(f=(((Ze=n[197])==null?void 0:Ze.inferredType)||"string")+"")&&ne(v,f),n[201]?be?be.p(n,ye):(be=Ai(n),be.c(),be.m(t,x)):be&&(be.d(1),be=null),!((nt=n[197])!=null&&nt.isProtected)&&!n[198]?me?me.p(n,ye):(me=Oi(n),me.c(),me.m(t,E)):me&&(me.d(1),me=null),Re!==(Re=De(n))&&(ve.d(1),ve=Re(n),ve&&(ve.c(),ve.m(t,null))),(!O||ye[0]&1&&P!==(P=n[67](n[192].typeName,((Ge=n[197])==null?void 0:Ge.name)||"",((ae=n[197])==null?void 0:ae.description)||""))&&N.value!==P)&&(N.value=P),(!O||ye[0]&9&&I!==(I="flex-1 px-3 py-2 border border-[var(--background-modifier-border)] rounded focus:outline-none focus:ring-2 focus:ring-[var(--interactive-accent)] focus:border-[var(--interactive-accent)] text-sm min-w-48 disabled:opacity-50 "+(n[198]?"bg-[var(--background-modifier-border)]":"")))&&y(N,"class",I),(!O||ye[0]&9&&T!==(T=((Oe=n[197])==null?void 0:Oe.isProtected)||n[198]))&&(N.disabled=T),ye[0]&9&&(A=n[39](((Pt=n[197])==null?void 0:Pt.name)||"")&&!((ft=n[197])!=null&&ft.isProtected)&&!n[198]),A?de?(de.p(n,ye),ye[0]&9&&z(de,1)):(de=Ii(n),de.c(),z(de,1),de.m(M,B)):de&&(Ee(),G(de,1,1,()=>{de=null}),Ce());let Pe=X;X=Le(n),X===Pe?~X&&we[X].p(n,ye):(K&&(Ee(),G(we[Pe],1,1,()=>{we[Pe]=null}),Ce()),~X?(K=we[X],K?K.p(n,ye):(K=we[X]=pe[X](n),K.c()),z(K,1),K.m(e,$)):K=null),(mt=n[197])!=null&&mt.examples&&n[197].examples.length>0?ge?ge.p(n,ye):(ge=Li(n),ge.c(),ge.m(e,R)):ge&&(ge.d(1),ge=null),(!O||ye[0]&9&&q!==(q="flex flex-col gap-2 p-3 bg-[var(--background-secondary)] border border-[var(--background-modifier-border)] rounded-md "+((Xe=n[197])!=null&&Xe.isProtected?"border-l-4 border-l-[var(--text-error)] bg-[var(--background-modifier-error)]":(($t=n[197])==null?void 0:$t.complianceStatus)==="warning"?"border-l-4 border-l-[var(--text-warning)] bg-[var(--background-modifier-warning)]":n[198]?"border-l-4 border-l-[var(--text-muted)] bg-[var(--background-modifier-border)]":"")))&&y(e,"class",q)},i(he){O||(z(de),z(j.$$.fragment,he),z(K),O=!0)},o(he){G(de),G(j.$$.fragment,he),G(K),O=!1},d(he){he&&J(e),be&&be.d(),me&&me.d(),ve.d(),de&&de.d(),oe(j),~X&&we[X].d(),ge&&ge.d(),Y=!1,$e(te)}}}function Ui(n){let e,t,i,s;const r=[$c,Fc,Lc],o=[];function a(l,c){return l[193].length===0?0:l[193].length<l[194]?1:2}return e=a(n),t=o[e]=r[e](n),{c(){t.c(),i=oc()},m(l,c){o[e].m(l,c),Q(l,i,c),s=!0},p(l,c){let p=e;e=a(l),e===p?o[e].p(l,c):(Ee(),G(o[p],1,1,()=>{o[p]=null}),Ce(),t=o[e],t?t.p(l,c):(t=o[e]=r[e](l),t.c()),z(t,1),t.m(i.parentNode,i))},i(l){s||(z(t),s=!0)},o(l){G(t),s=!1},d(l){l&&J(i),o[e].d(l)}}}function Lc(n){let e,t,i,s,r,o=n[193].length+"",a,l,c=n[193].length===1?"y":"ies",p,g,h,m,d;return t=new ce({props:{icon:"check-circle",size:"medium"}}),{c(){e=b("div"),le(t.$$.fragment),i=k(),s=b("strong"),s.textContent="All Properties Enabled:",r=k(),a=V(o),l=V(" propert"),p=V(c),g=V(` ready for Pydantic model generation.\r
                            `),h=b("br"),m=b("span"),m.textContent="This entity type is fully configured and ready to use.",y(m,"class","text-xs text-[var(--text-muted)]"),y(e,"class","mt-4 p-3 bg-[var(--background-modifier-success)] border border-[var(--background-modifier-border)] rounded text-sm leading-relaxed text-[var(--text-on-accent)] flex items-center gap-2")},m(f,v){Q(f,e,v),re(t,e,null),u(e,i),u(e,s),u(e,r),u(e,a),u(e,l),u(e,p),u(e,g),u(e,h),u(e,m),d=!0},p(f,v){(!d||v[0]&9)&&o!==(o=f[193].length+"")&&ne(a,o),(!d||v[0]&9)&&c!==(c=f[193].length===1?"y":"ies")&&ne(p,c)},i(f){d||(z(t.$$.fragment,f),d=!0)},o(f){G(t.$$.fragment,f),d=!1},d(f){f&&J(e),oe(t)}}}function Fc(n){let e,t,i,s=n[193].length+"",r,o,a=n[194]+"",l,c,p,g,h=n[194]-n[193].length+"",m,d;return{c(){e=b("div"),t=b("strong"),t.textContent="[INFO] Partial Selection:",i=k(),r=V(s),o=V(" of "),l=V(a),c=V(` properties enabled for Pydantic model generation.\r
                            `),p=b("br"),g=b("span"),m=V(h),d=V(" properties will be excluded from the generated model."),y(g,"class","text-xs text-[var(--text-muted)]"),y(e,"class","mt-4 p-3 bg-[var(--background-secondary)] border border-[var(--background-modifier-border)] rounded text-sm leading-relaxed text-[var(--text-default)]")},m(f,v){Q(f,e,v),u(e,t),u(e,i),u(e,r),u(e,o),u(e,l),u(e,c),u(e,p),u(e,g),u(g,m),u(g,d)},p(f,v){v[0]&9&&s!==(s=f[193].length+"")&&ne(r,s),v[0]&1&&a!==(a=f[194]+"")&&ne(l,a),v[0]&9&&h!==(h=f[194]-f[193].length+"")&&ne(m,h)},i:fe,o:fe,d(f){f&&J(e)}}}function $c(n){let e,t,i,s,r,o,a,l;return t=new ce({props:{icon:"alert-triangle",size:"medium"}}),{c(){e=b("div"),le(t.$$.fragment),i=k(),s=b("strong"),s.textContent="No Properties Selected:",r=V(` This entity type has no enabled properties and will be excluded from Pydantic model generation.\r
                            `),o=b("br"),a=b("span"),a.textContent="Enable at least one property using the checkboxes above, or this entity type won't appear in generated models.",y(a,"class","text-xs text-[var(--text-muted)]"),y(e,"class","mt-4 p-3 bg-[var(--background-modifier-warning)] border border-[var(--background-modifier-border)] rounded text-sm leading-relaxed text-[var(--text-default)] flex items-center gap-2")},m(c,p){Q(c,e,p),re(t,e,null),u(e,i),u(e,s),u(e,r),u(e,o),u(e,a),l=!0},p:fe,i(c){l||(z(t.$$.fragment,c),l=!0)},o(c){G(t.$$.fragment,c),l=!1},d(c){c&&J(e),oe(t)}}}function Bi(n){let e,t,i,s,r,o=n[192].typeName+"",a,l,c,p,g,h,m,d=n[25][n[192].typeName]?"Entity Enabled":"Entity Disabled",f,v,w,S,x,E,D=n[193].length+"",M,N,P=n[194]+"",I,T,L,A,B,U,j,W,X=n[6].has(n[192].typeName),K,$,R=n[6].has(n[192].typeName),q,O,Y,te,Se;function be(){return n[95](n[192])}const me=[Ec,xc],De=[];function Re(pe,we){return we[0]&65&&(B=null),B==null&&(B=!!pe[6].has(pe[192].typeName)),B?0:1}U=Re(n,[-1,-1,-1,-1,-1,-1,-1]),j=De[U]=me[U](n);function ve(){return n[96](n[192])}let _e=X&&Mi(n),de=R&&Ni(n);return{c(){e=b("div"),t=b("div"),i=b("button"),s=b("div"),r=b("h4"),a=V(o),l=k(),c=b("label"),p=b("input"),h=k(),m=b("span"),f=V(d),S=k(),x=b("div"),E=b("span"),M=V(D),N=V(" of "),I=V(P),T=V(" enabled"),L=k(),A=b("span"),j.c(),W=k(),_e&&_e.c(),$=k(),de&&de.c(),q=k(),y(r,"class","font-semibold text-[var(--text-default)]"),y(p,"type","checkbox"),p.checked=g=!!n[25][n[192].typeName],y(p,"class","w-4 h-4 text-[var(--text-success)] bg-[var(--background-secondary)] border-[var(--background-modifier-border)] rounded focus:ring-[var(--text-success)] focus:ring-2"),y(m,"class",v="text-xs "+(n[25][n[192].typeName]?"text-[var(--text-success)]":"text-[var(--text-muted)]")),y(c,"class","flex items-center gap-1 cursor-pointer"),y(c,"title",w=n[25][n[192].typeName]?"Entity enabled in data.json - uncheck to disable":"Entity disabled - check to enable in data.json"),y(s,"class","flex items-center gap-3"),y(E,"class","text-xs text-[var(--text-muted)] bg-[var(--background-secondary)] px-2 py-1 rounded-full"),y(A,"class","text-lg text-[var(--text-muted)] font-bold ml-4"),y(x,"class","flex items-center gap-4"),y(i,"class","flex-1 flex justify-between items-center text-left cursor-pointer transition-colors duration-200 hover:opacity-90"),y(t,"class",K="flex justify-between items-center w-full p-4 bg-[var(--background-secondary)] border-none "+(n[6].has(n[192].typeName)?"border-b border-[var(--background-modifier-border)]":"")),y(e,"class","bg-[var(--background-secondary-alt)] border border-[var(--background-modifier-border)] rounded-lg overflow-hidden"),y(e,"id",O="accordion-"+n[192].typeName)},m(pe,we){Q(pe,e,we),u(e,t),u(t,i),u(i,s),u(s,r),u(r,a),u(s,l),u(s,c),u(c,p),u(c,h),u(c,m),u(m,f),u(i,S),u(i,x),u(x,E),u(E,M),u(E,N),u(E,I),u(E,T),u(x,L),u(x,A),De[U].m(A,null),u(t,W),_e&&_e.m(t,null),u(e,$),de&&de.m(e,null),u(e,q),Y=!0,te||(Se=[ee(p,"change",ut(be)),ee(i,"click",ve)],te=!0)},p(pe,we){n=pe,(!Y||we[0]&1)&&o!==(o=n[192].typeName+"")&&ne(a,o),(!Y||we[0]&33554433&&g!==(g=!!n[25][n[192].typeName]))&&(p.checked=g),(!Y||we[0]&33554433)&&d!==(d=n[25][n[192].typeName]?"Entity Enabled":"Entity Disabled")&&ne(f,d),(!Y||we[0]&33554433&&v!==(v="text-xs "+(n[25][n[192].typeName]?"text-[var(--text-success)]":"text-[var(--text-muted)]")))&&y(m,"class",v),(!Y||we[0]&33554433&&w!==(w=n[25][n[192].typeName]?"Entity enabled in data.json - uncheck to disable":"Entity disabled - check to enable in data.json"))&&y(c,"title",w),(!Y||we[0]&9)&&D!==(D=n[193].length+"")&&ne(M,D),(!Y||we[0]&1)&&P!==(P=n[194]+"")&&ne(I,P);let Le=U;U=Re(n,we),U!==Le&&(Ee(),G(De[Le],1,1,()=>{De[Le]=null}),Ce(),j=De[U],j||(j=De[U]=me[U](n),j.c()),z(j,1),j.m(A,null)),we[0]&65&&(X=n[6].has(n[192].typeName)),X?_e?_e.p(n,we):(_e=Mi(n),_e.c(),_e.m(t,null)):_e&&(_e.d(1),_e=null),(!Y||we[0]&65&&K!==(K="flex justify-between items-center w-full p-4 bg-[var(--background-secondary)] border-none "+(n[6].has(n[192].typeName)?"border-b border-[var(--background-modifier-border)]":"")))&&y(t,"class",K),we[0]&65&&(R=n[6].has(n[192].typeName)),R?de?(de.p(n,we),we[0]&65&&z(de,1)):(de=Ni(n),de.c(),z(de,1),de.m(e,q)):de&&(Ee(),G(de,1,1,()=>{de=null}),Ce()),(!Y||we[0]&1&&O!==(O="accordion-"+n[192].typeName))&&y(e,"id",O)},i(pe){Y||(z(j),z(de),Y=!0)},o(pe){G(j),G(de),Y=!1},d(pe){pe&&J(e),De[U].d(),_e&&_e.d(),de&&de.d(),te=!1,$e(Se)}}}function zi(n){let e,t,i,s,r,o,a,l,c,p,g,h=Object.keys(n[27]).length>0,m,d,f,v,w;s=new ce({props:{icon:"link-2"}});const S=[Bc,Uc],x=[];function E(I,T){return I[29]&&I[29].length>0?0:1}c=E(n),p=x[c]=S[c](n);let D=h&&Wi(n);const M=[qc,Gc],N=[];function P(I,T){return I[9]?0:1}return f=P(n),v=N[f]=M[f](n),{c(){e=b("div"),t=b("div"),i=b("h3"),le(s.$$.fragment),r=V(" Edge Types Management"),o=k(),a=b("p"),a.textContent="Define relationship types between entities with custom properties for Pydantic model generation.",l=k(),p.c(),g=k(),D&&D.c(),m=k(),d=b("div"),v.c(),y(i,"class","text-lg font-semibold mb-2 text-[var(--text-default)] flex items-center gap-2"),y(a,"class","text-[var(--text-muted)] mb-6"),y(d,"class","mt-6"),y(e,"class","animate-fadeIn")},m(I,T){Q(I,e,T),u(e,t),u(t,i),re(s,i,null),u(i,r),u(t,o),u(t,a),u(t,l),x[c].m(t,null),u(t,g),D&&D.m(t,null),u(t,m),u(t,d),N[f].m(d,null),w=!0},p(I,T){let L=c;c=E(I),c===L?x[c].p(I,T):(Ee(),G(x[L],1,1,()=>{x[L]=null}),Ce(),p=x[c],p?p.p(I,T):(p=x[c]=S[c](I),p.c()),z(p,1),p.m(t,g)),T[0]&134217728&&(h=Object.keys(I[27]).length>0),h?D?(D.p(I,T),T[0]&134217728&&z(D,1)):(D=Wi(I),D.c(),z(D,1),D.m(t,m)):D&&(Ee(),G(D,1,1,()=>{D=null}),Ce());let A=f;f=P(I),f===A?N[f].p(I,T):(Ee(),G(N[A],1,1,()=>{N[A]=null}),Ce(),v=N[f],v?v.p(I,T):(v=N[f]=M[f](I),v.c()),z(v,1),v.m(d,null))},i(I){w||(z(s.$$.fragment,I),z(p),z(D),z(v),w=!0)},o(I){G(s.$$.fragment,I),G(p),G(D),G(v),w=!1},d(I){I&&J(e),oe(s),x[c].d(),D&&D.d(),N[f].d()}}}function Uc(n){let e,t,i,s,r,o,a,l,c,p,g,h,m,d,f,v,w,S,x,E,D,M,N,P,I,T,L,A,B,U,j,W,X,K,$,R,q,O;return i=new ce({props:{icon:"link-2"}}),x=new ce({props:{icon:"sparkles"}}),P=new ce({props:{icon:"users"}}),B=new ce({props:{icon:"bar-chart-2"}}),K=new ce({props:{icon:"package"}}),{c(){e=b("div"),t=b("div"),le(i.$$.fragment),s=k(),r=b("h4"),r.textContent="No Edge Types Defined",o=k(),a=b("p"),a.textContent='Create relationship types like "WorksFor", "Uses", or "Creates" with custom properties.',l=k(),c=b("div"),p=b("h5"),p.textContent="Quick Add Common Types:",g=k(),h=b("div"),m=b("button"),m.innerHTML='<span class="text-base text-[var(--text-default)]">WorksFor</span>',d=k(),f=b("button"),f.innerHTML='<span class="text-base text-[var(--text-default)]">Uses</span>',v=k(),w=b("button"),S=b("span"),le(x.$$.fragment),E=V(" Creates"),D=k(),M=b("button"),N=b("span"),le(P.$$.fragment),I=V(" MemberOf"),T=k(),L=b("button"),A=b("span"),le(B.$$.fragment),U=V(" Manages"),j=k(),W=b("button"),X=b("span"),le(K.$$.fragment),$=V(" Contains"),y(t,"class","text-6xl mb-5 opacity-50"),y(r,"class","text-lg font-semibold mb-3 text-[var(--text-default)]"),y(a,"class","mb-10 max-w-lg mx-auto leading-relaxed text-[var(--text-muted)]"),y(p,"class","text-sm font-semibold mb-5 text-[var(--text-default)]"),y(m,"class","bg-[var(--background-secondary)] border border-[var(--background-modifier-border)] text-[var(--text-default)] px-4 py-3 rounded-lg cursor-pointer transition-all duration-200 hover:opacity-90 hover:border-[var(--interactive-accent)] hover:shadow-md flex items-center gap-2 text-sm font-medium"),y(f,"class","bg-[var(--background-secondary)] border border-[var(--background-modifier-border)] text-[var(--text-default)] px-4 py-3 rounded-lg cursor-pointer transition-all duration-200 hover:opacity-90 hover:border-[var(--interactive-accent)] hover:shadow-md flex items-center gap-2 text-sm font-medium"),y(S,"class","text-base text-[var(--text-default)]"),y(w,"class","bg-[var(--background-secondary)] border border-[var(--background-modifier-border)] text-[var(--text-default)] px-4 py-3 rounded-lg cursor-pointer transition-all duration-200 hover:opacity-90 hover:border-[var(--interactive-accent)] hover:shadow-md flex items-center gap-2 text-sm font-medium"),y(N,"class","text-base text-[var(--text-default)]"),y(M,"class","bg-[var(--background-secondary)] border border-[var(--background-modifier-border)] text-[var(--text-default)] px-4 py-3 rounded-lg cursor-pointer transition-all duration-200 hover:opacity-90 hover:border-[var(--interactive-accent)] hover:shadow-md flex items-center gap-2 text-sm font-medium"),y(A,"class","text-base text-[var(--text-default)]"),y(L,"class","bg-[var(--background-secondary)] border border-[var(--background-modifier-border)] text-[var(--text-default)] px-4 py-3 rounded-lg cursor-pointer transition-all duration-200 hover:opacity-90 hover:border-[var(--interactive-accent)] hover:shadow-md flex items-center gap-2 text-sm font-medium"),y(X,"class","text-base text-[var(--text-default)]"),y(W,"class","bg-[var(--background-secondary)] border border-[var(--background-modifier-border)] text-[var(--text-default)] px-4 py-3 rounded-lg cursor-pointer transition-all duration-200 hover:opacity-90 hover:border-[var(--interactive-accent)] hover:shadow-md flex items-center gap-2 text-sm font-medium"),y(h,"class","grid grid-cols-2 md:grid-cols-3 gap-3 max-w-2xl mx-auto"),y(c,"class","mt-10 pt-8 border-t border-[var(--background-modifier-border)]"),y(e,"class","text-center py-16 text-[var(--text-muted)]")},m(Y,te){Q(Y,e,te),u(e,t),re(i,t,null),u(e,s),u(e,r),u(e,o),u(e,a),u(e,l),u(e,c),u(c,p),u(c,g),u(c,h),u(h,m),u(h,d),u(h,f),u(h,v),u(h,w),u(w,S),re(x,S,null),u(w,E),u(h,D),u(h,M),u(M,N),re(P,N,null),u(M,I),u(h,T),u(h,L),u(L,A),re(B,A,null),u(L,U),u(h,j),u(h,W),u(W,X),re(K,X,null),u(W,$),R=!0,q||(O=[ee(m,"click",n[116]),ee(f,"click",n[117]),ee(w,"click",n[118]),ee(M,"click",n[119]),ee(L,"click",n[120]),ee(W,"click",n[121])],q=!0)},p:fe,i(Y){R||(z(i.$$.fragment,Y),z(x.$$.fragment,Y),z(P.$$.fragment,Y),z(B.$$.fragment,Y),z(K.$$.fragment,Y),R=!0)},o(Y){G(i.$$.fragment,Y),G(x.$$.fragment,Y),G(P.$$.fragment,Y),G(B.$$.fragment,Y),G(K.$$.fragment,Y),R=!1},d(Y){Y&&J(e),oe(i),oe(x),oe(P),oe(B),oe(K),q=!1,$e(O)}}}function Bc(n){let e,t,i=ke(n[29]),s=[];for(let o=0;o<i.length;o+=1)s[o]=qi(mi(n,i,o));const r=o=>G(s[o],1,1,()=>{s[o]=null});return{c(){e=b("div");for(let o=0;o<s.length;o+=1)s[o].c();y(e,"class","flex flex-col gap-4")},m(o,a){Q(o,e,a);for(let l=0;l<s.length;l+=1)s[l]&&s[l].m(e,null);t=!0},p(o,a){if(a[0]&536932418|a[1]&503809){i=ke(o[29]);let l;for(l=0;l<i.length;l+=1){const c=mi(o,i,l);s[l]?(s[l].p(c,a),z(s[l],1)):(s[l]=qi(c),s[l].c(),z(s[l],1),s[l].m(e,null))}for(Ee(),l=i.length;l<s.length;l+=1)r(l);Ce()}},i(o){if(!t){for(let a=0;a<i.length;a+=1)z(s[a]);t=!0}},o(o){s=s.filter(Boolean);for(let a=0;a<s.length;a+=1)G(s[a]);t=!1},d(o){o&&J(e),Ye(s,o)}}}function zc(n){let e,t;return e=new ce({props:{icon:"chevron-right",size:"medium"}}),{c(){le(e.$$.fragment)},m(i,s){re(e,i,s),t=!0},i(i){t||(z(e.$$.fragment,i),t=!0)},o(i){G(e.$$.fragment,i),t=!1},d(i){oe(e,i)}}}function jc(n){let e,t;return e=new ce({props:{icon:"chevron-down",size:"medium"}}),{c(){le(e.$$.fragment)},m(i,s){re(e,i,s),t=!0},i(i){t||(z(e.$$.fragment,i),t=!0)},o(i){G(e.$$.fragment,i),t=!1},d(i){oe(e,i)}}}function ji(n){let e,t,i,s,r,o,a,l,c,p,g,h,m,d,f,v,w,S,x,E,D,M;function N(...B){return n[107](n[182],...B)}m=new ce({props:{icon:"chevron-right",size:"medium"}});function P(){return n[108](n[182])}const I=[Yc,Vc],T=[];function L(B,U){var j;return U[0]&536870914&&(v=null),v==null&&(v=Object.keys(((j=B[1][B[182]])==null?void 0:j.properties)||{}).length>0),v?0:1}w=L(n,[-1,-1,-1,-1,-1,-1,-1]),S=T[w]=I[w](n);let A=n[12]===n[182]&&Gi(n);return{c(){e=b("div"),t=b("div"),i=b("strong"),i.textContent="Description:",s=k(),r=b("textarea"),a=k(),l=b("div"),c=b("div"),p=b("strong"),p.textContent="Properties:",g=k(),h=b("button"),le(m.$$.fragment),d=V(" Add Property"),f=k(),S.c(),x=k(),A&&A.c(),y(i,"class","text-sm text-[var(--text-default)] block mb-2"),r.value=o=n[44](n[182]),y(r,"class","w-full px-3 py-2 border border-[var(--background-modifier-border)] rounded focus:outline-none focus:ring-2 focus:ring-[var(--interactive-accent)] focus:border-[var(--interactive-accent)] text-sm leading-relaxed resize-vertical"),y(r,"placeholder","Describe this relationship type..."),y(r,"rows","2"),y(t,"class","mb-4"),y(p,"class","text-sm text-[var(--text-default)]"),y(h,"class","px-2 py-1 bg-[var(--background-modifier-border)] border border-[var(--background-modifier-border)] rounded text-xs hover:opacity-90 transition-colors duration-200"),y(c,"class","flex justify-between items-center mb-3"),y(e,"class","p-4")},m(B,U){Q(B,e,U),u(e,t),u(t,i),u(t,s),u(t,r),u(e,a),u(e,l),u(l,c),u(c,p),u(c,g),u(c,h),re(m,h,null),u(h,d),u(l,f),T[w].m(l,null),u(l,x),A&&A.m(l,null),E=!0,D||(M=[ee(r,"input",N),ee(h,"click",P)],D=!0)},p(B,U){n=B,(!E||U[0]&536870912&&o!==(o=n[44](n[182])))&&(r.value=o);let j=w;w=L(n,U),w===j?T[w].p(n,U):(Ee(),G(T[j],1,1,()=>{T[j]=null}),Ce(),S=T[w],S?S.p(n,U):(S=T[w]=I[w](n),S.c()),z(S,1),S.m(l,x)),n[12]===n[182]?A?A.p(n,U):(A=Gi(n),A.c(),A.m(l,null)):A&&(A.d(1),A=null)},i(B){E||(z(m.$$.fragment,B),z(S),E=!0)},o(B){G(m.$$.fragment,B),G(S),E=!1},d(B){B&&J(e),oe(m),T[w].d(),A&&A.d(),D=!1,$e(M)}}}function Vc(n){let e;return{c(){e=b("p"),e.textContent="No properties defined",y(e,"class","text-[var(--text-muted)] italic text-center py-2 text-sm")},m(t,i){Q(t,e,i)},p:fe,i:fe,o:fe,d(t){t&&J(e)}}}function Yc(n){let e,t,i=ke(Object.entries(n[1][n[182]].properties)),s=[];for(let o=0;o<i.length;o+=1)s[o]=Yi(yi(n,i,o));const r=o=>G(s[o],1,1,()=>{s[o]=null});return{c(){e=b("div");for(let o=0;o<s.length;o+=1)s[o].c();y(e,"class","flex flex-col gap-2")},m(o,a){Q(o,e,a);for(let l=0;l<s.length;l+=1)s[l]&&s[l].m(e,null);t=!0},p(o,a){if(a[0]&536870914|a[1]&196608){i=ke(Object.entries(o[1][o[182]].properties));let l;for(l=0;l<i.length;l+=1){const c=yi(o,i,l);s[l]?(s[l].p(c,a),z(s[l],1)):(s[l]=Yi(c),s[l].c(),z(s[l],1),s[l].m(e,null))}for(Ee(),l=i.length;l<s.length;l+=1)r(l);Ce()}},i(o){if(!t){for(let a=0;a<i.length;a+=1)z(s[a]);t=!0}},o(o){s=s.filter(Boolean);for(let a=0;a<s.length;a+=1)G(s[a]);t=!1},d(o){o&&J(e),Ye(s,o)}}}function Vi(n){let e;return{c(){e=b("span"),e.textContent="REQUIRED",y(e,"class","text-xs px-2 py-1 bg-[var(--background-modifier-warning)] text-[var(--text-on-accent)] rounded font-bold uppercase tracking-wide ml-auto")},m(t,i){Q(t,e,i)},d(t){t&&J(e)}}}function Yi(n){let e,t,i,s=n[188]+"",r,o,a,l,c=wt(n[189]).fieldType+"",p,g,h,m=wt(n[189]).required,d,f,v,w,S,x,E,D,M,N,P,I,T,L,A=m&&Vi();function B(...j){return n[109](n[182],n[188],...j)}E=new ce({props:{icon:"trash-2",size:"medium"}});function U(){return n[110](n[182],n[188])}return N=new ce({props:{icon:"sparkles"}}),{c(){e=b("div"),t=b("div"),i=b("span"),r=V(s),o=k(),a=b("span"),l=V("("),p=V(c),g=V(")"),h=k(),A&&A.c(),d=k(),f=b("div"),v=b("input"),S=k(),x=b("button"),le(E.$$.fragment),D=k(),M=b("button"),le(N.$$.fragment),P=k(),y(i,"class","font-medium text-[var(--text-default)]"),y(a,"class","text-[var(--text-muted)] text-sm"),y(t,"class","flex items-center gap-2 flex-wrap"),y(v,"type","text"),v.value=w=wt(n[189]).description,y(v,"placeholder","Property description"),y(v,"class","flex-1 px-3 py-2 border border-[var(--background-modifier-border)] rounded focus:outline-none focus:ring-2 focus:ring-[var(--interactive-accent)] focus:border-[var(--interactive-accent)] text-sm min-w-48"),y(x,"class","px-2 py-2 bg-[var(--background-modifier-error)] text-[var(--text-on-accent)] border border-[var(--background-modifier-border)] rounded hover:opacity-90 transition-colors duration-200"),y(M,"class","px-2 py-2 bg-[var(--background-modifier-border)] border border-[var(--background-modifier-border)] rounded text-sm opacity-50 cursor-not-allowed"),y(M,"title","LLM Suggest Description"),M.disabled=!0,y(f,"class","flex items-center gap-2"),y(e,"class","flex flex-col gap-2 p-3 bg-[var(--background-secondary)] border border-[var(--background-modifier-border)] rounded")},m(j,W){Q(j,e,W),u(e,t),u(t,i),u(i,r),u(t,o),u(t,a),u(a,l),u(a,p),u(a,g),u(t,h),A&&A.m(t,null),u(e,d),u(e,f),u(f,v),u(f,S),u(f,x),re(E,x,null),u(f,D),u(f,M),re(N,M,null),u(e,P),I=!0,T||(L=[ee(v,"input",B),ee(x,"click",U)],T=!0)},p(j,W){n=j,(!I||W[0]&536870914)&&s!==(s=n[188]+"")&&ne(r,s),(!I||W[0]&536870914)&&c!==(c=wt(n[189]).fieldType+"")&&ne(p,c),W[0]&536870914&&(m=wt(n[189]).required),m?A||(A=Vi(),A.c(),A.m(t,null)):A&&(A.d(1),A=null),(!I||W[0]&536870914&&w!==(w=wt(n[189]).description)&&v.value!==w)&&(v.value=w)},i(j){I||(z(E.$$.fragment,j),z(N.$$.fragment,j),I=!0)},o(j){G(E.$$.fragment,j),G(N.$$.fragment,j),I=!1},d(j){j&&J(e),A&&A.d(),oe(E),oe(N),T=!1,$e(L)}}}function Gi(n){let e,t,i,s,r,o,a,l,c,p,g,h,m,d,f,v,w,S,x,E,D;function M(){return n[114](n[182])}return{c(){e=b("div"),t=b("div"),i=b("input"),s=k(),r=b("select"),o=b("option"),o.textContent="String",a=b("option"),a.textContent="Integer",l=b("option"),l.textContent="DateTime",c=b("option"),c.textContent="Boolean",p=b("option"),p.textContent="Float",g=b("option"),g.textContent="List",h=k(),m=b("div"),d=b("input"),f=k(),v=b("div"),w=b("button"),w.textContent="Add Property",S=k(),x=b("button"),x.textContent="Cancel",y(i,"type","text"),y(i,"placeholder","Property name (e.g., jobTitle, sentiment)"),y(i,"class","flex-1 px-3 py-2 border border-[var(--background-modifier-border)] rounded focus:outline-none focus:ring-2 focus:ring-[var(--interactive-accent)] focus:border-[var(--interactive-accent)] text-sm"),o.__value="str",Ie(o,o.__value),a.__value="int",Ie(a,a.__value),l.__value="datetime",Ie(l,l.__value),c.__value="bool",Ie(c,c.__value),p.__value="float",Ie(p,p.__value),g.__value="List[str]",Ie(g,g.__value),y(r,"class","px-3 py-2 border border-[var(--background-modifier-border)] rounded focus:outline-none focus:ring-2 focus:ring-[var(--interactive-accent)] focus:border-[var(--interactive-accent)] text-sm bg-[var(--background-secondary)] appearance-none cursor-pointer hover:opacity-90 transition-colors duration-200 min-w-32"),n[14]===void 0&&pt(()=>n[112].call(r)),y(t,"class","flex gap-2 mb-3"),y(d,"type","text"),y(d,"placeholder","Property description"),y(d,"class","w-full px-3 py-2 border border-[var(--background-modifier-border)] rounded focus:outline-none focus:ring-2 focus:ring-[var(--interactive-accent)] focus:border-[var(--interactive-accent)] text-sm"),y(m,"class","mb-3"),y(w,"class","px-3 py-2 bg-[var(--interactive-accent)] text-[var(--text-on-accent)] rounded text-sm hover:opacity-90 transition-colors duration-200"),y(x,"class","px-3 py-2 bg-[var(--background-modifier-border)] text-[var(--text-default)] rounded text-sm hover:opacity-90 transition-colors duration-200"),y(v,"class","flex gap-2"),y(e,"class","mt-4 p-4 bg-[var(--background-secondary)] border border-[var(--background-modifier-border)] rounded")},m(N,P){Q(N,e,P),u(e,t),u(t,i),Ie(i,n[13]),u(t,s),u(t,r),u(r,o),u(r,a),u(r,l),u(r,c),u(r,p),u(r,g),et(r,n[14],!0),u(e,h),u(e,m),u(m,d),Ie(d,n[15]),u(e,f),u(e,v),u(v,w),u(v,S),u(v,x),E||(D=[ee(i,"input",n[111]),ee(r,"change",n[112]),ee(d,"input",n[113]),ee(w,"click",M),ee(x,"click",n[115])],E=!0)},p(N,P){n=N,P[0]&8192&&i.value!==n[13]&&Ie(i,n[13]),P[0]&16384&&et(r,n[14]),P[0]&32768&&d.value!==n[15]&&Ie(d,n[15])},d(N){N&&J(e),E=!1,$e(D)}}}function qi(n){var R;let e,t,i,s,r=n[182]+"",o,a,l,c,p=Object.keys(((R=n[1][n[182]])==null?void 0:R.properties)||{}).length+"",g,h,m,d,f,v,w,S,x,E,D,M,N,P=n[6].has(`edge-${n[182]}`),I,T,L,A,B;const U=[jc,zc],j=[];function W(q,O){return O[0]&536870976&&(f=null),f==null&&(f=!!q[6].has(`edge-${q[182]}`)),f?0:1}v=W(n,[-1,-1,-1,-1,-1,-1,-1]),w=j[v]=U[v](n);function X(){return n[105](n[182])}E=new ce({props:{icon:"trash-2",size:"medium"}});function K(){return n[106](n[182])}let $=P&&ji(n);return{c(){e=b("div"),t=b("div"),i=b("button"),s=b("h4"),o=V(r),a=k(),l=b("div"),c=b("span"),g=V(p),h=V(" properties"),m=k(),d=b("span"),w.c(),S=k(),x=b("button"),le(E.$$.fragment),N=k(),$&&$.c(),I=k(),y(s,"class","font-semibold text-[var(--text-default)]"),y(c,"class","text-xs text-[var(--text-muted)] bg-[var(--background-modifier-border)] px-2 py-1 rounded-full"),y(d,"class","text-lg text-[var(--text-muted)] font-bold ml-4"),y(l,"class","flex items-center gap-4"),y(i,"class","flex-1 flex justify-between items-center text-left cursor-pointer transition-colors duration-200 hover:opacity-90"),y(x,"class","ml-2 px-2 py-1 bg-[var(--background-modifier-error)] text-[var(--text-on-accent)] border border-[var(--background-modifier-border)] rounded hover:opacity-90 transition-colors duration-200 text-xs"),y(x,"title",D="Delete "+n[182]+" edge type"),y(t,"class",M="flex justify-between items-center w-full p-4 bg-[var(--background-secondary)] border-none "+(n[6].has(`edge-${n[182]}`)?"border-b border-[var(--background-modifier-border)]":"")),y(e,"class","bg-[var(--background-secondary-alt)] border border-[var(--background-modifier-border)] rounded-lg overflow-hidden"),y(e,"id",T="accordion-edge-"+n[182])},m(q,O){Q(q,e,O),u(e,t),u(t,i),u(i,s),u(s,o),u(i,a),u(i,l),u(l,c),u(c,g),u(c,h),u(l,m),u(l,d),j[v].m(d,null),u(t,S),u(t,x),re(E,x,null),u(e,N),$&&$.m(e,null),u(e,I),L=!0,A||(B=[ee(i,"click",X),ee(x,"click",ut(K))],A=!0)},p(q,O){var te;n=q,(!L||O[0]&536870912)&&r!==(r=n[182]+"")&&ne(o,r),(!L||O[0]&536870914)&&p!==(p=Object.keys(((te=n[1][n[182]])==null?void 0:te.properties)||{}).length+"")&&ne(g,p);let Y=v;v=W(n,O),v!==Y&&(Ee(),G(j[Y],1,1,()=>{j[Y]=null}),Ce(),w=j[v],w||(w=j[v]=U[v](n),w.c()),z(w,1),w.m(d,null)),(!L||O[0]&536870912&&D!==(D="Delete "+n[182]+" edge type"))&&y(x,"title",D),(!L||O[0]&536870976&&M!==(M="flex justify-between items-center w-full p-4 bg-[var(--background-secondary)] border-none "+(n[6].has(`edge-${n[182]}`)?"border-b border-[var(--background-modifier-border)]":"")))&&y(t,"class",M),O[0]&536870976&&(P=n[6].has(`edge-${n[182]}`)),P?$?($.p(n,O),O[0]&536870976&&z($,1)):($=ji(n),$.c(),z($,1),$.m(e,I)):$&&(Ee(),G($,1,1,()=>{$=null}),Ce()),(!L||O[0]&536870912&&T!==(T="accordion-edge-"+n[182]))&&y(e,"id",T)},i(q){L||(z(w),z(E.$$.fragment,q),z($),L=!0)},o(q){G(w),G(E.$$.fragment,q),G($),L=!1},d(q){q&&J(e),j[v].d(),oe(E),$&&$.d(),A=!1,$e(B)}}}function Wi(n){let e,t,i,s,r,o,a,l,c,p,g,h,m,d;s=new ce({props:{icon:"clipboard-list"}});let f=ke(Object.entries(n[27])),v=[];for(let S=0;S<f.length;S+=1)v[S]=Ki(fi(n,f,S));const w=S=>G(v[S],1,1,()=>{v[S]=null});return{c(){e=b("div"),t=b("div"),i=b("h4"),le(s.$$.fragment),r=V(" Available Default Edge Types"),o=k(),a=b("button"),a.textContent="Add All",l=k(),c=b("p"),c.textContent="Common edge types you can add with one click. These include standard properties and descriptions.",p=k(),g=b("div");for(let S=0;S<v.length;S+=1)v[S].c();y(i,"class","text-lg font-semibold text-[var(--text-default)] flex items-center gap-2"),y(a,"class","px-3 py-2 bg-[var(--interactive-accent)] text-[var(--text-on-accent)] rounded hover:opacity-90 transition-colors duration-200 text-sm font-medium"),y(a,"title","Add all unused default edge types at once"),y(t,"class","flex justify-between items-center mb-4"),y(c,"class","text-[var(--text-muted)] mb-4"),y(g,"class","grid grid-cols-1 md:grid-cols-2 gap-3"),y(e,"class","mt-8 pt-8 border-t border-[var(--background-modifier-border)]")},m(S,x){Q(S,e,x),u(e,t),u(t,i),re(s,i,null),u(i,r),u(t,o),u(t,a),u(e,l),u(e,c),u(e,p),u(e,g);for(let E=0;E<v.length;E+=1)v[E]&&v[E].m(g,null);h=!0,m||(d=ee(a,"click",n[55]),m=!0)},p(S,x){if(x[0]&134217728|x[1]&16384){f=ke(Object.entries(S[27]));let E;for(E=0;E<f.length;E+=1){const D=fi(S,f,E);v[E]?(v[E].p(D,x),z(v[E],1)):(v[E]=Ki(D),v[E].c(),z(v[E],1),v[E].m(g,null))}for(Ee(),E=f.length;E<v.length;E+=1)w(E);Ce()}},i(S){if(!h){z(s.$$.fragment,S);for(let x=0;x<f.length;x+=1)z(v[x]);h=!0}},o(S){G(s.$$.fragment,S),v=v.filter(Boolean);for(let x=0;x<v.length;x+=1)G(v[x]);h=!1},d(S){S&&J(e),oe(s),Ye(v,S),m=!1,d()}}}function Ki(n){let e,t,i,s=n[182]+"",r,o,a,l,c,p,g,h,m=n[183]+"",d,f,v,w,S;l=new ce({props:{icon:"chevron-right",size:"medium"}});function x(){return n[122](n[182])}return{c(){e=b("div"),t=b("div"),i=b("h5"),r=V(s),o=k(),a=b("button"),le(l.$$.fragment),c=V(" Add"),g=k(),h=b("p"),d=V(m),f=k(),y(i,"class","font-semibold text-[var(--text-default)]"),y(a,"class","px-2 py-1 bg-[var(--interactive-accent)] text-[var(--text-on-accent)] rounded text-xs hover:opacity-90 transition-colors duration-200"),y(a,"title",p="Add "+n[182]+" edge type"),y(t,"class","flex justify-between items-start mb-2"),y(h,"class","text-[var(--text-muted)] text-sm leading-relaxed"),y(e,"class","bg-[var(--background-secondary)] border border-[var(--background-modifier-border)] p-4 rounded-lg")},m(E,D){Q(E,e,D),u(e,t),u(t,i),u(i,r),u(t,o),u(t,a),re(l,a,null),u(a,c),u(e,g),u(e,h),u(h,d),u(e,f),v=!0,w||(S=ee(a,"click",x),w=!0)},p(E,D){n=E,(!v||D[0]&134217728)&&s!==(s=n[182]+"")&&ne(r,s),(!v||D[0]&134217728&&p!==(p="Add "+n[182]+" edge type"))&&y(a,"title",p),(!v||D[0]&134217728)&&m!==(m=n[183]+"")&&ne(d,m)},i(E){v||(z(l.$$.fragment,E),v=!0)},o(E){G(l.$$.fragment,E),v=!1},d(E){E&&J(e),oe(l),w=!1,S()}}}function Gc(n){let e,t,i,s,r,o;return t=new ce({props:{icon:"chevron-right",size:"medium"}}),{c(){e=b("button"),le(t.$$.fragment),i=V(" Add Edge Type"),y(e,"class","px-4 py-2 bg-[var(--interactive-accent)] text-[var(--text-on-accent)] rounded hover:opacity-90 transition-colors duration-200")},m(a,l){Q(a,e,l),re(t,e,null),u(e,i),s=!0,r||(o=ee(e,"click",n[125]),r=!0)},p:fe,i(a){s||(z(t.$$.fragment,a),s=!0)},o(a){G(t.$$.fragment,a),s=!1},d(a){a&&J(e),oe(t),r=!1,o()}}}function qc(n){let e,t,i,s,r,o,a,l,c,p,g,h,m,d,f;return{c(){e=b("div"),t=b("h4"),t.textContent="Add New Edge Type",i=k(),s=b("div"),r=b("input"),o=k(),a=b("div"),l=b("textarea"),c=k(),p=b("div"),g=b("button"),g.textContent="Save Edge Type",h=k(),m=b("button"),m.textContent="Cancel",y(t,"class","text-lg font-semibold mb-4 text-[var(--text-default)]"),y(r,"type","text"),y(r,"placeholder","Edge type name (e.g., WorksFor, Uses, Creates)"),y(r,"class","w-full px-3 py-2 border border-[var(--background-modifier-border)] rounded focus:outline-none focus:ring-2 focus:ring-[var(--interactive-accent)] focus:border-[var(--interactive-accent)] text-sm"),y(s,"class","mb-4"),y(l,"placeholder","Description of this relationship type"),y(l,"class","w-full px-3 py-2 border border-[var(--background-modifier-border)] rounded focus:outline-none focus:ring-2 focus:ring-[var(--interactive-accent)] focus:border-[var(--interactive-accent)] text-sm leading-relaxed resize-vertical"),y(l,"rows","2"),y(a,"class","mb-4"),y(g,"class","px-4 py-2 bg-[var(--interactive-accent)] text-[var(--text-on-accent)] rounded hover:opacity-90 transition-colors duration-200"),y(m,"class","px-4 py-2 bg-[var(--background-modifier-border)] text-[var(--text-default)] rounded hover:opacity-90 transition-colors duration-200"),y(p,"class","flex gap-2"),y(e,"class","bg-[var(--background-secondary-alt)] border border-[var(--background-modifier-border)] rounded-lg p-6")},m(v,w){Q(v,e,w),u(e,t),u(e,i),u(e,s),u(s,r),Ie(r,n[10]),u(e,o),u(e,a),u(a,l),Ie(l,n[11]),u(e,c),u(e,p),u(p,g),u(p,h),u(p,m),d||(f=[ee(r,"input",n[123]),ee(l,"input",n[124]),ee(g,"click",n[41]),ee(m,"click",n[42])],d=!0)},p(v,w){w[0]&1024&&r.value!==v[10]&&Ie(r,v[10]),w[0]&2048&&Ie(l,v[11])},i:fe,o:fe,d(v){v&&J(e),d=!1,$e(f)}}}function Hi(n){let e,t,i,s,r,o,a,l,c,p,g,h,m,d,f,v;s=new ce({props:{icon:"map"}});const w=[Kc,Wc],S=[];function x(P,I){return P[2]&&P[2].length>0?0:1}c=x(n),p=S[c]=w[c](n);let E=n[26].length>0&&ts(n);const D=[ed,Xc],M=[];function N(P,I){return P[16]?0:1}return d=N(n),f=M[d]=D[d](n),{c(){e=b("div"),t=b("div"),i=b("h3"),le(s.$$.fragment),r=V(" Edge Type Mappings"),o=k(),a=b("p"),a.textContent="Define which edge types can connect which entity types. Controls relationship validation in your knowledge graph.",l=k(),p.c(),g=k(),E&&E.c(),h=k(),m=b("div"),f.c(),y(i,"class","text-lg font-semibold mb-2 flex items-center gap-2"),y(a,"class","mb-6"),y(m,"class","mt-6"),y(e,"class","animate-fadeIn")},m(P,I){Q(P,e,I),u(e,t),u(t,i),re(s,i,null),u(i,r),u(t,o),u(t,a),u(t,l),S[c].m(t,null),u(t,g),E&&E.m(t,null),u(t,h),u(t,m),M[d].m(m,null),v=!0},p(P,I){let T=c;c=x(P),c===T?S[c].p(P,I):(Ee(),G(S[T],1,1,()=>{S[T]=null}),Ce(),p=S[c],p?p.p(P,I):(p=S[c]=w[c](P),p.c()),z(p,1),p.m(t,g)),P[26].length>0?E?(E.p(P,I),I[0]&67108864&&z(E,1)):(E=ts(P),E.c(),z(E,1),E.m(t,h)):E&&(Ee(),G(E,1,1,()=>{E=null}),Ce());let L=d;d=N(P),d===L?M[d].p(P,I):(Ee(),G(M[L],1,1,()=>{M[L]=null}),Ce(),f=M[d],f?f.p(P,I):(f=M[d]=D[d](P),f.c()),z(f,1),f.m(m,null))},i(P){v||(z(s.$$.fragment,P),z(p),z(E),z(f),v=!0)},o(P){G(s.$$.fragment,P),G(p),G(E),G(f),v=!1},d(P){P&&J(e),oe(s),S[c].d(),E&&E.d(),M[d].d()}}}function Wc(n){let e,t,i,s,r,o,a,l,c,p,g,h,m,d,f,v,w,S,x,E,D,M,N,P,I,T,L,A,B,U,j,W,X,K,$,R,q,O,Y,te,Se,be,me,De,Re,ve,_e,de;return i=new ce({props:{icon:"map"}}),f=new ce({props:{icon:"user"}}),w=new ce({props:{icon:"monitor"}}),P=new ce({props:{icon:"user"}}),T=new ce({props:{icon:"folder"}}),X=new ce({props:{icon:"link-2"}}),te=new ce({props:{icon:"folder"}}),be=new ce({props:{icon:"monitor"}}),{c(){e=b("div"),t=b("div"),le(i.$$.fragment),s=k(),r=b("h4"),r.textContent="No Edge Mappings Defined",o=k(),a=b("p"),a.textContent="Create mappings to define which relationships can exist between entity types.",l=k(),c=b("div"),p=b("h5"),p.textContent="Quick Add Common Mappings:",g=k(),h=b("div"),m=b("button"),d=b("div"),le(f.$$.fragment),v=V(" Person → "),le(w.$$.fragment),S=V(" Technology"),x=k(),E=b("div"),E.textContent="Uses, RelatesTo",D=k(),M=b("button"),N=b("div"),le(P.$$.fragment),I=V(" Person → "),le(T.$$.fragment),L=V(" Project"),A=k(),B=b("div"),B.textContent="WorksOn, Manages, RelatesTo",U=k(),j=b("button"),W=b("div"),le(X.$$.fragment),K=V(" Entity → Entity"),$=k(),R=b("div"),R.textContent="RelatesTo (Generic)",q=k(),O=b("button"),Y=b("div"),le(te.$$.fragment),Se=V(" Project → "),le(be.$$.fragment),me=V(" Technology"),De=k(),Re=b("div"),Re.textContent="Uses, DependsOn, RelatesTo",y(t,"class","text-6xl mb-5 opacity-50"),y(r,"class","text-lg font-semibold mb-3 text-[var(--text-default)]"),y(a,"class","mb-10 max-w-lg mx-auto leading-relaxed text-[var(--text-muted)]"),y(p,"class","text-sm font-semibold mb-5 text-[var(--text-default)]"),y(d,"class","font-semibold mb-1 text-[var(--text-default)]"),y(E,"class","text-xs text-[var(--text-muted)]"),y(m,"class","bg-[var(--background-secondary)] border border-[var(--background-modifier-border)] text-[var(--text-default)] p-4 rounded-lg cursor-pointer transition-all duration-200 hover:opacity-90 hover:border-[var(--interactive-accent)] hover:shadow-md text-sm font-medium"),y(N,"class","font-semibold mb-1 text-[var(--text-default)]"),y(B,"class","text-xs text-[var(--text-muted)]"),y(M,"class","bg-[var(--background-secondary)] border border-[var(--background-modifier-border)] text-[var(--text-default)] p-4 rounded-lg cursor-pointer transition-all duration-200 hover:opacity-90 hover:border-[var(--interactive-accent)] hover:shadow-md text-sm font-medium"),y(W,"class","font-semibold mb-1 text-[var(--text-default)]"),y(R,"class","text-xs text-[var(--text-muted)]"),y(j,"class","bg-[var(--background-secondary)] border border-[var(--background-modifier-border)] text-[var(--text-default)] p-4 rounded-lg cursor-pointer transition-all duration-200 hover:opacity-90 hover:border-[var(--interactive-accent)] hover:shadow-md text-sm font-medium"),y(Y,"class","font-semibold mb-1 text-[var(--text-default)]"),y(Re,"class","text-xs text-[var(--text-muted)]"),y(O,"class","bg-[var(--background-secondary)] border border-[var(--background-modifier-border)] text-[var(--text-default)] p-4 rounded-lg cursor-pointer transition-all duration-200 hover:opacity-90 hover:border-[var(--interactive-accent)] hover:shadow-md text-sm font-medium"),y(h,"class","grid grid-cols-1 md:grid-cols-2 gap-3 max-w-2xl mx-auto"),y(c,"class","mt-10 pt-8 border-t border-[var(--background-modifier-border)]"),y(e,"class","text-center py-16 text-[var(--text-muted)]")},m(pe,we){Q(pe,e,we),u(e,t),re(i,t,null),u(e,s),u(e,r),u(e,o),u(e,a),u(e,l),u(e,c),u(c,p),u(c,g),u(c,h),u(h,m),u(m,d),re(f,d,null),u(d,v),re(w,d,null),u(d,S),u(m,x),u(m,E),u(h,D),u(h,M),u(M,N),re(P,N,null),u(N,I),re(T,N,null),u(N,L),u(M,A),u(M,B),u(h,U),u(h,j),u(j,W),re(X,W,null),u(W,K),u(j,$),u(j,R),u(h,q),u(h,O),u(O,Y),re(te,Y,null),u(Y,Se),re(be,Y,null),u(Y,me),u(O,De),u(O,Re),ve=!0,_e||(de=[ee(m,"click",n[131]),ee(M,"click",n[132]),ee(j,"click",n[133]),ee(O,"click",n[134])],_e=!0)},p:fe,i(pe){ve||(z(i.$$.fragment,pe),z(f.$$.fragment,pe),z(w.$$.fragment,pe),z(P.$$.fragment,pe),z(T.$$.fragment,pe),z(X.$$.fragment,pe),z(te.$$.fragment,pe),z(be.$$.fragment,pe),ve=!0)},o(pe){G(i.$$.fragment,pe),G(f.$$.fragment,pe),G(w.$$.fragment,pe),G(P.$$.fragment,pe),G(T.$$.fragment,pe),G(X.$$.fragment,pe),G(te.$$.fragment,pe),G(be.$$.fragment,pe),ve=!1},d(pe){pe&&J(e),oe(i),oe(f),oe(w),oe(P),oe(T),oe(X),oe(te),oe(be),_e=!1,$e(de)}}}function Kc(n){let e,t,i=ke(n[2]),s=[];for(let o=0;o<i.length;o+=1)s[o]=es(di(n,i,o));const r=o=>G(s[o],1,1,()=>{s[o]=null});return{c(){e=b("div");for(let o=0;o<s.length;o+=1)s[o].c();y(e,"class","flex flex-col gap-4")},m(o,a){Q(o,e,a);for(let l=0;l<s.length;l+=1)s[l]&&s[l].m(e,null);t=!0},p(o,a){if(a[0]&821035012|a[1]&1008730112){i=ke(o[2]);let l;for(l=0;l<i.length;l+=1){const c=di(o,i,l);s[l]?(s[l].p(c,a),z(s[l],1)):(s[l]=es(c),s[l].c(),z(s[l],1),s[l].m(e,null))}for(Ee(),l=i.length;l<s.length;l+=1)r(l);Ce()}},i(o){if(!t){for(let a=0;a<i.length;a+=1)z(s[a]);t=!0}},o(o){s=s.filter(Boolean);for(let a=0;a<s.length;a+=1)G(s[a]);t=!1},d(o){o&&J(e),Ye(s,o)}}}function Hc(n){let e,t,i,s,r,o=n[171].sourceEntity+"",a,l,c,p,g,h=n[171].targetEntity+"",m,d,f,v,w,S,x=n[171].isUserDefined?"User":"Auto",E,D,M,N,P,I,T,L,A,B,U=ke(n[171].allowedEdges),j=[];for(let K=0;K<U.length;K+=1)j[K]=Ji(ui(n,U,K));N=new ce({props:{icon:"pencil",size:"medium"}});function W(){return n[129](n[173])}T=new ce({props:{icon:"trash-2",size:"medium"}});function X(){return n[130](n[173])}return{c(){e=b("div"),t=b("div"),i=b("div"),s=b("div"),r=b("span"),a=V(o),l=k(),c=b("span"),c.textContent="→",p=k(),g=b("span"),m=V(h),d=k(),f=b("div");for(let K=0;K<j.length;K+=1)j[K].c();v=k(),w=b("div"),S=b("span"),E=V(x),D=k(),M=b("button"),le(N.$$.fragment),P=k(),I=b("button"),le(T.$$.fragment),y(r,"class","font-semibold text-[var(--text-default)]"),y(c,"class","text-[var(--text-muted)]"),y(g,"class","font-semibold text-[var(--text-default)]"),y(s,"class","flex items-center gap-2"),y(f,"class","flex gap-1 flex-wrap"),y(i,"class","flex items-center gap-4"),y(S,"class","text-xs text-[var(--text-muted)] bg-[var(--background-modifier-border)] px-2 py-1 rounded-full"),y(M,"class","p-1 text-[var(--text-muted)] hover:opacity-90 hover:bg-[var(--background-modifier-border)] rounded transition-all duration-200"),y(M,"title","Edit Mapping"),y(I,"class","px-2 py-1 bg-[var(--background-modifier-error)] text-[var(--text-on-accent)] border border-[var(--background-modifier-border)] rounded hover:opacity-90 transition-colors duration-200 text-xs"),y(w,"class","flex items-center gap-2"),y(t,"class","flex justify-between items-center"),y(e,"class","p-4 bg-[var(--background-secondary-alt)] border-none")},m(K,$){Q(K,e,$),u(e,t),u(t,i),u(i,s),u(s,r),u(r,a),u(s,l),u(s,c),u(s,p),u(s,g),u(g,m),u(i,d),u(i,f);for(let R=0;R<j.length;R+=1)j[R]&&j[R].m(f,null);u(t,v),u(t,w),u(w,S),u(S,E),u(w,D),u(w,M),re(N,M,null),u(w,P),u(w,I),re(T,I,null),L=!0,A||(B=[ee(M,"click",W),ee(I,"click",X)],A=!0)},p(K,$){if(n=K,(!L||$[0]&4)&&o!==(o=n[171].sourceEntity+"")&&ne(a,o),(!L||$[0]&4)&&h!==(h=n[171].targetEntity+"")&&ne(m,h),$[0]&4){U=ke(n[171].allowedEdges);let R;for(R=0;R<U.length;R+=1){const q=ui(n,U,R);j[R]?j[R].p(q,$):(j[R]=Ji(q),j[R].c(),j[R].m(f,null))}for(;R<j.length;R+=1)j[R].d(1);j.length=U.length}(!L||$[0]&4)&&x!==(x=n[171].isUserDefined?"User":"Auto")&&ne(E,x)},i(K){L||(z(N.$$.fragment,K),z(T.$$.fragment,K),L=!0)},o(K){G(N.$$.fragment,K),G(T.$$.fragment,K),L=!1},d(K){K&&J(e),Ye(j,K),oe(N),oe(T),A=!1,$e(B)}}}function Jc(n){let e,t,i,s,r,o,a,l,c,p,g,h,m,d,f,v,w,S,x,E,D,M,N,P,I,T,L,A,B=ke(n[28]),U=[];for(let R=0;R<B.length;R+=1)U[R]=Qi(hi(n,B,R));let j=ke(n[28]),W=[];for(let R=0;R<j.length;R+=1)W[R]=Zi(gi(n,j,R));function X(R,q){return R[29].length>0?Zc:Qc}let K=X(n),$=K(n);return{c(){e=b("div"),t=b("h4"),t.textContent="Edit Edge Mapping",i=k(),s=b("div"),r=b("div"),o=b("label"),o.textContent="Source Entity Type",a=k(),l=b("select"),c=b("option"),c.textContent="Select source entity...";for(let R=0;R<U.length;R+=1)U[R].c();p=k(),g=b("div"),h=b("label"),h.textContent="Target Entity Type",m=k(),d=b("select"),f=b("option"),f.textContent="Select target entity...";for(let R=0;R<W.length;R+=1)W[R].c();v=k(),w=b("div"),S=b("span"),S.textContent="Allowed Edge Types",x=k(),$.c(),E=k(),D=b("div"),M=b("button"),N=V("Save Changes"),I=k(),T=b("button"),T.textContent="Cancel",y(t,"class","text-lg font-semibold mb-4 text-[var(--text-default)]"),y(o,"for","edit-source-entity"),y(o,"class","block text-sm font-medium text-[var(--text-default)] mb-2"),c.__value="",Ie(c,c.__value),y(l,"id","edit-source-entity"),y(l,"class","w-full px-3 py-1 border border-[var(--background-modifier-border)] rounded focus:outline-none focus:ring-2 focus:ring-[var(--interactive-accent)] focus:border-[var(--interactive-accent)] text-sm leading-normal bg-[var(--background-secondary)] min-w-48"),n[21]===void 0&&pt(()=>n[126].call(l)),y(h,"for","edit-target-entity"),y(h,"class","block text-sm font-medium text-[var(--text-default)] mb-2"),f.__value="",Ie(f,f.__value),y(d,"id","edit-target-entity"),y(d,"class","w-full px-3 py-1 border border-[var(--background-modifier-border)] rounded focus:outline-none focus:ring-2 focus:ring-[var(--interactive-accent)] focus:border-[var(--interactive-accent)] text-sm leading-normal bg-[var(--background-secondary)] min-w-48"),n[22]===void 0&&pt(()=>n[127].call(d)),y(s,"class","space-y-4 mb-4"),y(S,"class","block text-sm font-medium text-[var(--text-default)] mb-2"),y(w,"class","mb-4"),y(M,"class","px-4 py-2 bg-[var(--interactive-accent)] text-[var(--text-on-accent)] rounded hover:opacity-90 transition-colors duration-200"),M.disabled=P=!n[21]||!n[22]||n[23].length===0,y(T,"class","px-4 py-2 bg-[var(--background-modifier-border)] text-[var(--text-default)] rounded hover:opacity-90 transition-colors duration-200"),y(D,"class","flex gap-2"),y(e,"class","p-4 bg-[var(--background-secondary-alt)] border-none")},m(R,q){Q(R,e,q),u(e,t),u(e,i),u(e,s),u(s,r),u(r,o),u(r,a),u(r,l),u(l,c);for(let O=0;O<U.length;O+=1)U[O]&&U[O].m(l,null);et(l,n[21],!0),u(s,p),u(s,g),u(g,h),u(g,m),u(g,d),u(d,f);for(let O=0;O<W.length;O+=1)W[O]&&W[O].m(d,null);et(d,n[22],!0),u(e,v),u(e,w),u(w,S),u(w,x),$.m(w,null),u(e,E),u(e,D),u(D,M),u(M,N),u(D,I),u(D,T),L||(A=[ee(l,"change",n[126]),ee(d,"change",n[127]),ee(M,"click",n[58]),ee(T,"click",n[59])],L=!0)},p(R,q){if(q[0]&268435456){B=ke(R[28]);let O;for(O=0;O<B.length;O+=1){const Y=hi(R,B,O);U[O]?U[O].p(Y,q):(U[O]=Qi(Y),U[O].c(),U[O].m(l,null))}for(;O<U.length;O+=1)U[O].d(1);U.length=B.length}if(q[0]&270532608&&et(l,R[21]),q[0]&268435456){j=ke(R[28]);let O;for(O=0;O<j.length;O+=1){const Y=gi(R,j,O);W[O]?W[O].p(Y,q):(W[O]=Zi(Y),W[O].c(),W[O].m(d,null))}for(;O<W.length;O+=1)W[O].d(1);W.length=j.length}q[0]&272629760&&et(d,R[22]),K===(K=X(R))&&$?$.p(R,q):($.d(1),$=K(R),$&&($.c(),$.m(w,null))),q[0]&283115520&&P!==(P=!R[21]||!R[22]||R[23].length===0)&&(M.disabled=P)},i:fe,o:fe,d(R){R&&J(e),Ye(U,R),Ye(W,R),$.d(),L=!1,$e(A)}}}function Ji(n){let e,t=n[158]+"",i;return{c(){e=b("span"),i=V(t),y(e,"class","text-xs px-2 py-1 bg-[var(--background-modifier-border)] text-[var(--text-muted)] rounded-full font-medium")},m(s,r){Q(s,e,r),u(e,i)},p(s,r){r[0]&4&&t!==(t=s[158]+"")&&ne(i,t)},d(s){s&&J(e)}}}function Qi(n){let e,t=n[161]+"",i,s;return{c(){e=b("option"),i=V(t),e.__value=s=n[161],Ie(e,e.__value)},m(r,o){Q(r,e,o),u(e,i)},p(r,o){o[0]&268435456&&t!==(t=r[161]+"")&&ne(i,t),o[0]&268435456&&s!==(s=r[161])&&(e.__value=s,Ie(e,e.__value))},d(r){r&&J(e)}}}function Zi(n){let e,t=n[161]+"",i,s;return{c(){e=b("option"),i=V(t),e.__value=s=n[161],Ie(e,e.__value)},m(r,o){Q(r,e,o),u(e,i)},p(r,o){o[0]&268435456&&t!==(t=r[161]+"")&&ne(i,t),o[0]&268435456&&s!==(s=r[161])&&(e.__value=s,Ie(e,e.__value))},d(r){r&&J(e)}}}function Qc(n){let e;return{c(){e=b("p"),e.textContent="No edge types defined. Create edge types first.",y(e,"class","text-sm text-[var(--text-muted)] italic")},m(t,i){Q(t,e,i)},p:fe,d(t){t&&J(e)}}}function Zc(n){let e,t=ke(n[29]),i=[];for(let s=0;s<t.length;s+=1)i[s]=Xi(pi(n,t,s));return{c(){e=b("div");for(let s=0;s<i.length;s+=1)i[s].c();y(e,"class","grid grid-cols-2 md:grid-cols-3 gap-2")},m(s,r){Q(s,e,r);for(let o=0;o<i.length;o+=1)i[o]&&i[o].m(e,null)},p(s,r){if(r[0]&545259520|r[1]&536870912){t=ke(s[29]);let o;for(o=0;o<t.length;o+=1){const a=pi(s,t,o);i[o]?i[o].p(a,r):(i[o]=Xi(a),i[o].c(),i[o].m(e,null))}for(;o<i.length;o+=1)i[o].d(1);i.length=t.length}},d(s){s&&J(e),Ye(i,s)}}}function Xi(n){let e,t,i,s,r,o=n[158]+"",a,l,c,p;function g(){return n[128](n[158])}return{c(){e=b("label"),t=b("input"),s=k(),r=b("span"),a=V(o),l=k(),y(t,"type","checkbox"),t.checked=i=n[23].includes(n[158]),y(t,"class","rounded border-[var(--background-modifier-border)] text-[var(--interactive-accent)] focus:ring-[var(--interactive-accent)]"),y(r,"class","text-sm text-[var(--text-default)]"),y(e,"class","flex items-center gap-2 p-2 border border-[var(--background-modifier-border)] rounded hover:opacity-90 cursor-pointer transition-colors duration-200")},m(h,m){Q(h,e,m),u(e,t),u(e,s),u(e,r),u(r,a),u(e,l),c||(p=ee(t,"change",g),c=!0)},p(h,m){n=h,m[0]&545259520&&i!==(i=n[23].includes(n[158]))&&(t.checked=i),m[0]&536870912&&o!==(o=n[158]+"")&&ne(a,o)},d(h){h&&J(e),c=!1,p()}}}function es(n){let e,t,i,s,r;const o=[Jc,Hc],a=[];function l(c,p){return c[20]===c[173]?0:1}return t=l(n),i=a[t]=o[t](n),{c(){e=b("div"),i.c(),s=k(),y(e,"class","bg-[var(--background-secondary-alt)] border border-[var(--background-modifier-border)] rounded-lg overflow-hidden"),y(e,"id","mapping-"+n[173])},m(c,p){Q(c,e,p),a[t].m(e,null),u(e,s),r=!0},p(c,p){let g=t;t=l(c),t===g?a[t].p(c,p):(Ee(),G(a[g],1,1,()=>{a[g]=null}),Ce(),i=a[t],i?i.p(c,p):(i=a[t]=o[t](c),i.c()),z(i,1),i.m(e,s))},i(c){r||(z(i),r=!0)},o(c){G(i),r=!1},d(c){c&&J(e),a[t].d()}}}function ts(n){let e,t,i,s,r,o,a,l,c,p,g,h,m,d;s=new ce({props:{icon:"lightbulb"}});let f=ke(n[26]),v=[];for(let w=0;w<f.length;w+=1)v[w]=is(li(n,f,w));return{c(){e=b("div"),t=b("div"),i=b("h4"),le(s.$$.fragment),r=V(" Suggested Edge Mappings"),o=k(),a=b("button"),a.textContent="Add All",l=k(),c=b("p"),c.textContent="Recommended mappings based on your discovered entity types. Add these to enable common relationships.",p=k(),g=b("div");for(let w=0;w<v.length;w+=1)v[w].c();y(i,"class","text-lg font-semibold text-[var(--text-default)] flex items-center gap-2"),y(a,"class","px-3 py-2 bg-[var(--interactive-accent)] text-[var(--text-on-accent)] rounded hover:opacity-90 transition-colors duration-200 text-sm font-medium"),y(a,"title","Add all suggested edge mappings at once"),y(t,"class","flex justify-between items-center mb-4"),y(c,"class","text-[var(--text-muted)] mb-4"),y(g,"class","grid grid-cols-1 gap-3"),y(e,"class","mt-8 pt-8 border-t border-[var(--background-modifier-border)]")},m(w,S){Q(w,e,S),u(e,t),u(t,i),re(s,i,null),u(i,r),u(t,o),u(t,a),u(e,l),u(e,c),u(e,p),u(e,g);for(let x=0;x<v.length;x+=1)v[x]&&v[x].m(g,null);h=!0,m||(d=ee(a,"click",n[56]),m=!0)},p(w,S){if(S[0]&67108864|S[1]&8388608){f=ke(w[26]);let x;for(x=0;x<f.length;x+=1){const E=li(w,f,x);v[x]?v[x].p(E,S):(v[x]=is(E),v[x].c(),v[x].m(g,null))}for(;x<v.length;x+=1)v[x].d(1);v.length=f.length}},i(w){h||(z(s.$$.fragment,w),h=!0)},o(w){G(s.$$.fragment,w),h=!1},d(w){w&&J(e),oe(s),Ye(v,w),m=!1,d()}}}function ns(n){let e,t=n[158]+"",i;return{c(){e=b("span"),i=V(t),y(e,"class","text-xs px-2 py-1 bg-[var(--background-modifier-success)] text-[var(--text-on-accent)] rounded-full font-medium")},m(s,r){Q(s,e,r),u(e,i)},p(s,r){r[0]&67108864&&t!==(t=s[158]+"")&&ne(i,t)},d(s){s&&J(e)}}}function is(n){let e,t,i,s,r=n[166].sourceEntity+"",o,a,l,c,p,g=n[166].targetEntity+"",h,m,d,f,v,w,S,x=n[166].description+"",E,D,M,N,P=ke(n[166].allowedEdges),I=[];for(let L=0;L<P.length;L+=1)I[L]=ns(ci(n,P,L));function T(){return n[135](n[166])}return{c(){e=b("div"),t=b("div"),i=b("div"),s=b("span"),o=V(r),a=k(),l=b("span"),l.textContent="→",c=k(),p=b("span"),h=V(g),m=k(),d=b("div");for(let L=0;L<I.length;L+=1)I[L].c();f=k(),v=b("button"),v.textContent="Add",w=k(),S=b("p"),E=V(x),D=k(),y(s,"class","font-semibold text-[var(--text-default)]"),y(l,"class","text-[var(--text-muted)]"),y(p,"class","font-semibold text-[var(--text-default)]"),y(d,"class","flex gap-1 ml-2"),y(i,"class","flex items-center gap-2"),y(v,"class","px-2 py-1 bg-[var(--interactive-accent)] text-[var(--text-on-accent)] rounded text-xs hover:opacity-90 transition-colors duration-200"),y(v,"title","Add this mapping"),y(t,"class","flex justify-between items-start mb-2"),y(S,"class","text-[var(--text-muted)] text-sm leading-relaxed"),y(e,"class","bg-[var(--background-secondary-alt)] border border-[var(--background-modifier-border)] p-4 rounded-lg")},m(L,A){Q(L,e,A),u(e,t),u(t,i),u(i,s),u(s,o),u(i,a),u(i,l),u(i,c),u(i,p),u(p,h),u(i,m),u(i,d);for(let B=0;B<I.length;B+=1)I[B]&&I[B].m(d,null);u(t,f),u(t,v),u(e,w),u(e,S),u(S,E),u(e,D),M||(N=ee(v,"click",T),M=!0)},p(L,A){if(n=L,A[0]&67108864&&r!==(r=n[166].sourceEntity+"")&&ne(o,r),A[0]&67108864&&g!==(g=n[166].targetEntity+"")&&ne(h,g),A[0]&67108864){P=ke(n[166].allowedEdges);let B;for(B=0;B<P.length;B+=1){const U=ci(n,P,B);I[B]?I[B].p(U,A):(I[B]=ns(U),I[B].c(),I[B].m(d,null))}for(;B<I.length;B+=1)I[B].d(1);I.length=P.length}A[0]&67108864&&x!==(x=n[166].description+"")&&ne(E,x)},d(L){L&&J(e),Ye(I,L),M=!1,N()}}}function Xc(n){let e,t,i,s,r,o;return t=new ce({props:{icon:"chevron-right",size:"medium"}}),{c(){e=b("button"),le(t.$$.fragment),i=V(" Add Edge Mapping"),y(e,"class","px-4 py-2 bg-[var(--interactive-accent)] text-[var(--text-on-accent)] rounded hover:opacity-90 transition-colors duration-200")},m(a,l){Q(a,e,l),re(t,e,null),u(e,i),s=!0,r||(o=ee(e,"click",n[139]),r=!0)},p:fe,i(a){s||(z(t.$$.fragment,a),s=!0)},o(a){G(t.$$.fragment,a),s=!1},d(a){a&&J(e),oe(t),r=!1,o()}}}function ed(n){let e,t,i,s,r,o,a,l,c,p,g,h,m,d,f,v,w,S,x,E,D,M,N,P,I,T,L,A,B=ke(n[28]),U=[];for(let R=0;R<B.length;R+=1)U[R]=ss(ai(n,B,R));let j=ke(n[28]),W=[];for(let R=0;R<j.length;R+=1)W[R]=rs(oi(n,j,R));function X(R,q){return R[29].length>0?nd:td}let K=X(n),$=K(n);return{c(){e=b("div"),t=b("h4"),t.textContent="Add New Edge Mapping",i=k(),s=b("div"),r=b("div"),o=b("label"),o.textContent="Source Entity Type",a=k(),l=b("select"),c=b("option"),c.textContent="Select source entity...";for(let R=0;R<U.length;R+=1)U[R].c();p=k(),g=b("div"),h=b("label"),h.textContent="Target Entity Type",m=k(),d=b("select"),f=b("option"),f.textContent="Select target entity...";for(let R=0;R<W.length;R+=1)W[R].c();v=k(),w=b("div"),S=b("span"),S.textContent="Allowed Edge Types",x=k(),$.c(),E=k(),D=b("div"),M=b("button"),N=V("Save Mapping"),I=k(),T=b("button"),T.textContent="Cancel",y(t,"class","text-lg font-semibold mb-4 text-[var(--text-default)]"),y(o,"for","new-source-entity"),y(o,"class","block text-sm font-medium text-[var(--text-default)] mb-2"),c.__value="",Ie(c,c.__value),y(l,"id","new-source-entity"),y(l,"class","w-full px-3 py-2 border border-[var(--background-modifier-border)] rounded focus:outline-none focus:ring-2 focus:ring-[var(--interactive-accent)] focus:border-[var(--interactive-accent)] text-sm bg-[var(--background-secondary)] min-w-48"),n[17]===void 0&&pt(()=>n[136].call(l)),y(h,"for","new-target-entity"),y(h,"class","block text-sm font-medium text-[var(--text-default)] mb-2"),f.__value="",Ie(f,f.__value),y(d,"id","new-target-entity"),y(d,"class","w-full px-3 py-2 border border-[var(--background-modifier-border)] rounded focus:outline-none focus:ring-2 focus:ring-[var(--interactive-accent)] focus:border-[var(--interactive-accent)] text-sm bg-[var(--background-secondary)] min-w-48"),n[18]===void 0&&pt(()=>n[137].call(d)),y(s,"class","space-y-4 mb-4"),y(S,"class","block text-sm font-medium text-[var(--text-default)] mb-2"),y(w,"class","mb-4"),y(M,"class","px-4 py-2 bg-[var(--interactive-accent)] text-[var(--text-on-accent)] rounded hover:opacity-90 transition-colors duration-200"),M.disabled=P=!n[17]||!n[18]||n[19].length===0,y(T,"class","px-4 py-2 bg-[var(--background-modifier-border)] text-[var(--text-default)] rounded hover:opacity-90 transition-colors duration-200"),y(D,"class","flex gap-2"),y(e,"class","bg-[var(--background-secondary-alt)] border border-[var(--background-modifier-border)] rounded-lg p-6")},m(R,q){Q(R,e,q),u(e,t),u(e,i),u(e,s),u(s,r),u(r,o),u(r,a),u(r,l),u(l,c);for(let O=0;O<U.length;O+=1)U[O]&&U[O].m(l,null);et(l,n[17],!0),u(s,p),u(s,g),u(g,h),u(g,m),u(g,d),u(d,f);for(let O=0;O<W.length;O+=1)W[O]&&W[O].m(d,null);et(d,n[18],!0),u(e,v),u(e,w),u(w,S),u(w,x),$.m(w,null),u(e,E),u(e,D),u(D,M),u(M,N),u(D,I),u(D,T),L||(A=[ee(l,"change",n[136]),ee(d,"change",n[137]),ee(M,"click",n[50]),ee(T,"click",n[51])],L=!0)},p(R,q){if(q[0]&268435456){B=ke(R[28]);let O;for(O=0;O<B.length;O+=1){const Y=ai(R,B,O);U[O]?U[O].p(Y,q):(U[O]=ss(Y),U[O].c(),U[O].m(l,null))}for(;O<U.length;O+=1)U[O].d(1);U.length=B.length}if(q[0]&268566528&&et(l,R[17]),q[0]&268435456){j=ke(R[28]);let O;for(O=0;O<j.length;O+=1){const Y=oi(R,j,O);W[O]?W[O].p(Y,q):(W[O]=rs(Y),W[O].c(),W[O].m(d,null))}for(;O<W.length;O+=1)W[O].d(1);W.length=j.length}q[0]&268697600&&et(d,R[18]),K===(K=X(R))&&$?$.p(R,q):($.d(1),$=K(R),$&&($.c(),$.m(w,null))),q[0]&269352960&&P!==(P=!R[17]||!R[18]||R[19].length===0)&&(M.disabled=P)},i:fe,o:fe,d(R){R&&J(e),Ye(U,R),Ye(W,R),$.d(),L=!1,$e(A)}}}function ss(n){let e,t=n[161]+"",i,s;return{c(){e=b("option"),i=V(t),e.__value=s=n[161],Ie(e,e.__value)},m(r,o){Q(r,e,o),u(e,i)},p(r,o){o[0]&268435456&&t!==(t=r[161]+"")&&ne(i,t),o[0]&268435456&&s!==(s=r[161])&&(e.__value=s,Ie(e,e.__value))},d(r){r&&J(e)}}}function rs(n){let e,t=n[161]+"",i,s;return{c(){e=b("option"),i=V(t),e.__value=s=n[161],Ie(e,e.__value)},m(r,o){Q(r,e,o),u(e,i)},p(r,o){o[0]&268435456&&t!==(t=r[161]+"")&&ne(i,t),o[0]&268435456&&s!==(s=r[161])&&(e.__value=s,Ie(e,e.__value))},d(r){r&&J(e)}}}function td(n){let e;return{c(){e=b("p"),e.textContent="No edge types defined. Create edge types first.",y(e,"class","text-sm text-[var(--text-muted)] italic")},m(t,i){Q(t,e,i)},p:fe,d(t){t&&J(e)}}}function nd(n){let e,t=ke(n[29]),i=[];for(let s=0;s<t.length;s+=1)i[s]=os(ri(n,t,s));return{c(){e=b("div");for(let s=0;s<i.length;s+=1)i[s].c();y(e,"class","grid grid-cols-2 md:grid-cols-3 gap-2")},m(s,r){Q(s,e,r);for(let o=0;o<i.length;o+=1)i[o]&&i[o].m(e,null)},p(s,r){if(r[0]&537395200|r[1]&4194304){t=ke(s[29]);let o;for(o=0;o<t.length;o+=1){const a=ri(s,t,o);i[o]?i[o].p(a,r):(i[o]=os(a),i[o].c(),i[o].m(e,null))}for(;o<i.length;o+=1)i[o].d(1);i.length=t.length}},d(s){s&&J(e),Ye(i,s)}}}function os(n){let e,t,i,s,r,o=n[158]+"",a,l,c,p;function g(){return n[138](n[158])}return{c(){e=b("label"),t=b("input"),s=k(),r=b("span"),a=V(o),l=k(),y(t,"type","checkbox"),t.checked=i=n[19].includes(n[158]),y(t,"class","rounded border-[var(--background-modifier-border)] text-[var(--interactive-accent)] focus:ring-[var(--interactive-accent)]"),y(r,"class","text-sm text-[var(--text-default)]"),y(e,"class","flex items-center gap-2 p-2 border border-[var(--background-modifier-border)] rounded hover:opacity-90 cursor-pointer transition-colors duration-200")},m(h,m){Q(h,e,m),u(e,t),u(e,s),u(e,r),u(r,a),u(e,l),c||(p=ee(t,"change",g),c=!0)},p(h,m){n=h,m[0]&537395200&&i!==(i=n[19].includes(n[158]))&&(t.checked=i),m[0]&536870912&&o!==(o=n[158]+"")&&ne(a,o)},d(h){h&&J(e),c=!1,p()}}}function id(n){let e,t,i,s,r=n[0].length+"",o,a,l,c=n[0].reduce(ls,0)+"",p,g;return{c(){e=b("div"),t=b("p"),i=V("Found "),s=b("strong"),o=V(r),a=V(" types across "),l=b("strong"),p=V(c),g=V(" files"),y(s,"class","text-[var(--text-default)]"),y(l,"class","text-[var(--text-default)]"),y(t,"class","text-[var(--text-default)] text-center"),y(e,"class","bg-[var(--background-secondary)] border border-[var(--background-modifier-border)] rounded-lg p-4 mb-4")},m(h,m){Q(h,e,m),u(e,t),u(t,i),u(t,s),u(s,o),u(t,a),u(t,l),u(l,p),u(t,g)},p(h,m){m[0]&1&&r!==(r=h[0].length+"")&&ne(o,r),m[0]&1&&c!==(c=h[0].reduce(ls,0)+"")&&ne(p,c)},d(h){h&&J(e)}}}function sd(n){let e;return{c(){e=b("div"),e.innerHTML='<p class="mb-2">No typed notes found in your vault.</p> <p>Add a <code class="bg-[var(--background-modifier-border)] px-2 py-1 rounded font-mono text-sm">type</code> property to your frontmatter to get started.</p>',y(e,"class","text-center py-8 text-[var(--text-muted)]")},m(t,i){Q(t,e,i)},p:fe,d(t){t&&J(e)}}}function rd(n){let e;return{c(){e=b("div"),e.innerHTML=`<div class="w-4 h-4 border-2 border-[var(--background-modifier-border)] border-t-[var(--interactive-accent)] rounded-full animate-spin"></div>
                <div class="p-6 text-center">
                    <h2 class="text-xl font-semibold text-red-600 mb-4">Enhanced Sync UI Error</h2>
                    <p class="text-gray-700 mb-4">Failed to load enhanced sync UI: ${i instanceof Error?i.message:String(i)}</p>
                    <button class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600" onclick="this.closest('.modal').dispatchEvent(new Event('close'))">
                        Close
                    </button>
                </div>
            `}}onClose(){var t;const{contentEl:e}=this;this.svelteComponent&&(this.svelteComponent.$destroy(),this.svelteComponent=null),(t=e.parentElement)==null||t.removeClass("enhanced-sync-modal"),e.parentElement&&(e.parentElement.style.padding="",e.parentElement.style.backgroundColor=""),e.empty()}}function Cd(n,e,t,i,s,r,o){try{new Ed(n,e,t,i,s,r,o).open()}catch(a){throw console.error("Failed to open enhanced sync UI:",a),a}}function kd(n){const e={llmDefaults:{openai:{"gpt-5":{desc:"Latest flagship, most capable",recommended:!0},"gpt-4o":{desc:"Previous gen, multimodal",recommended:!1},"gpt-4o-mini":{desc:"Efficient, good performance",recommended:!1}},ollama:{"deepseek-r1:8b":{desc:"Best reasoning with transparent thought chains",recommended:!0},"qwen2.5:7b":{desc:"Excellent entity extraction, 128K context",recommended:!0},"qwq:32b":{desc:"Qwen's dedicated reasoning model",recommended:!1},"llama3.2:11b":{desc:"Latest Llama, strong performance",recommended:!1},"gemma2:9b":{desc:"Google's efficient architecture",recommended:!1},"mistral:7b":{desc:"Fast, reliable baseline",recommended:!1},"phi3:14b":{desc:"Microsoft's capable model",recommended:!1},"llama3.2:3b":{desc:"Lightweight for limited hardware",recommended:!1},"qwen2.5:3b":{desc:"User added",recommended:!1}},google:{"gemini-2.5-pro":{desc:"Latest flagship, maximum capability",recommended:!0},"gemini-2.5-flash":{desc:"Fast, efficient Gemini 2.5",recommended:!1},"gemini-2.0-flash-exp":{desc:"Previous gen experimental",recommended:!1}},anthropic:{"claude-opus-4-1-20250805":{desc:"Most capable, advanced reasoning",recommended:!0},"claude-sonnet-4-20250514":{desc:"Balanced performance and speed",recommended:!1},"claude-3-7-sonnet-latest":{desc:"Previous gen, still capable",recommended:!1},"claude-3-5-haiku-latest":{desc:"Fast, economical",recommended:!1}},venice:{"dolphin-2.9.2-qwen2-72b":{desc:"High-performance dolphin fine-tune of Qwen2",recommended:!0},"mistral-31-24b":{desc:"Powerful Mistral architecture",recommended:!1},"llama-3.2-3b":{desc:"Lightweight Llama model",recommended:!1}},openrouter:{"openai/gpt-5-mini":{desc:"Cost-effective with full structured output support",recommended:!0},"meta-llama/llama-3.1-70b-instruct":{desc:"Open source alternative with verified schema support",recommended:!1},"google/gemini-2.5-flash":{desc:"Google's offering with verified structured outputs",recommended:!1},"qwen/qwen3-235b-a22b":{desc:"Qwen model with verified schema handling",recommended:!1},"deepseek/deepseek-chat-v3.1":{desc:"Recent Deepseek model with structured output",recommended:!1}}},llmSmallDefaults:{openai:{"gpt-5-nano":{desc:"Latest nano model for reranking",recommended:!0},"gpt-4o-mini":{desc:"Previous gen efficient model",recommended:!1},"gpt-5-turbo":{desc:"Fast, cost-effective GPT-5",recommended:!1}},ollama:{"qwen2.5:3b":{desc:"Excellent for structured tasks",recommended:!0},"llama3.2:3b":{desc:"Fast, reliable classifications",recommended:!0},"deepseek-r1:1.5b":{desc:"Ultra-fast, minimal resource use",recommended:!1},"mistral:7b-instruct":{desc:"Larger but very reliable",recommended:!1}},google:{"gemini-2.5-flash-lite":{desc:"Optimized for classification tasks",recommended:!0},"gemini-2.5-flash":{desc:"Fast classification, larger",recommended:!1},"gemini-1.5-flash-8b":{desc:"Previous gen, still efficient",recommended:!1}},anthropic:{"claude-4-haiku":{desc:"Fast, efficient for reranking",recommended:!0},"claude-3-5-haiku-20241022":{desc:"Previous gen, economical",recommended:!1}},venice:{"llama-3.2-3b":{desc:"Fast, efficient for classification tasks",recommended:!0},"mistral-31-24b":{desc:"Larger but very capable",recommended:!1}},openrouter:{"openai/gpt-5-mini":{desc:"Cost-effective with verified structured output support",recommended:!0},"google/gemini-2.5-flash":{desc:"Fast classification with verified structured outputs",recommended:!1},"meta-llama/llama-3.1-70b-instruct":{desc:"Open source alternative with verified schema support",recommended:!1}}},embeddingDefaults:{openai:{"text-embedding-3-small":{desc:"Efficient, good quality",dimensions:1536,recommended:!0},"text-embedding-3-large":{desc:"Highest quality, larger vectors",dimensions:3072,recommended:!1},"text-embedding-ada-002":{desc:"Legacy model, still supported",dimensions:1536,recommended:!1}},ollama:{"nomic-embed-text:latest":{desc:"Best for markdown & mixed content",dimensions:768,recommended:!0},"mxbai-embed-large":{desc:"Highest quality embeddings",dimensions:1024,recommended:!1},"snowflake-arctic-embed":{desc:"Strong retrieval performance",dimensions:1024,recommended:!1},"all-minilm":{desc:"Smallest, fastest, limited quality",dimensions:384,recommended:!1},"e5-mistral-7b":{desc:"LLM-based embeddings, highest quality",dimensions:4096,recommended:!1}},google:{"text-embedding-005":{desc:"Latest Gemini 2.5 era embeddings",dimensions:768,recommended:!0},"text-embedding-004":{desc:"Previous gen, proven performance",dimensions:768,recommended:!1},"text-multilingual-embedding-002":{desc:"Best for multiple languages",dimensions:768,recommended:!1}},voyage:{"voyage-3":{desc:"Latest generation, best quality",dimensions:1024,recommended:!0},"voyage-3-lite":{desc:"Efficient, good performance",dimensions:512,recommended:!1},"voyage-large-2-instruct":{desc:"Instruction-optimized",dimensions:1024,recommended:!1},"voyage-code-2":{desc:"Optimized for code search",dimensions:1536,recommended:!1},"voyage-finance-2":{desc:"Financial domain specialist",dimensions:1024,recommended:!1},"voyage-law-2":{desc:"Legal domain specialist",dimensions:1024,recommended:!1},"voyage-multilingual-2":{desc:"Cross-lingual retrieval",dimensions:1024,recommended:!1}}},llmCrossEncoderDefaults:{openai:{"gpt-5-nano":{desc:"Latest nano model for reranking",recommended:!0},"gpt-4.1-nano":{desc:"Previous gen efficient model",recommended:!1},"gpt-3.5-turbo":{desc:"Legacy, very fast",recommended:!1}},gemini:{"gemini-2.5-flash-lite-preview-06-17":{desc:"Optimized for classification tasks",recommended:!0},"gemini-1.5-flash-8b":{desc:"Previous gen, still efficient",recommended:!1}}}};if(n!=null&&n.openrouterPresetSlug){const t=`@preset/${n.openrouterPresetSlug}`;e.llmDefaults.openrouter[t]={desc:"Models controlled by OpenRouter Preset",recommended:!0},e.llmSmallDefaults.openrouter[t]={desc:"Models controlled by OpenRouter Preset",recommended:!0}}return e}class Dd{constructor(e,t){this.suggestEl=null,this.app=e,this.inputEl=t,this.selectedItem=-1,this.suggestions=[],this.inputEl.addEventListener("input",this.onInputChanged.bind(this)),this.inputEl.addEventListener("focus",this.onInputChanged.bind(this)),this.inputEl.addEventListener("blur",this.close.bind(this)),this.inputEl.addEventListener("keydown",this.onInputKeydown.bind(this))}onInputChanged(){const e=this.inputEl.value,t=this.getSuggestions(e);if(!t||t.length===0){this.close();return}this.suggestions=t,this.selectedItem=-1,this.open(t)}onInputKeydown(e){const t=e;!this.suggestEl||this.suggestions.length===0||(t.key==="ArrowDown"?(this.selectedItem=Math.min(this.selectedItem+1,this.suggestions.length-1),this.setSelectedItem(this.selectedItem),e.preventDefault()):t.key==="ArrowUp"?(this.selectedItem=Math.max(this.selectedItem-1,-1),this.setSelectedItem(this.selectedItem),e.preventDefault()):t.key==="Enter"?this.selectedItem>=0&&(this.selectSuggestion(this.suggestions[this.selectedItem]),e.preventDefault()):t.key==="Escape"&&(this.close(),e.preventDefault()))}open(e){if(this.close(),e.length===0)return;this.suggestEl=document.createElement("div"),this.suggestEl.classList.add("suggestion-container"),this.suggestEl.style.cssText=`
            position: absolute;
            z-index: 1000;
            background: var(--background-primary);
            border: 1px solid var(--background-modifier-border);
            border-radius: 8px;
            box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
            max-height: 200px;
            overflow-y: auto;
            min-width: 200px;
        `;const t=this.inputEl.getBoundingClientRect();this.suggestEl.style.top=`${t.bottom+4}px`,this.suggestEl.style.left=`${t.left}px`,this.suggestEl.style.width=`${t.width}px`,e.forEach((i,s)=>{var o;const r=document.createElement("div");r.classList.add("suggestion-item"),r.style.cssText=`
                padding: 8px 12px;
                cursor: pointer;
                border-bottom: 1px solid var(--background-modifier-border-hover);
            `,this.renderSuggestion(i,r),r.addEventListener("mousedown",a=>{a.preventDefault(),this.selectSuggestion(i)}),r.addEventListener("click",a=>{a.preventDefault(),this.selectSuggestion(i)}),r.addEventListener("mouseenter",()=>{this.setSelectedItem(s)}),(o=this.suggestEl)==null||o.appendChild(r)}),document.body.appendChild(this.suggestEl)}setSelectedItem(e){var i;const t=(i=this.suggestEl)==null?void 0:i.querySelectorAll(".suggestion-item");t&&(t.forEach((s,r)=>{r===e?(s.classList.add("is-selected"),s.style.background="var(--background-modifier-hover)"):(s.classList.remove("is-selected"),s.style.background="")}),this.selectedItem=e)}close(){this.suggestEl&&(this.suggestEl.remove(),this.suggestEl=null),this.selectedItem=-1}}class Wt extends Dd{constructor(e,t){super(e,t)}getSuggestions(e){const t=this.app.vault.getAllLoadedFiles(),i=[],s=e.toLowerCase();return t.forEach(r=>{r instanceof C.TFolder&&r.path.toLowerCase().contains(s)&&i.push(r)}),i.slice(0,1e3)}renderSuggestion(e,t){t.setText(e.path)}selectSuggestion(e){this.inputEl.value=e.path;const t=new Event("input",{bubbles:!0}),i=new Event("change",{bubbles:!0});this.inputEl.dispatchEvent(t),this.inputEl.dispatchEvent(i),this.close()}}const ot=mo.promisify(at.exec);class Ct{static getInstance(){return Ct.instance||(Ct.instance=new Ct),Ct.instance}async getMCPServerProcesses(){const e=process.platform;try{return e==="win32"?await this.getWindowsProcesses():e==="darwin"?await this.getMacProcesses():await this.getLinuxProcesses()}catch(t){return console.error("[PROCESS-DETECTION] Failed to get MCP server processes:",t),[]}}async getWindowsProcesses(){var e;try{const t=`wmic process where "name='python.exe' and commandline like '%megamem_mcp_server.py%'" get ProcessId,ParentProcessId,CreationDate,CommandLine /format:list`,{stdout:i}=await ot(t,{shell:"cmd.exe",windowsHide:!0,encoding:"utf8"}),s=[],r=i.split(/(\r\r\n){2,}/).filter(o=>o.trim()&&!o.match(/^(\r\r\n)+$/));for(const o of r){const a={};if(o.split(/\r\r\n/).forEach(l=>{const c=l.indexOf("=");if(c>0){const p=l.substring(0,c).trim(),g=l.substring(c+1).trim();p&&g&&(a[p]=g)}}),a.ProcessId&&a.ParentProcessId&&((e=a.CommandLine)!=null&&e.includes("megamem_mcp_server.py"))){const l=await this.getWindowsParentProcessName(a.ParentProcessId),c=this.formatWindowsDate(a.CreationDate);s.push({pid:a.ProcessId,parentName:l,createdAt:c,commandLine:a.CommandLine})}}return s}catch(t){return console.error("[PROCESS-DETECTION] Windows process detection failed:",t),[]}}async getWindowsParentProcessName(e){try{const t=`wmic process where "ProcessId=${e}" get Name /value`,{stdout:i}=await ot(t,{shell:"cmd.exe",windowsHide:!0,encoding:"utf8"}),s=i.split(/\r?\n/);for(const r of s){const o=r.indexOf("=");if(o>0){const a=r.substring(0,o).trim(),l=r.substring(o+1).trim();if(a==="Name"&&l)return l.replace(".exe","")}}return"Unknown"}catch{return"Unknown"}}formatWindowsDate(e){if(!e||e.length<14)return"Unknown";try{const t=e.substring(0,4),i=e.substring(4,6),s=e.substring(6,8),r=e.substring(8,10),o=e.substring(10,12),a=e.substring(12,14);return new Date(`${t}-${i}-${s}T${r}:${o}:${a}`).toLocaleString("en-US",{month:"numeric",day:"numeric",year:"numeric",hour:"numeric",minute:"2-digit",second:"2-digit",hour12:!0})}catch{return e}}async getMacProcesses(){try{const e="ps aux | grep megamem_mcp_server.py | grep -v grep",{stdout:t}=await ot(e),i=t.split(`
`).filter(r=>r.trim()),s=[];for(const r of i){const o=r.trim().split(/\s+/);if(o.length>=11){const a=o[1],l=await this.getMacParentInfo(a);s.push({pid:a,parentName:l.name,createdAt:l.startTime,commandLine:o.slice(10).join(" ")})}}return s}catch(e){return console.error("[PROCESS-DETECTION] Mac process detection failed:",e),[]}}async getMacParentInfo(e){try{const{stdout:t}=await ot(`ps -p ${e} -o ppid=,lstart=`),s=t.trim().split(/\s+/);if(s.length>=6){const r=s[0],o=s.slice(1).join(" "),{stdout:a}=await ot(`ps -p ${r} -o comm=`);return{name:a.trim().replace(/^.*\//,"")||"Unknown",startTime:new Date(o).toLocaleString("en-US",{month:"numeric",day:"numeric",year:"numeric",hour:"numeric",minute:"2-digit",second:"2-digit",hour12:!0})}}return{name:"Unknown",startTime:"Unknown"}}catch{return{name:"Unknown",startTime:"Unknown"}}}async getLinuxProcesses(){try{const e="ps aux | grep megamem_mcp_server.py | grep -v grep",{stdout:t}=await ot(e),i=t.split(`
`).filter(r=>r.trim()),s=[];for(const r of i){const o=r.trim().split(/\s+/);if(o.length>=11){const a=o[1],l=await this.getLinuxParentInfo(a);s.push({pid:a,parentName:l.name,createdAt:l.startTime,commandLine:o.slice(10).join(" ")})}}return s}catch(e){return console.error("[PROCESS-DETECTION] Linux process detection failed:",e),[]}}async getLinuxParentInfo(e){try{const{stdout:t}=await ot(`ps -p ${e} -o ppid=,lstart=`),s=t.trim().split(/\s+/);if(s.length>=6){const r=s[0],o=s.slice(1).join(" "),{stdout:a}=await ot(`ps -p ${r} -o comm=`);return{name:a.trim()||"Unknown",startTime:new Date(o).toLocaleString("en-US",{month:"numeric",day:"numeric",year:"numeric",hour:"numeric",minute:"2-digit",second:"2-digit",hour12:!0})}}return{name:"Unknown",startTime:"Unknown"}}catch{return{name:"Unknown",startTime:"Unknown"}}}}const Pd=process.platform==="win32"||navigator.userAgent.includes("Windows");class Td{constructor(e="http://localhost:11434",t){this.downloadCallbacks=new Map,this.modelCache={models:[],timestamp:0,ttl:3e4},this.pendingModelRequest=null,this.baseUrl=e.replace(/\/$/,""),this.logger=t}async isServerRunning(){try{return(await C.requestUrl({url:`${this.baseUrl}/api/version`,method:"GET",headers:{"Content-Type":"application/json"}})).status===200}catch(e){if(this.logger.debug("[OLLAMA] Server not running, attempting recovery",{error:e}),await this.attemptServiceRecovery()){await new Promise(i=>setTimeout(i,2e3));try{if((await C.requestUrl({url:`${this.baseUrl}/api/version`,method:"GET",headers:{"Content-Type":"application/json"}})).status===200)return this.logger.info("[OLLAMA] Service recovery successful"),!0}catch(i){this.logger.debug("[OLLAMA] Retry after service recovery failed",{retryError:i})}}return!1}}async getAvailableModels(e=!1){const t=Date.now();if(!e&&this.modelCache.models.length>0&&t-this.modelCache.timestamp<this.modelCache.ttl)return this.modelCache.models;if(this.pendingModelRequest&&!e)return this.pendingModelRequest;this.pendingModelRequest=this._fetchModelsFromServer();try{return await this.pendingModelRequest}finally{this.pendingModelRequest=null}}async _fetchModelsFromServer(){const e=Date.now();try{const t=await C.requestUrl({url:`${this.baseUrl}/api/tags`,method:"GET",headers:{"Content-Type":"application/json"}});if(t.status!==200)throw new Error(`Failed to fetch models: ${t.status}`);const r=(t.json.models||[]).map(o=>o.name);return this.logger.debug("[OLLAMA] Fetched fresh model list from server",{rawCount:r.length,normalizedCount:r.length,serverUrl:this.baseUrl}),this.modelCache={models:r,timestamp:e,ttl:this.modelCache.ttl},r}catch{if(await this.attemptServiceRecovery()){await new Promise(s=>setTimeout(s,2e3));try{const s=await C.requestUrl({url:`${this.baseUrl}/api/tags`,method:"GET",headers:{"Content-Type":"application/json"}});if(s.status===200){const a=(s.json.models||[]).map(l=>l.name);return this.modelCache={models:a,timestamp:e,ttl:this.modelCache.ttl},a}}catch{}}return[]}}async getEmbeddingModelsWithStatus(e,t=!1){const i=await this.getAvailableModels(t),r=(Array.isArray(e)&&e.length>0?e:[...i]).map(a=>{const l=i.includes(a);return{name:a,available:l}}),o=r.find(a=>a.name==="nomic-embed-text"||a.name.startsWith("nomic-embed-text:"));return o&&this.logger.info(`[OLLAMA] nomic-embed-text availability: ${o.available}`),r}async downloadModel(e,t){var i;try{t&&this.downloadCallbacks.set(e,t);const s=await fetch(`${this.baseUrl}/api/pull`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:e})});if(!s.ok)throw new Error(`Download request failed: ${s.status}`);const r=(i=s.body)==null?void 0:i.getReader();if(!r)throw new Error("No response body reader available");let o=!1,a=!1;for(;!o;){const{done:l,value:c}=await r.read();if(l){o=!0;break}const g=new TextDecoder().decode(c).split(`
`).filter(h=>h.trim());for(const h of g)try{const m=JSON.parse(h);if(t&&t(m),m.error)throw this.logger.error("[OLLAMA] Download error detected",{error:m.error,modelName:e}),a=!0,new Error(`Download failed: ${m.error}`);m.status==="success"&&(o=!0)}catch(m){if(m instanceof Error&&m.message.includes("Download failed:"))throw m;this.logger.debug("[OLLAMA] Non-JSON progress line",{line:h})}}return this.downloadCallbacks.delete(e),a?(this.logger.error(`[OLLAMA] Model ${e} download failed due to detected errors`),!1):(this.logger.info(`[OLLAMA] Model ${e} downloaded successfully`),!0)}catch(s){return this.logger.error("[OLLAMA] Failed to download model",{modelName:e,error:s}),this.downloadCallbacks.delete(e),t&&t({status:`error: ${s instanceof Error?s.message:"Unknown error"}`}),!1}}clearModelCache(){this.modelCache={models:[],timestamp:0,ttl:this.modelCache.ttl}}async isModelAvailable(e){return(await this.getAvailableModels()).includes(e)}async _pollForModelAvailability(e,t=3e4,i=2e3){const s=Date.now(),r=e;for(;Date.now()-s<t;){if(await this.isModelAvailable(r))return this.logger.info(`[OLLAMA] Model ${r} is now available.`),!0;await new Promise(a=>setTimeout(a,i))}return this.logger.warn(`[OLLAMA] Model ${r} did not become available within timeout.`),!1}async isModelInstalled(e){return await this.isModelAvailable(e)}async downloadModelWithProgress(e,t){const i=await this.downloadModel(e,t);return i&&(this.clearModelCache(),await this._pollForModelAvailability(e,3e4,2e3)?t({status:"Model is now available for use"}):this.logger.warn(`[OLLAMA] Model ${e} downloaded but not showing as available`)),i}async checkServerStatus(){if(!await this.isServerRunning())return{running:!1};try{return{running:!0,modelCount:(await this.getAvailableModels()).length}}catch{return{running:!0}}}async startService(){return await this.isServerRunning()?{success:!0,message:"Ollama service is already running"}:await this.attemptServiceRecovery()?(await new Promise(s=>setTimeout(s,3e3)),await this.isServerRunning()?{success:!0,message:"Ollama service started successfully"}:{success:!1,message:"Service recovery attempted but Ollama is not responding"}):{success:!1,message:"Service recovery not available on this platform"}}async attemptServiceRecovery(){if(!Pd)return this.logger.debug("[OLLAMA] Service recovery not applicable on non-Windows platform"),!1;try{this.logger.info("[OLLAMA] Attempting Windows service recovery using PowerShell Start-Service");const{exec:e}=require("child_process");return new Promise(t=>{e('powershell.exe "Start-Service -Name ollama -ErrorAction SilentlyContinue"',{timeout:1e4},(s,r,o)=>{s?(this.logger.debug("[OLLAMA] PowerShell service start failed",{error:s.message,stderr:o}),e('powershell.exe "Start-Service -Name OllamaService -ErrorAction SilentlyContinue"',{timeout:1e4},l=>{l?this.logger.debug("[OLLAMA] Alternative service name also failed",{altError:l.message}):this.logger.info("[OLLAMA] Alternative service recovery command executed"),t(!0)})):(this.logger.info("[OLLAMA] Service recovery command executed successfully",{stdout:r.trim()}),t(!0))})})}catch(e){return this.logger.error("[OLLAMA] Service recovery attempt failed",{error:e}),!1}}}class Md{constructor(e,t){this.ollamaService=null,this.app=e,this.plugin=t}getOllamaService(){if(!this.ollamaService){let e=this.plugin.settings.ollamaBaseUrl||"http://localhost:11434";e=e.replace(/\/v1\/?$/,""),this.ollamaService=new Td(e,this.plugin.logger)}return this.ollamaService}getOllamaLLMModelsFromSettings(){var e,t,i;try{const s=((e=this.plugin.settings.llmDefaults)==null?void 0:e.ollama)||{},r=Object.entries(s).map(([o,a])=>({name:o,description:a&&a.desc||"",recommended:!!(a&&a.recommended)}));return r.sort((o,a)=>Number(a.recommended)-Number(o.recommended)||o.name.localeCompare(a.name)),(t=this.plugin.logger)==null||t.debug("[OLLAMA-SETTINGS] Loaded Ollama LLM models from plugin.settings",{count:r.length}),r}catch(s){return(i=this.plugin.logger)==null||i.warn("[OLLAMA-SETTINGS] Failed to load Ollama LLM defaults from settings",{error:s}),[]}}getOllamaLLMSmallModelsFromSettings(){var e,t,i;try{const s=((e=this.plugin.settings.llmSmallDefaults)==null?void 0:e.ollama)||{},r=Object.entries(s).map(([o,a])=>({name:o,description:a&&a.desc||"",recommended:!!(a&&a.recommended)}));return r.sort((o,a)=>Number(a.recommended)-Number(o.recommended)||o.name.localeCompare(a.name)),(t=this.plugin.logger)==null||t.debug("[OLLAMA-SETTINGS] Loaded Ollama LLM Small models from plugin.settings",{count:r.length}),r}catch(s){return(i=this.plugin.logger)==null||i.warn("[OLLAMA-SETTINGS] Failed to load Ollama LLM Small defaults from settings",{error:s}),[]}}getOllamaEmbeddingModelsFromSettings(){var e,t,i;try{const s=((e=this.plugin.settings.embeddingDefaults)==null?void 0:e.ollama)||{},r=Object.entries(s).map(([o,a])=>({name:o,description:a&&a.desc||"",dimensions:a&&a.dimensions||void 0,recommended:!!(a&&a.recommended)}));return r.sort((o,a)=>Number(a.recommended)-Number(o.recommended)||o.name.localeCompare(a.name)),(t=this.plugin.logger)==null||t.debug("[OLLAMA-SETTINGS] Loaded Ollama embedding models from plugin.settings",{count:r.length}),r}catch(s){return(i=this.plugin.logger)==null||i.warn("[OLLAMA-SETTINGS] Failed to load Ollama embedding defaults from settings",{error:s}),[]}}getOllamaEmbeddingModelNamesFromSettings(){var e;try{return Object.keys(((e=this.plugin.settings.embeddingDefaults)==null?void 0:e.ollama)||{})}catch{return[]}}async addCustomOllamaLLMToDefaults(e){var t,i;try{this.plugin.settings.llmDefaults||(this.plugin.settings.llmDefaults={}),this.plugin.settings.llmDefaults.ollama||(this.plugin.settings.llmDefaults.ollama={}),this.plugin.settings.llmDefaults.ollama[e]||(this.plugin.settings.llmDefaults.ollama[e]={desc:"User added",recommended:!1},await this.plugin.saveSettings(),(t=this.plugin.logger)==null||t.info("[OLLAMA-SETTINGS] Added custom Ollama LLM to defaults",{modelName:e}))}catch(s){(i=this.plugin.logger)==null||i.error("[OLLAMA-SETTINGS] Failed to add custom Ollama LLM to defaults",{modelName:e,error:s})}}async addCustomOllamaEmbeddingToDefaults(e){var t,i;try{this.plugin.settings.embeddingDefaults||(this.plugin.settings.embeddingDefaults={}),this.plugin.settings.embeddingDefaults.ollama||(this.plugin.settings.embeddingDefaults.ollama={}),this.plugin.settings.embeddingDefaults.ollama[e]||(this.plugin.settings.embeddingDefaults.ollama[e]={desc:"User added",dimensions:this.plugin.settings.ollamaEmbeddingDim||768,recommended:!1},await this.plugin.saveSettings(),(t=this.plugin.logger)==null||t.info("[OLLAMA-SETTINGS] Added custom Ollama embedding to defaults",{modelName:e}))}catch(s){(i=this.plugin.logger)==null||i.error("[OLLAMA-SETTINGS] Failed to add custom Ollama embedding to defaults",{modelName:e,error:s})}}async isOllamaModelInstalled(e){var t;try{return await this.getOllamaService().isModelInstalled(e)}catch(i){return(t=this.plugin.logger)==null||t.error("[OLLAMA-SETTINGS] Failed to check Ollama model installation",{modelName:e,error:i}),!1}}async downloadOllamaModelWithProgress(e,t){var l;const i=this.getOllamaService();t.empty();const s=t.createDiv();s.createEl("div",{text:`[DOWNLOADING] ${e}...`});const r=s.createEl("div");r.style.cssText=`
			width: 100%;
			height: 6px;
			background-color: var(--background-modifier-border);
			border-radius: 3px;
			margin: 4px 0;
			overflow: hidden;
		`;const o=r.createEl("div");o.style.cssText=`
			height: 100%;
			background-color: var(--color-accent);
			transition: width 0.3s ease;
			width: 0%;
		`;const a=s.createEl("div");a.style.cssText=`
			font-size: 0.8em;
			color: var(--text-muted);
			margin-top: 2px;
		`;try{const c=await i.downloadModelWithProgress(e,p=>{const g=Math.round((p.completed||0)/(p.total||1)*100)||0;o.style.width=`${g}%`,a.textContent=`${g}% - ${p.status||"Downloading..."}`});t.empty(),c?(t.createDiv().createEl("div",{text:`[SUCCESS] ${e} installed successfully!`,attr:{style:"color: var(--color-green);"}}),setTimeout(()=>t.empty(),3e3)):t.createEl("div",{text:"[ERROR] Download failed",attr:{style:"color: var(--color-red);"}})}catch(c){(l=this.plugin.logger)==null||l.error("[OLLAMA-SETTINGS] Ollama model download failed",{error:c}),t.empty();const p=c instanceof Error?c.message:"Unknown error";t.createEl("div",{text:`[ERROR] Download failed: ${p}`,attr:{style:"color: var(--color-red);"}})}}async populateOllamaModelsWithStatus(e){var i;const t=this.getOllamaService();try{if(!await t.isServerRunning()){e.addOption("","[Ollama server not running]");return}const r=this.getOllamaEmbeddingModelNamesFromSettings();(await t.getEmbeddingModelsWithStatus(r)).forEach(a=>{const l=a.name;e.addOption(a.name,l)})}catch(s){(i=this.plugin.logger)==null||i.error("[OLLAMA-SETTINGS] Failed to load Ollama models with status",{error:s}),e.addOption("","[Error loading models]")}}async handleOllamaModelSelection(e,t){var i;if(e)try{await this.getOllamaService().isModelAvailable(e)?t.empty():confirm(`Model "${e}" is not installed.

Would you like to download it now?`)&&await this.downloadOllamaModelWithProgress(e,t)}catch(s){(i=this.plugin.logger)==null||i.error("[OLLAMA-SETTINGS] Error handling Ollama model selection",{error:s}),t.empty(),t.createEl("div",{text:"[ERROR] Failed to check model availability",attr:{style:"color: var(--color-red);"}})}}async updateModelStatusIconForDropdown(e,t,i){var s;if(i)try{e.innerHTML="";const r=await this.isOllamaModelInstalled(i),o=e.createDiv();o.style.cssText="display:inline-flex; align-items:center; gap:6px; font-size:0.9em; padding:4px 6px; border-radius:4px;";const a=o.createSpan();C.setIcon(a,r?"check-circle":"download"),a.style.color=r?"var(--color-green)":"var(--color-orange)",a.style.cursor=r?"default":"pointer";const l=o.createSpan();if(l.textContent=r?"Available":"Not installed",l.style.color=r?"var(--color-green)":"var(--color-orange)",!r){const c=async p=>{var g;p.stopPropagation(),p.preventDefault();try{if(!confirm('[CONFIRM] Model "'+i+'" is not installed.\\n\\nWould you like to download it now?'))return;await this.downloadOllamaModelWithProgress(i,e),setTimeout(async()=>{await this.updateModelStatusIconForDropdown(e,t,i)},800),await this.isOllamaModelInstalled(i)&&(t==="embedding"?await this.addCustomOllamaEmbeddingToDefaults(i):await this.addCustomOllamaLLMToDefaults(i))}catch(h){(g=this.plugin.logger)==null||g.error("[OLLAMA-SETTINGS] download handler failed",{modelName:i,err:h}),new C.Notice("[ERROR] Failed to download model")}};a.addEventListener("click",c),l.addEventListener("click",c)}}catch(r){(s=this.plugin.logger)==null||s.error(`[OLLAMA-SETTINGS] Failed to update status icon for ${i}`,{error:r})}}async refreshOllamaStatus(e,t){var i,s,r;try{(i=this.plugin.logger)==null||i.debug("[OLLAMA-SETTINGS] Checking Ollama installation status"),e.innerHTML="",e.style.backgroundColor="";const a=await this.getOllamaService().checkServerStatus();if(a.running){const l=a.modelCount||0;e.style.backgroundColor="var(--color-green-bg)",e.style.color="var(--color-green)",e.innerHTML=`
					<div style="display: flex; align-items: center; gap: 6px;">
						<span>[INSTALLED]</span>
						<span>Ollama is running with ${l} model(s)</span>
					</div>
					<div style="font-size: 0.8em; margin-top: 4px; opacity: 0.8;">
						Server available at ${this.plugin.settings.ollamaBaseUrl||"http://localhost:11434"}
					</div>
				`,t.textContent="Upgrade Ollama",t.style.backgroundColor="var(--interactive-accent)",(s=this.plugin.logger)==null||s.debug("[OLLAMA-SETTINGS] Installation detected successfully",{modelCount:l})}else{e.style.backgroundColor="var(--color-orange-bg)",e.style.color="var(--color-orange)",e.innerHTML=`
					<div style="display: flex; align-items: center; gap: 6px;">
						<span>[NOT RUNNING]</span>
						<span>Ollama is not running or not installed</span>
					</div>
					<div style="font-size: 0.8em; margin-top: 4px; opacity: 0.8;">
						Try starting the service or install Ollama if not present
					</div>
				`;const l=e.createDiv();l.style.cssText="margin-top: 8px; display: flex; gap: 8px; align-items: center;";const c=l.createEl("button",{text:"Start Service",cls:"mod-cta"});c.style.fontSize="0.8em",c.style.padding="4px 8px",c.onclick=async()=>{await this.startOllamaService(e,t)},t.textContent="Install/Reinstall Ollama",t.style.backgroundColor="var(--color-orange)"}}catch(o){(r=this.plugin.logger)==null||r.debug("[OLLAMA-SETTINGS] Status check failed",{error:o}),e.style.backgroundColor="var(--color-red-bg)",e.style.color="var(--color-red)",e.innerHTML=`
				<div style="display: flex; align-items: center; gap: 6px;">
					<span>[ERROR]</span>
					<span>Unable to check Ollama status</span>
				</div>
				<div style="font-size: 0.8em; margin-top: 4px; opacity: 0.8;">
					Check installation or network connection
				</div>
			`,t.textContent="Install Ollama",t.style.backgroundColor="var(--interactive-accent)"}}async startOllamaService(e,t){var i,s;try{(i=this.plugin.logger)==null||i.debug("[OLLAMA-SETTINGS] Attempting to start Ollama service");const r=e.createDiv();r.style.cssText=`
				margin-top: 8px;
				padding: 6px;
				background: var(--color-blue-bg);
				color: var(--color-blue);
				border-radius: 4px;
				font-size: 0.8em;
			`,r.textContent="[STARTING] Attempting to start Ollama service...";const a=await this.getOllamaService().startService();if(r.remove(),a.success)await new Promise(l=>setTimeout(l,2e3)),await this.refreshOllamaStatus(e,t),new C.Notice("[SUCCESS] Ollama service started successfully");else{const l=e.createDiv();l.style.cssText=`
					margin-top: 8px;
					padding: 6px;
					background: var(--color-red-bg);
					color: var(--color-red);
					border-radius: 4px;
					font-size: 0.8em;
				`,l.innerHTML=`
					<div>[FAILED] Could not start Ollama service</div>
					<div style="margin-top: 4px; opacity: 0.8;">${a.message||"Try restarting your computer or reinstalling Ollama"}</div>
				`,new C.Notice(`[ERROR] Failed to start Ollama service - ${a.message||"try restarting your computer"}`)}}catch(r){(s=this.plugin.logger)==null||s.error("[OLLAMA-SETTINGS] Service recovery failed",{error:r}),new C.Notice("[ERROR] Failed to start Ollama service - operation failed")}}async handleOllamaInstallation(){var e,t;try{(e=this.plugin.logger)==null||e.debug("[OLLAMA-SETTINGS] Opening Ollama installation page");const{shell:i}=require("electron");await i.openExternal("https://ollama.com/download"),new C.Notice("[INFO] Ollama website opened - Download and install, then restart this app",8e3),this.showOllamaInstallationModal()}catch(i){(t=this.plugin.logger)==null||t.error("[OLLAMA-SETTINGS] Failed to open installation page",{error:i}),new C.Notice("[ERROR] Could not open Ollama website - please visit https://ollama.com/download manually")}}showOllamaInstallationModal(){const e=document.createElement("div");e.style.cssText=`
			position: fixed;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
			background: rgba(0, 0, 0, 0.8);
			display: flex;
			align-items: center;
			justify-content: center;
			z-index: 1000;
		`;const t=document.createElement("div");t.style.cssText=`
			background: var(--background-primary);
			border: 1px solid var(--background-modifier-border);
			border-radius: 8px;
			padding: 24px;
			max-width: 500px;
			width: 90%;
			max-height: 80%;
			overflow: auto;
		`,t.innerHTML=`
			<h3 style="margin: 0 0 16px 0; color: var(--text-accent);">Ollama Installation Instructions</h3>

			<div style="margin-bottom: 16px;">
				<h4 style="margin: 0 0 8px 0;">Step 1: Download Ollama</h4>
				<p style="margin: 0 0 8px 0; font-size: 0.9em; color: var(--text-muted);">
					The Ollama website should now be open in your browser. Download the installer for your operating system.
				</p>
			</div>

			<div style="margin-bottom: 16px;">
				<h4 style="margin: 0 0 8px 0;">Step 2: Install and Restart</h4>
				<p style="margin: 0 0 8px 0; font-size: 0.9em; color: var(--text-muted);">
					Run the installer and follow the prompts. After installation, restart Obsidian completely.
				</p>
			</div>

			<div style="margin-bottom: 16px;">
				<h4 style="margin: 0 0 8px 0;">Step 3: Verify Installation</h4>
				<p style="margin: 0 0 8px 0; font-size: 0.9em; color: var(--text-muted);">
					Return to this settings page and click "Refresh Status" to verify Ollama is running.
				</p>
			</div>

			<div style="background: var(--background-secondary); padding: 12px; border-radius: 6px; margin-bottom: 16px;">
				<p style="margin: 0; font-size: 0.85em; color: var(--text-muted);">
					<strong>Note:</strong> Ollama runs completely on your local machine. No data is sent to external servers, ensuring full privacy for your AI interactions.
				</p>
			</div>

			<div style="display: flex; gap: 12px; justify-content: flex-end;">
				<button id="ollama-modal-close" style="padding: 8px 16px; border: 1px solid var(--background-modifier-border); background: var(--background-primary); border-radius: 4px; cursor: pointer;">
					Close
				</button>
			</div>
		`,e.appendChild(t);const i=t.querySelector("#ollama-modal-close");i.onclick=()=>document.body.removeChild(e),e.onclick=s=>{s.target===e&&document.body.removeChild(e)},document.body.appendChild(e)}async addCustomLLMModelEntry(e){const t=new C.Setting(e).setName("Custom LLM Model").setDesc("Download any Ollama LLM model by name (e.g., llama3.2:3b, codellama:13b)");let i,s,r;const o=t.settingEl.createDiv();o.style.cssText=`
			margin-top: 8px;
			padding: 8px;
			border-radius: 4px;
			font-size: 0.9em;
			min-height: 20px;
		`,t.addText(a=>{i=a.inputEl,a.setPlaceholder("Enter model name (e.g., llama3.2:3b)").onChange(l=>{const c=!!l.trim();r&&typeof r.setDisabled=="function"?r.setDisabled(!c):s&&(s.disabled=!c)})}),t.addButton(a=>{r=a,s=a.buttonEl,a.setButtonText("⬇ Download").setTooltip("Download this model from Ollama registry").setDisabled(!0).onClick(async()=>{var c,p,g;const l=((i==null?void 0:i.value)||"").trim();if(!l){new C.Notice("[ERROR] Please enter a model name");return}try{(c=this.plugin.logger)==null||c.info("[OLLAMA-SETTINGS] Custom LLM download requested",{modelName:l}),r==null||r.setDisabled(!0),o.empty(),o.createEl("div",{text:`[START] Downloading ${l}...`});const h=this.getOllamaService();if(await h.isModelAvailable(l)){new C.Notice(`[INFO] Model ${l} is already installed`),o.empty(),o.createEl("div",{text:`[INFO] ${l} already available`});return}await this.downloadOllamaModelWithProgress(l,o);try{await h.isModelAvailable(l)&&(await this.addCustomOllamaLLMToDefaults(l),await this.refreshLLMDropdowns(),new C.Notice(`[SUCCESS] ${l} downloaded and added to LLM models.`))}catch(d){(p=this.plugin.logger)==null||p.warn("[OLLAMA-SETTINGS] Post-download availability check failed",{error:d,modelName:l})}i.value="",r==null||r.setDisabled(!0)}catch(h){(g=this.plugin.logger)==null||g.error("[OLLAMA-SETTINGS] Download failed",{error:h,modelName:l});const m=h instanceof Error?h.message:"Unknown error";new C.Notice(`[ERROR] Failed to download ${l}: ${m}`)}finally{const h=!!((i==null?void 0:i.value)||"").trim();r==null||r.setDisabled(!h)}})})}async addCustomEmbeddingModelEntry(e){const t=new C.Setting(e).setName("Custom Embedding Model").setDesc("Download any Ollama embedding model by name (e.g., nomic-embed-text, mxbai-embed-large)");let i,s,r;const o=t.settingEl.createDiv();o.style.cssText=`
			margin-top: 8px;
			padding: 8px;
			border-radius: 4px;
			font-size: 0.9em;
			min-height: 20px;
		`,t.addText(a=>{i=a.inputEl,a.setPlaceholder("Enter embedding model name").onChange(l=>{const c=!!l.trim();r&&typeof r.setDisabled=="function"?r.setDisabled(!c):s&&(s.disabled=!c)})}),t.addButton(a=>{r=a,s=a.buttonEl,a.setButtonText("⬇ Download").setTooltip("Download this embedding model from Ollama registry").setDisabled(!0).onClick(async()=>{var c,p,g;const l=((i==null?void 0:i.value)||"").trim();if(!l){new C.Notice("[ERROR] Please enter a model name");return}try{(c=this.plugin.logger)==null||c.info("[OLLAMA-SETTINGS] Custom embedding download requested",{modelName:l}),r==null||r.setDisabled(!0),o.empty(),o.createEl("div",{text:`[START] Downloading ${l}...`});const h=this.getOllamaService();if(await h.isModelAvailable(l)){new C.Notice(`[INFO] Model ${l} is already installed`),o.empty(),o.createEl("div",{text:`[INFO] ${l} already available`});return}await this.downloadOllamaModelWithProgress(l,o);try{await h.isModelAvailable(l)&&(await this.addCustomOllamaEmbeddingToDefaults(l),await this.refreshEmbeddingDropdowns(),new C.Notice(`[SUCCESS] ${l} downloaded and added to embedding models.`))}catch(d){(p=this.plugin.logger)==null||p.warn("[OLLAMA-SETTINGS] Post-download availability check failed",{error:d,modelName:l})}i.value="",r==null||r.setDisabled(!0)}catch(h){(g=this.plugin.logger)==null||g.error("[OLLAMA-SETTINGS] Download failed",{error:h,modelName:l});const m=h instanceof Error?h.message:"Unknown error";new C.Notice(`[ERROR] Failed to download ${l}: ${m}`)}finally{const h=!!((i==null?void 0:i.value)||"").trim();r==null||r.setDisabled(!h)}})})}async refreshEmbeddingDropdowns(){var e,t;try{await this.getOllamaService().getAvailableModels(!0);const s=document.querySelectorAll("select");for(const r of s){const o=r.closest(".setting-item");if(o){const a=o.querySelector(".setting-item-name");a&&((e=a.textContent)!=null&&e.toLowerCase().includes("embedding"))&&await this.populateOllamaModelsWithStatus(r)}}}catch(i){(t=this.plugin.logger)==null||t.debug("[OLLAMA-SETTINGS] Error refreshing embedding dropdowns",{error:i})}}async refreshLLMDropdowns(){var e,t,i,s;try{await this.getOllamaService().getAvailableModels(!0);const o=document.querySelectorAll("select");for(const a of o){const l=a.closest(".setting-item");if(l){const c=l.querySelector(".setting-item-name");if(c&&((e=c.textContent)!=null&&e.toLowerCase().includes("llm")||(t=c.textContent)!=null&&t.toLowerCase().includes("model"))&&!((i=c.textContent)!=null&&i.toLowerCase().includes("embedding"))){const p=Array.from(a.options),g=a.value;a.innerHTML="",this.getOllamaLLMModelsFromSettings().forEach(m=>{const d=document.createElement("option");d.value=m.name,d.textContent=m.name,a.appendChild(d)}),Array.from(a.options).some(m=>m.value===g)&&(a.value=g)}}}}catch(r){(s=this.plugin.logger)==null||s.debug("[OLLAMA-SETTINGS] Error refreshing LLM dropdowns",{error:r})}}}class Nd{constructor(e,t){this.app=e,this.plugin=t}createStatusIndicator(e){if(!this.plugin.settings.showDevelopmentIndicators)return"";switch(e){case"implemented":return" ✅";case"mock":return" ⚠️";case"todo":return" 🔧";case"partial":return" 🟡";default:return""}}addMCPToolsAccordion(e){var t;try{e.createEl("p",{text:"Configure MCP (Model Context Protocol) tools integration, default note folders, and third-party plugin connections.",cls:"setting-item-description"}),this.addMCPDefaultsSection(e),this.addMCPIntegrationsSection(e),this.addMCPToolDefinitionsSection(e)}catch(i){(t=this.plugin.logger)==null||t.error("Critical error in MCP Tools accordion",{error:i instanceof Error?i.message:String(i),stack:i instanceof Error?i.stack:void 0}),e.createEl("div",{text:`MCP Tools section failed to load: ${i instanceof Error?i.message:"Unknown error"}`,cls:"setting-item-description"})}}addMCPDefaultsSection(e){var t;try{e.createEl("h4",{text:"Defaults",cls:"setting-item-name"}),new C.Setting(e).setName("Default folder for MCP notes"+this.createStatusIndicator("implemented")).setDesc("Default folder where MCP-generated notes will be created. Start typing to see folder suggestions.").addSearch(i=>{var s,r,o;try{new Wt(this.app,i.inputEl),i.setPlaceholder("e.g., MCP Notes, Knowledge/MCP, or leave empty for vault root").setValue(((r=(s=this.plugin.settings.mcpTools)==null?void 0:s.defaults)==null?void 0:r.inboxFolder)||"").onChange(async a=>{var l;try{this.plugin.settings.mcpTools||(this.plugin.settings.mcpTools={defaults:{inboxFolder:"",enableSmartFolderResolution:!0},integrations:{templater:{detected:!1,enabled:!1,useTemplateFolders:!1},periodicNotes:{detected:!1,enabled:!1,usePeriodicFolders:!1}},tools:[]}),this.plugin.settings.mcpTools.defaults||(this.plugin.settings.mcpTools.defaults={inboxFolder:"",enableSmartFolderResolution:!0}),this.plugin.settings.mcpTools.defaults.inboxFolder=a,await this.plugin.saveSettings()}catch(c){(l=this.plugin.logger)==null||l.error("Error saving MCP default folder setting",{error:c})}})}catch(a){(o=this.plugin.logger)==null||o.error("Error setting up folder search input",{error:a})}})}catch(i){(t=this.plugin.logger)==null||t.error("Error in Defaults section",{error:i instanceof Error?i.message:String(i)}),e.createEl("div",{text:"Error loading Defaults section",cls:"setting-item-description"})}}addMCPIntegrationsSection(e){var t,i,s,r,o,a,l,c,p;try{e.createEl("h4",{text:"3rd Party Integrations",cls:"setting-item-name"});try{const g=!!this.app.plugins.plugins["templater-obsidian"],h=((s=(i=(t=this.plugin.settings.mcpTools)==null?void 0:t.integrations)==null?void 0:i.templater)==null?void 0:s.enabled)||!1,m=new C.Setting(e).setName("Templater Plugin Integration"+this.createStatusIndicator("implemented")).setDesc("Integrate with Templater plugin for enhanced note creation"),d=m.nameEl.createSpan({cls:"mcp-status-icon",text:g?" ✓":" ✗"});d.style.cssText=`
					color: ${g?"var(--color-green)":"var(--color-red)"};
					font-weight: bold;
					margin-right: 4px;
				`,m.addToggle(f=>{f.setValue(h).setDisabled(!g).onChange(async v=>{var w,S;try{this.plugin.settings.mcpTools||(this.plugin.settings.mcpTools={defaults:{inboxFolder:"",enableSmartFolderResolution:!0},integrations:{templater:{detected:!1,enabled:!1,useTemplateFolders:!1},periodicNotes:{detected:!1,enabled:!1,usePeriodicFolders:!1}},tools:[]}),this.plugin.settings.mcpTools.integrations.templater.enabled=v,await this.plugin.saveSettings(),(w=this.plugin.logger)==null||w.debug("Templater integration toggled",{enabled:v})}catch(x){(S=this.plugin.logger)==null||S.error("Failed to save Templater setting",{error:x})}})}),g||m.descEl.appendText(" (Plugin not detected - install Templater to enable this integration)")}catch(g){(r=this.plugin.logger)==null||r.error("Error setting up Templater integration",{error:g})}try{const g=!!this.app.plugins.plugins["periodic-notes"],h=((l=(a=(o=this.plugin.settings.mcpTools)==null?void 0:o.integrations)==null?void 0:a.periodicNotes)==null?void 0:l.enabled)||!1,m=new C.Setting(e).setName("Periodic Notes Plugin Integration"+this.createStatusIndicator("implemented")).setDesc("Integrate with Periodic Notes plugin for time-based note organization"),d=m.nameEl.createSpan({cls:"mcp-status-icon",text:g?" ✓":" ✗"});d.style.cssText=`
					color: ${g?"var(--color-green)":"var(--color-red)"};
					font-weight: bold;
					margin-right: 4px;
				`,m.addToggle(f=>{f.setValue(h).setDisabled(!g).onChange(async v=>{var w,S;try{this.plugin.settings.mcpTools||(this.plugin.settings.mcpTools={defaults:{inboxFolder:"",enableSmartFolderResolution:!0},integrations:{templater:{detected:!1,enabled:!1,useTemplateFolders:!1},periodicNotes:{detected:!1,enabled:!1,usePeriodicFolders:!1}},tools:[]}),this.plugin.settings.mcpTools.integrations.periodicNotes.enabled=v,await this.plugin.saveSettings(),(w=this.plugin.logger)==null||w.debug("Periodic Notes integration toggled",{enabled:v})}catch(x){(S=this.plugin.logger)==null||S.error("Failed to save Periodic Notes setting",{error:x})}})}),g||m.descEl.appendText(" (Plugin not detected - install Periodic Notes to enable this integration)")}catch(g){(c=this.plugin.logger)==null||c.error("Error setting up Periodic Notes integration",{error:g})}}catch(g){(p=this.plugin.logger)==null||p.error("Error in 3rd Party Integrations section",{error:g instanceof Error?g.message:String(g)}),e.createEl("div",{text:"Error loading 3rd Party Integrations section",cls:"setting-item-description"})}}addMCPToolDefinitionsSection(e){var t,i;try{(t=this.plugin.logger)==null||t.debug("Adding MCP Tool Definitions section"),e.createEl("h4",{text:"Tool Definitions",cls:"setting-item-name"}),new C.Setting(e).setName("Available MCP Tools"+this.createStatusIndicator("implemented")).setDesc("Currently available MCP tools from megamem_mcp_server.py");const s=e.createDiv("mcp-tools-display");s.style.cssText=`
				margin: 16px 0;
				border: 1px solid var(--background-modifier-border);
				border-radius: 6px;
				max-height: 400px;
				overflow-y: auto;
			`;const r=s.createDiv();r.style.cssText=`
				background: var(--background-modifier-hover);
				padding: 8px 12px;
				font-weight: 600;
				border-bottom: 1px solid var(--background-modifier-border);
			`,r.textContent="Graphiti Memory Tools (9 tools)",[{name:"add_memory",description:"Add a memory/episode to the graph (aliases: mm, megamem, memory)"},{name:"search_memory_nodes",description:"Search for nodes in the memory graph (aliases: mm, megamem, memory)"},{name:"search_memory_facts",description:"Search for facts/relationships in the memory graph (aliases: mm, megamem, memory)"},{name:"get_episodes",description:"Get episodes from the memory graph (aliases: mm, megamem, memory)"},{name:"clear_graph",description:"Clear the entire memory graph (aliases: mm, megamem, memory)"},{name:"get_entity_edge",description:"Get entity edges from the graph (aliases: mm, megamem, memory)"},{name:"delete_entity_edge",description:"Delete entity edges from the graph (aliases: mm, megamem, memory)"},{name:"delete_episode",description:"Delete an episode from the graph (aliases: mm, megamem, memory)"},{name:"list_group_ids",description:"List all available group IDs (namespaces) in the vault (aliases: mm, megamem, memory)"}].forEach(c=>{const p=s.createDiv();p.style.cssText=`
					padding: 8px 12px;
					border-bottom: 1px solid var(--background-modifier-border-hover);
				`;const g=p.createDiv();g.style.cssText=`
					font-weight: 500;
					color: var(--text-accent);
					font-family: var(--font-monospace);
					font-size: 13px;
				`,g.textContent=c.name;const h=p.createDiv();h.style.cssText=`
					font-size: 12px;
					color: var(--text-muted);
					margin-top: 2px;
				`,h.textContent=c.description});const a=s.createDiv();a.style.cssText=`
				background: var(--background-modifier-hover);
				padding: 8px 12px;
				font-weight: 600;
				border-bottom: 1px solid var(--background-modifier-border);
				margin-top: 4px;
			`,a.textContent="Obsidian Vault Tools (7 tools)",[{name:"search_obsidian_notes",description:"Search for notes in Obsidian vault by filename and/or content (aliases: mv, my vault, obsidian)"},{name:"read_obsidian_note",description:"Read a specific note from Obsidian (aliases: mv, my vault, obsidian)"},{name:"update_obsidian_note",description:"Update content of an existing note (aliases: mv, my vault, obsidian)"},{name:"create_obsidian_note",description:"Create a new note in Obsidian (aliases: mv, my vault, obsidian)"},{name:"list_obsidian_vaults",description:"List all available Obsidian vaults (aliases: mv, my vault, obsidian)"},{name:"explore_vault_folders",description:"Explore folder structure in an Obsidian vault (query by natural language or path)"},{name:"create_note_with_template",description:"Create a new note using a templater template (fuzzy-match) in the vault"}].forEach(c=>{const p=s.createDiv();p.style.cssText=`
					padding: 8px 12px;
					border-bottom: 1px solid var(--background-modifier-border-hover);
				`;const g=p.createDiv();g.style.cssText=`
					font-weight: 500;
					color: var(--text-accent);
					font-family: var(--font-monospace);
					font-size: 13px;
				`,g.textContent=c.name;const h=p.createDiv();h.style.cssText=`
					font-size: 12px;
					color: var(--text-muted);
					margin-top: 2px;
				`,h.textContent=c.description})}catch(s){(i=this.plugin.logger)==null||i.error("Error in Tool Definitions section",{error:s instanceof Error?s.message:String(s)}),e.createEl("div",{text:"Error loading Tool Definitions section",cls:"setting-item-description"})}}async autoDetectPlugins(){var e,t,i;try{(e=this.plugin.logger)==null||e.debug("Running auto-detection for all plugins");const s=this.app.vault.adapter,r=s==null?void 0:s.basePath,o=!!this.app.plugins.plugins["templater-obsidian"],a=!!this.app.plugins.plugins["periodic-notes"];this.ensureMCPToolsSettings(),this.plugin.settings.mcpTools.integrations.templater.detected=o,this.plugin.settings.mcpTools.integrations.periodicNotes.detected=a,await this.plugin.saveSettings(),(t=this.plugin.logger)==null||t.debug("Auto-detection completed",{templater:o,periodicNotes:a})}catch(s){(i=this.plugin.logger)==null||i.error("Auto-detection failed",{error:s})}}isPluginDetected(e){var t,i,s,r;try{return((s=(i=(t=this.plugin.settings.mcpTools)==null?void 0:t.integrations)==null?void 0:i[e])==null?void 0:s.detected)||!1}catch(o){return(r=this.plugin.logger)==null||r.error("Error checking plugin detection status",{pluginName:e,error:o}),!1}}ensureMCPToolsSettings(){var e,t;try{this.plugin.settings.mcpTools||(this.plugin.settings.mcpTools={defaults:{inboxFolder:"",enableSmartFolderResolution:!0},integrations:{templater:{detected:!1,enabled:!1,useTemplateFolders:!1},periodicNotes:{detected:!1,enabled:!1,usePeriodicFolders:!1}},tools:[]}),this.plugin.settings.mcpTools.defaults||(this.plugin.settings.mcpTools.defaults={inboxFolder:"",enableSmartFolderResolution:!0}),this.plugin.settings.mcpTools.integrations||(this.plugin.settings.mcpTools.integrations={templater:{detected:!1,enabled:!1,useTemplateFolders:!1},periodicNotes:{detected:!1,enabled:!1,usePeriodicFolders:!1}}),this.plugin.settings.mcpTools.tools||(this.plugin.settings.mcpTools.tools=[]),(e=this.plugin.logger)==null||e.debug("MCP tools settings structure ensured")}catch(i){(t=this.plugin.logger)==null||t.error("Error ensuring MCP tools settings",{error:i})}}}class Ad extends C.PluginSettingTab{constructor(e,t){super(e,t),this.defaultNamespaceInput=null,this.folderToggle=null,this.propertyToggle=null,this.previousConnectionStatus="",this.accordionStates=new Map,this.plugin=t,this.ollamaSettings=new Md(e,t),this.mcpToolSettings=new Nd(e,t)}_initSharedTextDebounce(){var t;if(this._sharedTextDebounce)return;let e;this._sharedTextDebounce=i=>{e&&clearTimeout(e),e=setTimeout(async()=>{var s,r,o;try{const a=JSON.parse(i);switch(a.key){case"includedFolders":this.plugin.settings.includedFolders=a.value.split(`
`).map(l=>l.trim()).filter(l=>l.length>0);break;case"excludedFolders":this.plugin.settings.excludedFolders=a.value.split(`
`).map(l=>l.trim()).filter(l=>l.length>0);break;case"globallyIgnoredFields":this.plugin.settings.globallyIgnoredFields=a.value.split(`
`).map(l=>l.trim()).filter(l=>l.length>0);break;case"defaultNamespace":this.plugin.settings.defaultNamespace=a.value;break;default:(s=this.plugin.logger)==null||s.warn("[SETTINGS] Unknown key received by sharedTextDebounce",{key:a.key,payload:i});break}await this.plugin.saveSettings(),(r=this.plugin.logger)==null||r.debug("[SETTINGS] Shared debounced save executed",{key:a.key})}catch(a){(o=this.plugin.logger)==null||o.error("[SETTINGS] Shared debounced save error",{error:a,payload:i})}},2e3)},(t=this.plugin.logger)==null||t.debug("[SETTINGS] Shared text debouncer initialized")}ensureSharedDebounceInitialized(){this._initSharedTextDebounce()}display(){const{containerEl:e}=this;e.empty(),this.ensureSharedDebounceInitialized(),e.createEl("h1",{text:"MegaMem Plugin Settings"}),e.createEl("p",{text:"Configure your knowledge graph syncronization and mcp server.",cls:"setting-item-description"}),this.addAccordionStyles(e),this.addAccordionSectionSafely(e,"API Keys",t=>this.addAPIKeysAccordion(t),!1),this.addAccordionSectionSafely(e,"LLM Configuration",t=>this.addLLMAccordion(t),!1),this.addAccordionSectionSafely(e,"Database Configuration",t=>this.addDatabaseAccordion(t),!1),this.addAccordionSectionSafely(e,"Python Environment",t=>this.addPythonAccordion(t),!1),this.addAccordionSectionSafely(e,"Sync Configuration",t=>this.addSyncAccordion(t),!1),this.addAccordionSectionSafely(e,"Knowledge Namespacing",t=>this.addKnowledgeNamespacingAccordion(t),!1),this.addAccordionSectionSafely(e,"Servers",t=>this.addServersAccordion(t),!1),this.addAccordionSectionSafely(e,"MCP Tools",t=>this.mcpToolSettings.addMCPToolsAccordion(t),!1),this.addAccordionSectionSafely(e,"Advanced Settings",t=>this.addAdvancedAccordion(t),!1),this.addAccordionSectionSafely(e,"Actions",t=>this.addActionsAccordion(t),!1),this.addAccordionSectionSafely(e,"Development Options",t=>this.addDevelopmentAccordion(t),!1)}addAccordionStyles(e){const t=e.createEl("style");t.textContent=`
			.graphiti-accordion {
				margin-bottom: 10px;
				border: 1px solid var(--background-modifier-border);
				border-radius: 6px;
			}
			.graphiti-accordion-header {
				padding: 12px 16px;
				background: var(--background-modifier-hover);
				cursor: pointer;
				user-select: none;
				display: flex;
				justify-content: space-between;
				align-items: center;
				font-weight: 500;
				border-radius: 6px 6px 0 0;
			}
			.graphiti-accordion-header:hover {
				background: var(--background-modifier-border);
			}
			.graphiti-accordion-content {
				padding: 16px 16px 16px 16px;
				border-top: 1px solid var(--background-modifier-border);
			}
			.graphiti-accordion-arrow {
				font-size: 12px;
				transition: transform 0.2s ease;
			}
		`}addAccordionSection(e,t,i,s=!1){const r=e.createDiv("graphiti-accordion"),o=r.createDiv("graphiti-accordion-header"),a=o.createSpan("graphiti-accordion-title");a.textContent=t;const l=o.createDiv("graphiti-accordion-controls");l.style.display="flex",l.style.alignItems="center",l.style.gap="8px";const c=r.createDiv("graphiti-accordion-content"),p=this.accordionStates.get(t),g=typeof p=="boolean"?p:s;c.style.display=g?"block":"none";const h=l.createSpan("graphiti-accordion-arrow");h.textContent=g?"▼":"▶",h.style.cursor="pointer",h.setAttr("role","button"),h.addEventListener("click",m=>{m.stopPropagation(),m.preventDefault();const f=!(c.style.display!=="none");c.style.display=f?"block":"none",h.textContent=f?"▼":"▶",this.accordionStates.set(t,f)}),i.call(this,c)}addAccordionSectionSafely(e,t,i,s=!1){var r;try{this.addAccordionSection(e,t,i,s)}catch(o){(r=this.plugin.logger)==null||r.error(`[SETTINGS] Error rendering ${t} accordion`,{error:o});const a=e.createDiv("graphiti-accordion"),l=a.createDiv("graphiti-accordion-header");l.textContent=`${t} (Error)`;const c=a.createDiv("graphiti-accordion-content");c.style.display="none",c.createEl("div",{text:`Error loading ${t} section. Check console for details.`,cls:"setting-item-description"})}}addAPIKeysAccordion(e){const t=["openai","anthropic","google","azure","voyage","venice","openrouter"];for(const a of t){const l=this.getProviderDisplayName(a);new C.Setting(e).setName(`${l} API Key`+this.createStatusIndicator("implemented")).setDesc(`API key for ${l} services`).addText(c=>{c.inputEl.type="password",c.setPlaceholder(`Enter ${l} API key`).setValue(this.plugin.settings.apiKeys[a]||"").onChange(async p=>{this.plugin.settings.apiKeys[a]=p||void 0,await this.plugin.saveSettings()})})}e.createEl("h4",{text:"Local AI Models",cls:"setting-item-name"});const i=new C.Setting(e).setName("Ollama - Fully Private Local Models"+this.createStatusIndicator("implemented")).setDesc("Run AI models locally on your machine without sending data to external services"),s=i.settingEl.createDiv();s.style.cssText="margin-top: 8px; display: flex; gap: 8px; align-items: center;";const r=e.createDiv();r.style.cssText=`
			margin-top: 8px;
			margin-bottom: 16px;
			padding: 8px;
			border-radius: 4px;
			font-size: 0.9em;
			border: 1px solid var(--background-modifier-border);
		`;let o;i.addButton(a=>{o=a.buttonEl,a.setButtonText("Install Ollama").onClick(async()=>{await this.ollamaSettings.handleOllamaInstallation()})}),i.addButton(a=>{a.buttonEl,a.setButtonText("Refresh Status").onClick(async()=>{await this.ollamaSettings.refreshOllamaStatus(r,o)})}),setTimeout(()=>{this.ollamaSettings.refreshOllamaStatus(r,o)},50),new C.Setting(e).setName("Validate All API Keys"+this.createStatusIndicator("implemented")).setDesc("Validate all configured API keys without testing models").addButton(a=>a.setButtonText("Validate API Keys").setCta().onClick(async()=>{await this.validateAPIKeys(a.buttonEl)}))}async addLLMAccordion(e){new C.Setting(e).setName("LLM Defaults").setDesc("Merge recommended defaults into your current settings without overwriting custom entries").addButton(l=>l.setButtonText("Load Defaults").onClick(async()=>{try{const c=kd(),p=this.plugin.settings,g=(h,m)=>{(!p[h]||typeof p[h]!="object")&&(p[h]={});const d=p[h];for(const f of Object.keys(m||{})){if(!d[f]||typeof d[f]!="object"){d[f]={...m[f]};continue}const v=d[f],w=m[f];for(const S of Object.keys(w))S in v||(v[S]=w[S])}};g("llmDefaults",c.llmDefaults),g("llmSmallDefaults",c.llmSmallDefaults),g("embeddingDefaults",c.embeddingDefaults),g("llmCrossEncoderDefaults",c.llmCrossEncoderDefaults),await this.plugin.saveSettings(),this.display()}catch{}})),new C.Setting(e).setName("LLM Provider"+this.createStatusIndicator("implemented")).setDesc("Choose your language model provider").addDropdown(l=>l.addOption("openai","OpenAI").addOption("anthropic","Anthropic").addOption("google","Google AI").addOption("azure","Azure OpenAI").addOption("ollama","Ollama (Local)").addOption("venice","Venice.ai").addOption("openrouter","OpenRouter").setValue(this.plugin.settings.llmProvider).onChange(async c=>{const p=c;this.plugin.settings.llmProvider=p,await this.plugin.saveSettings(),this.updateLLMDefaults(p)}));const t=new C.Setting(e).setName("LLM Model"+this.createStatusIndicator("implemented")).setDesc("Primary language model for processing");let i;t.addDropdown(async l=>{await this.populateLLMModels(l,this.plugin.settings.llmProvider),l.setValue(this.plugin.settings.llmModel).onChange(async c=>{this.plugin.settings.llmModel=c,await this.plugin.saveSettings(),this.plugin.settings.llmProvider==="ollama"&&c&&await this.updateModelStatusIconForDropdown(i,"llm",c)})}),i=t.settingEl.createDiv(),i.style.cssText=`
			display: inline-flex;
			align-items: center;
			margin-left: 8px;
			vertical-align: middle;
		`,this.plugin.settings.llmProvider==="ollama"&&this.plugin.settings.llmModel&&setTimeout(async()=>{this.plugin.settings.llmModel&&setTimeout(async()=>{const l=await this.ollamaSettings.isOllamaModelInstalled(this.plugin.settings.llmModel);i.empty();const c=i.createDiv();c.style.cssText="display: inline-flex; align-items: center; gap: 4px; font-size: 0.9em;";const p=c.createSpan();C.setIcon(p,l?"check-circle":"download"),p.style.color=l?"var(--color-green)":"var(--color-orange)";const g=c.createSpan();g.textContent=l?"Available":"Not installed",g.style.color=l?"var(--color-green)":"var(--color-orange)"},100)},100);const s=new C.Setting(e).setName("LLM Model Small"+this.createStatusIndicator("implemented")).setDesc("Smaller, faster model for re-ranking operations (optional)");let r;s.addDropdown(async l=>{await this.populateLLMModels(l,this.plugin.settings.llmProvider,!0),l.setValue(this.plugin.settings.llmSmallModel||"").onChange(async c=>{this.plugin.settings.llmSmallModel=c||void 0,await this.plugin.saveSettings(),this.plugin.settings.llmProvider==="ollama"&&c&&await this.ollamaSettings.updateModelStatusIconForDropdown(r,"llm_small",c)})}),r=s.settingEl.createDiv(),r.style.cssText=`
			display: inline-flex;
			align-items: center;
			margin-left: 8px;
			vertical-align: middle;
		`,this.plugin.settings.llmProvider==="ollama"&&this.plugin.settings.llmSmallModel&&setTimeout(async()=>{this.plugin.settings.llmSmallModel&&await this.ollamaSettings.updateModelStatusIconForDropdown(r,"llm_small",this.plugin.settings.llmSmallModel)},100),this.plugin.settings.llmProvider==="ollama"&&await this.ollamaSettings.addCustomLLMModelEntry(e),this.plugin.settings.llmProvider==="openrouter"&&(new C.Setting(e).setName("OpenRouter Preset Slug"+this.createStatusIndicator("implemented")).setDesc("OpenRouter preset name to use (leave empty to disable preset usage)").addText(l=>l.setPlaceholder("e.g., ravenel-bridge").setValue(this.plugin.settings.openrouterPresetSlug||"").onChange(async c=>{this.plugin.settings.openrouterPresetSlug=c||void 0,await this.plugin.saveSettings()})).addButton(l=>l.setButtonText("Add Default").setTooltip("Add preset model to dropdowns").onClick(async()=>{var g;const c=this.plugin.settings.openrouterPresetSlug;if(!c){new C.Notice("[ERROR] Please enter a preset slug first");return}const p=l.buttonEl.textContent;l.buttonEl.textContent="Adding...",l.setDisabled(!0);try{const h=`@preset/${c}`,m={desc:"Models controlled by OpenRouter Preset",recommended:!0};this.plugin.settings.llmDefaults||(this.plugin.settings.llmDefaults={}),this.plugin.settings.llmDefaults.openrouter||(this.plugin.settings.llmDefaults.openrouter={}),this.plugin.settings.llmSmallDefaults||(this.plugin.settings.llmSmallDefaults={}),this.plugin.settings.llmSmallDefaults.openrouter||(this.plugin.settings.llmSmallDefaults.openrouter={}),this.plugin.settings.llmDefaults.openrouter[h]=m,this.plugin.settings.llmSmallDefaults.openrouter[h]=m,await this.plugin.saveSettings(),this.display(),new C.Notice(`[SUCCESS] Added ${h} to model dropdowns`)}catch(h){(g=this.plugin.logger)==null||g.error("Failed to add preset default",{error:h,presetSlug:c}),new C.Notice("[ERROR] Failed to add preset default")}finally{l.buttonEl.textContent=p,l.setDisabled(!1)}})),new C.Setting(e).setName("Use Preset with Custom Model"+this.createStatusIndicator("implemented")).setDesc("When enabled, append preset to custom OpenRouter models (e.g., openai/gpt-4o@preset/your-preset)").addToggle(l=>l.setValue(this.plugin.settings.openrouterUsePresetWithCustomModel||!1).onChange(async c=>{this.plugin.settings.openrouterUsePresetWithCustomModel=c,await this.plugin.saveSettings()}))),new C.Setting(e).setName("Test LLM Connection"+this.createStatusIndicator("implemented")).setDesc("Test your language model provider configuration").addButton(l=>l.setButtonText("Test LLM Connection").setCta().onClick(async()=>{await this.testLLMConnection(l.buttonEl)})),new C.Setting(e).setName("Embedding Provider"+this.createStatusIndicator("implemented")).setDesc("Choose your embedding provider").addDropdown(l=>l.addOption("openai","OpenAI").addOption("google","Google AI").addOption("voyage","Voyage AI").addOption("ollama","Ollama (Local)").setValue(this.plugin.settings.embedderProvider).onChange(async c=>{var g,h,m,d;const p=c;if((g=this.plugin.logger)==null||g.debug("[EMBEDDING-PROVIDER] Provider changed",{oldProvider:this.plugin.settings.embedderProvider,newProvider:p,vaultName:this.app.vault.getName(),hasVaultRegistryService:!!this.plugin.vaultRegistryService}),this.plugin.settings.embedderProvider=p,await this.plugin.saveSettings(),this.updateEmbedderDefaults(p),this.plugin.vaultRegistryService&&this.plugin.settings.embeddingModel)try{const f=this.app.vault.getName();(h=this.plugin.logger)==null||h.debug("[EMBEDDING-PROVIDER-CHANGE] Updating vault registry from provider dropdown",{oldProvider:this.plugin.settings.embedderProvider,newProvider:p,model:this.plugin.settings.embeddingModel,dimensions:this.plugin.settings.ollamaEmbeddingDim||768,vaultName:f}),await this.plugin.vaultRegistryService.updateVaultEmbeddingModel(f,this.plugin.settings.embeddingModel,this.plugin.settings.ollamaEmbeddingDim||768,p),(m=this.plugin.logger)==null||m.debug("[EMBEDDING-PROVIDER] Vault registry updated with new provider configuration",{vaultName:f,provider:p,model:this.plugin.settings.embeddingModel,dimensions:this.plugin.settings.ollamaEmbeddingDim||768})}catch(f){(d=this.plugin.logger)==null||d.error("[EMBEDDING-PROVIDER] Failed to update vault registry",{error:f,provider:p})}})),await this.addEnhancedEmbeddingModelSetting(e),this.plugin.settings.embedderProvider==="ollama"&&await this.ollamaSettings.addCustomEmbeddingModelEntry(e),new C.Setting(e).setName("Test Embedding Connection"+this.createStatusIndicator("implemented")).setDesc("Test your embedding provider configuration").addButton(l=>l.setButtonText("Test Embedding").onClick(async()=>{await this.testEmbeddingConnection(l.buttonEl)})),new C.Setting(e).setName("Test Provider Combination"+this.createStatusIndicator("implemented")).setDesc("Test that your LLM and embedding providers work together correctly with full pipeline testing").addButton(l=>l.setButtonText("Test Full Pipeline").onClick(async()=>{await this.testFullPipeline(l.buttonEl)})),this.plugin.settings.loadDaemonOnLaunch&&this.plugin.settings.experimentalDaemonMode&&new C.Setting(e).setName("Reload Sync Daemon"+this.createStatusIndicator("implemented")).setDesc("Restart the sync daemon to apply new provider configuration").addButton(l=>l.setButtonText("Reload Daemon").onClick(async()=>{await this.reloadSyncDaemon(l.buttonEl)})),e.createEl("h4",{text:"Cross-Encoder / Reranker Configuration",cls:"setting-item-name"});let o;new C.Setting(e).setName("Cross-Encoder Provider"+this.createStatusIndicator("implemented")).setDesc("Choose your cross-encoder/reranker provider for improved search ranking").addDropdown(l=>l.addOption("none","None - Disable reranking").addOption("openai","OpenAI Reranker").addOption("bge","BGE Reranker (Local)").addOption("gemini","Gemini Reranker").setValue(this.plugin.settings.crossEncoderClient||"none").onChange(async c=>{const p=c;this.plugin.settings.crossEncoderClient=p,(p==="bge"||p==="none")&&(this.plugin.settings.crossEncoderModel=void 0),await this.plugin.saveSettings(),this.updateCrossEncoderDefaults(p),o&&(o.style.display=p==="none"||p==="bge"?"none":"block")}));const a=new C.Setting(e).setName("Cross-Encoder Model"+this.createStatusIndicator("implemented")).setDesc("Specific model for cross-encoding/reranking operations");o=a.settingEl,o.style.display=this.plugin.settings.crossEncoderClient==="none"?"none":"block",a.addDropdown(async l=>{await this.populateCrossEncoderModels(l,this.plugin.settings.crossEncoderClient||"none"),l.setValue(this.plugin.settings.crossEncoderModel||"").onChange(async c=>{this.plugin.settings.crossEncoderModel=c||void 0,await this.plugin.saveSettings()})}),this.addProviderSpecificSettings(e)}addDatabaseAccordion(e){new C.Setting(e).setName("Database Type"+this.createStatusIndicator("implemented")).setDesc("Choose your graph database backend").addDropdown(t=>t.addOption("neo4j","Neo4j").addOption("falkordb","FalkorDB").setValue(this.plugin.settings.databaseType).onChange(async i=>{const s=i;this.plugin.settings.databaseType=s,await this.plugin.saveSettings(),this.display()})),this.addDatabaseSpecificFields(e),new C.Setting(e).setName("Test Database Connection"+this.createStatusIndicator("implemented")).setDesc("Verify your database connection settings").addButton(t=>t.setButtonText("Test Connection").setCta().onClick(async()=>{await this.testDatabaseConnection(t.buttonEl)})),new C.Setting(e).setName("Initialize Database Schema"+this.createStatusIndicator("implemented")).setDesc("Set up the required Graphiti schema in your database (run this after successful connection test)").addButton(t=>t.setButtonText("Initialize Schema").onClick(async()=>{await this.initializeDatabaseSchema(t.buttonEl)}))}addDatabaseSpecificFields(e){const t=this.plugin.settings.databaseType;t==="neo4j"?(new C.Setting(e).setName("Neo4j URI"+this.createStatusIndicator("implemented")).setDesc("Neo4j connection URI (e.g., bolt://localhost:7687)").addText(i=>i.setPlaceholder("bolt://localhost:7687").setValue(this.plugin.settings.databaseConfigs.neo4j.uri).onChange(async s=>{this.plugin.settings.databaseConfigs.neo4j.uri=s,await this.plugin.saveSettings()})),new C.Setting(e).setName("Neo4j Username"+this.createStatusIndicator("implemented")).setDesc("Neo4j database username").addText(i=>i.setPlaceholder("neo4j").setValue(this.plugin.settings.databaseConfigs.neo4j.username).onChange(async s=>{this.plugin.settings.databaseConfigs.neo4j.username=s,await this.plugin.saveSettings()})),new C.Setting(e).setName("Neo4j Password"+this.createStatusIndicator("implemented")).setDesc("Neo4j database password").addText(i=>{i.inputEl.type="password",i.setPlaceholder("Enter password").setValue(this.plugin.settings.databaseConfigs.neo4j.password).onChange(async s=>{this.plugin.settings.databaseConfigs.neo4j.password=s,await this.plugin.saveSettings()})}),new C.Setting(e).setName("Neo4j Database Name"+this.createStatusIndicator("implemented")).setDesc("Name of the Neo4j database to use").addText(i=>i.setPlaceholder("neo4j").setValue(this.plugin.settings.databaseConfigs.neo4j.database).onChange(async s=>{this.plugin.settings.databaseConfigs.neo4j.database=s,await this.plugin.saveSettings()}))):t==="falkordb"&&(new C.Setting(e).setName("FalkorDB Host"+this.createStatusIndicator("implemented")).setDesc("FalkorDB host address").addText(i=>i.setPlaceholder("localhost").setValue(this.plugin.settings.databaseConfigs.falkordb.host).onChange(async s=>{this.plugin.settings.databaseConfigs.falkordb.host=s,await this.plugin.saveSettings()})),new C.Setting(e).setName("FalkorDB Port"+this.createStatusIndicator("implemented")).setDesc("FalkorDB port number").addText(i=>i.setPlaceholder("6379").setValue(this.plugin.settings.databaseConfigs.falkordb.port.toString()).onChange(async s=>{const r=parseInt(s);!isNaN(r)&&r>0&&r<65536&&(this.plugin.settings.databaseConfigs.falkordb.port=r,await this.plugin.saveSettings())})),new C.Setting(e).setName("FalkorDB Username (Optional)"+this.createStatusIndicator("implemented")).setDesc("FalkorDB username (leave empty if not using authentication)").addText(i=>i.setPlaceholder("Optional").setValue(this.plugin.settings.databaseConfigs.falkordb.username||"").onChange(async s=>{this.plugin.settings.databaseConfigs.falkordb.username=s||void 0,await this.plugin.saveSettings()})),new C.Setting(e).setName("FalkorDB Password (Optional)"+this.createStatusIndicator("implemented")).setDesc("FalkorDB password (leave empty if not using authentication)").addText(i=>{i.inputEl.type="password",i.setPlaceholder("Optional").setValue(this.plugin.settings.databaseConfigs.falkordb.password||"").onChange(async s=>{this.plugin.settings.databaseConfigs.falkordb.password=s||void 0,await this.plugin.saveSettings()})}),new C.Setting(e).setName("FalkorDB Database Name"+this.createStatusIndicator("implemented")).setDesc("Name of the FalkorDB database to use").addText(i=>i.setPlaceholder("default_db").setValue(this.plugin.settings.databaseConfigs.falkordb.database).onChange(async s=>{this.plugin.settings.databaseConfigs.falkordb.database=s,await this.plugin.saveSettings()})))}addPythonAccordion(e){new C.Setting(e).setName("Python Dependencies Status"+this.createStatusIndicator("implemented")).setDesc("Check if Graphiti Python dependencies are installed").addButton(t=>t.setButtonText("Check Dependencies").onClick(async()=>{await this.checkPythonDependencies(t.buttonEl)})),new C.Setting(e).setName("Install Python Dependencies"+this.createStatusIndicator("implemented")).setDesc("Install Graphiti and required Python packages using hybrid pip/uv approach").addButton(t=>t.setButtonText("Install Dependencies").setCta().onClick(async()=>{await this.installPythonDependencies(t.buttonEl)})),new C.Setting(e).setName("Python Path (Optional)"+this.createStatusIndicator("implemented")).setDesc("Specify custom Python executable path (leave empty for auto-detection)").addText(t=>t.setPlaceholder("Auto-detect").setValue(this.plugin.settings.pythonPath||"").onChange(async i=>{this.plugin.settings.pythonPath=i||void 0,await this.plugin.saveSettings()}))}addSyncAccordion(e){let t=null;new C.Setting(e).setName("Automatically sync notes at scheduled intervals"+this.createStatusIndicator("partial")).setDesc("Automatically sync notes when they are saved or at regular intervals"+(this.plugin.settings.showDevelopmentIndicators?" (Enhanced UI complete, sync engine needs update)":"")).addToggle(i=>{i.setValue(this.plugin.settings.autoSync).onChange(async s=>{const r=this;r._settingsDebounceTimer&&clearTimeout(r._settingsDebounceTimer),r._settingsDebounceTimer=setTimeout(async()=>{r.plugin.settings.autoSync=s,await r.plugin.saveSettings(),t&&(t.style.display=s?"block":"none")},1e3)})}),t=e.createDiv(),t.style.display=this.plugin.settings.autoSync?"block":"none",t.style.marginLeft="24px",t.style.marginTop="8px",new C.Setting(t).setName("Sync Options"+this.createStatusIndicator("partial")).setDesc("Choose which notes to include in automatic sync operations").addDropdown(i=>i.addOption("new_only","New notes only - Sync only newly created notes").addOption("new_and_updated","New and updated notes - Sync both new and modified notes").setValue(this.plugin.settings.syncOptions).onChange(async s=>{this.plugin.settings.syncOptions=s,await this.plugin.saveSettings()})),new C.Setting(e).setName("Sync Interval"+this.createStatusIndicator("partial")).setDesc("Automatic sync interval in minutes (0 to disable)"+(this.plugin.settings.showDevelopmentIndicators?" (UI complete, sync engine not implemented)":"")).addSlider(i=>i.setLimits(0,60,1).setValue(this.plugin.settings.syncInterval).setDynamicTooltip().onChange(async s=>{this.plugin.settings.syncInterval=s,await this.plugin.saveSettings()})),e.createEl("h4",{text:"Folder Configuration",cls:"setting-item-name"}),new C.Setting(e).setName("Included Folders"+this.createStatusIndicator("implemented")).setDesc("Folders to include in sync. Leave empty to include all folders."),this.plugin.settings.includedFolders.forEach((i,s)=>{const r=new C.Setting(e).addSearch(o=>{new Wt(this.app,o.inputEl),o.inputEl.onmousedown=a=>a.stopPropagation(),o.setPlaceholder("Select folder or type path...").setValue(i).onChange(async a=>{this.plugin.settings.includedFolders[s]=a,await this.plugin.saveSettings()})}).addExtraButton(o=>{o.setIcon("cross").setTooltip("Delete").onClick(async a=>{a&&a.stopPropagation(),this.plugin.settings.includedFolders.splice(s,1),await this.plugin.saveSettings(),this.display()})});r.infoEl.remove(),r.controlEl.onmousedown=o=>o.stopPropagation()}),new C.Setting(e).addButton(i=>{i.setButtonText("Add Folder").setCta().onClick(async s=>{s&&s.stopPropagation(),this.plugin.settings.includedFolders.push(""),await this.plugin.saveSettings(),this.display()}),i.buttonEl.onmousedown=s=>s.stopPropagation()}),new C.Setting(e).setName("Excluded Folders"+this.createStatusIndicator("implemented")).setDesc("Folders to exclude from sync (e.g., .obsidian, .trash)."),this.plugin.settings.excludedFolders.forEach((i,s)=>{const r=new C.Setting(e).addSearch(o=>{new Wt(this.app,o.inputEl),o.inputEl.onmousedown=a=>a.stopPropagation(),o.setPlaceholder("Select folder or type path...").setValue(i).onChange(async a=>{this.plugin.settings.excludedFolders[s]=a,await this.plugin.saveSettings()})}).addExtraButton(o=>{o.setIcon("cross").setTooltip("Delete").onClick(async a=>{a&&a.stopPropagation(),this.plugin.settings.excludedFolders.splice(s,1),await this.plugin.saveSettings(),this.display()})});r.infoEl.remove(),r.controlEl.onmousedown=o=>o.stopPropagation()}),new C.Setting(e).addButton(i=>{i.setButtonText("Add Folder").setCta().onClick(async s=>{s&&s.stopPropagation(),this.plugin.settings.excludedFolders.push(""),await this.plugin.saveSettings(),this.display()}),i.buttonEl.onmousedown=s=>s.stopPropagation()}),new C.Setting(e).setName("Globally Ignored Fields"+this.createStatusIndicator("implemented")).setDesc("YAML frontmatter fields to ignore globally across all notes."),this.plugin.settings.globallyIgnoredFields.forEach((i,s)=>{const r=new C.Setting(e).addText(o=>{o.inputEl.onmousedown=a=>a.stopPropagation(),o.setPlaceholder("Enter field name (e.g., cssclass, tags)...").setValue(i).onChange(async a=>{this.plugin.settings.globallyIgnoredFields[s]=a,await this.plugin.saveSettings()})}).addExtraButton(o=>{o.setIcon("cross").setTooltip("Delete").onClick(async a=>{a&&a.stopPropagation(),this.plugin.settings.globallyIgnoredFields.splice(s,1),await this.plugin.saveSettings(),this.display()})});r.infoEl.remove(),r.controlEl.onmousedown=o=>o.stopPropagation()}),new C.Setting(e).addButton(i=>{i.setButtonText("Add Field").setCta().onClick(async s=>{s&&s.stopPropagation(),this.plugin.settings.globallyIgnoredFields.push(""),await this.plugin.saveSettings(),this.display()}),i.buttonEl.onmousedown=s=>s.stopPropagation()})}addKnowledgeNamespacingAccordion(e){e.createEl("p",{text:"Configure how knowledge is organized and namespaced in your graph database.",cls:"setting-item-description"}),e.createEl("h4",{text:"Ontology Configuration",cls:"setting-item-name"}),new C.Setting(e).setName("Use Custom Ontology"+this.createStatusIndicator("implemented")).setDesc("Enable custom entity types with pre-existing Pydantic models. When disabled, uses generic text episodes.").addToggle(o=>o.setValue(this.plugin.settings.useCustomOntology).onChange(async a=>{this.plugin.settings.useCustomOntology=a,await this.plugin.saveSettings()})),e.createEl("h4",{text:"Namespacing Strategy",cls:"setting-item-name"}),new C.Setting(e).setName("Namespace Strategy"+this.createStatusIndicator("implemented")).setDesc("Primary strategy for organizing knowledge in the graph").addDropdown(o=>o.addOption("vault","Vault Name - Use vault as namespace").addOption("folder","Folder Path - Use note folder as namespace").addOption("property","Property Value - Use g_group_id property").addOption("custom","Custom Value - Use default namespace setting").setValue(this.plugin.settings.namespaceStrategy).onChange(async a=>{const l=a;this.plugin.settings.namespaceStrategy=l,l==="vault"?(this.plugin.settings.defaultNamespace=this.app.vault.getName(),this.defaultNamespaceInput&&this.defaultNamespaceInput.setValue(this.app.vault.getName())):l==="folder"?(this.plugin.settings.enableFolderNamespacing=!0,this.folderToggle&&this.folderToggle.setValue(!0)):l==="property"&&(this.plugin.settings.enablePropertyNamespacing=!0,this.propertyToggle&&this.propertyToggle.setValue(!0)),await this.plugin.saveSettings()})),new C.Setting(e).setName("Default Namespace"+this.createStatusIndicator("implemented")).setDesc('Default namespace when strategy is "custom" or when other strategies fail').addText(o=>{this.defaultNamespaceInput=o,o.setPlaceholder("my-vault").setValue(this.plugin.settings.defaultNamespace).onChange(a=>{var l;this.ensureSharedDebounceInitialized(),(l=this._sharedTextDebounce)==null||l.call(this,JSON.stringify({key:"defaultNamespace",value:a}))})});let t;new C.Setting(e).setName("Enable Folder Namespacing"+this.createStatusIndicator("implemented")).setDesc("Use top-level folder names as namespaces. Subfolders are not supported.").addToggle(o=>{this.folderToggle=o,o.setValue(this.plugin.settings.enableFolderNamespacing).onChange(async a=>{this.plugin.settings.enableFolderNamespacing=a,await this.plugin.saveSettings(),t&&(t.style.display=a?"block":"none")})}),t=e.createDiv(),t.style.display=this.plugin.settings.enableFolderNamespacing?"block":"none",t.style.marginLeft="24px",t.style.marginTop="8px",new C.Setting(t).setName("Custom Folder Mappings"+this.createStatusIndicator("implemented")).setDesc("Map specific folders to custom group_id namespaces. Leave empty to use automatic folder names."),this.plugin.settings.folderNamespaceMappings.forEach((o,a)=>{const l=new C.Setting(t).addSearch(c=>{new Wt(this.app,c.inputEl),c.inputEl.addEventListener("mousedown",p=>p.stopPropagation()),c.setPlaceholder("Select folder or type path...").setValue(o.folderPath).onChange(async p=>{this.plugin.settings.folderNamespaceMappings[a].folderPath=p,await this.plugin.saveSettings()}),c.inputEl.addEventListener("blur",async()=>{const p=c.getValue();if(!this.plugin.settings.folderNamespaceMappings[a].groupId&&p.trim()){this.plugin.settings.folderNamespaceMappings[a].groupId=p.replace(/\//g,"_");const g=l.controlEl.querySelector('input[placeholder="Enter group_id..."]');g&&(g.value=this.plugin.settings.folderNamespaceMappings[a].groupId),await this.plugin.saveSettings()}})}).addText(c=>{c.inputEl.addEventListener("mousedown",p=>p.stopPropagation()),c.inputEl.addEventListener("input",p=>p.stopPropagation()),c.inputEl.addEventListener("keydown",p=>p.stopPropagation()),c.inputEl.addEventListener("keyup",p=>p.stopPropagation()),c.inputEl.addEventListener("focus",p=>p.stopPropagation()),c.setPlaceholder("Enter group_id...").setValue(o.groupId).onChange(async p=>{this.plugin.settings.folderNamespaceMappings[a].groupId=p,await this.plugin.saveSettings()})}).addExtraButton(c=>{c.setIcon("cross").setTooltip("Delete").onClick(async p=>{p&&(p.stopPropagation(),p.preventDefault()),this.plugin.settings.folderNamespaceMappings.splice(a,1),await this.plugin.saveSettings(),this.display()}),c.extraSettingsEl.addEventListener("mousedown",p=>p.stopPropagation())});l.infoEl.remove(),l.controlEl.addEventListener("mousedown",c=>c.stopPropagation())}),new C.Setting(t).addButton(o=>{o.setButtonText("Add Folder Mapping").setCta().onClick(async a=>{a&&a.stopPropagation(),this.plugin.settings.folderNamespaceMappings.push({folderPath:"",groupId:""}),await this.plugin.saveSettings(),this.display()}),o.buttonEl.onmousedown=a=>a.stopPropagation()}),new C.Setting(e).setName("Enable Property Namespacing"+this.createStatusIndicator("implemented")).setDesc("Use g_group_id frontmatter property as namespace when available").addToggle(o=>{this.propertyToggle=o,o.setValue(this.plugin.settings.enablePropertyNamespacing).onChange(async a=>{this.plugin.settings.enablePropertyNamespacing=a,await this.plugin.saveSettings()})});const i=new C.Setting(e).setName("Discover Namespaces"+this.createStatusIndicator("implemented")).setDesc("Click to scan the vault and generate the list of available namespaces based on the settings above."),s=i.descEl.createDiv();s.style.marginTop="8px",s.style.fontSize="0.9em",s.style.color="var(--text-muted)";const r=()=>{const o=this.plugin.settings.availableNamespaces||[];o.length>0?s.textContent=`Current namespaces: ${o.join(", ")}`:s.textContent='No namespaces discovered yet. Click "Generate" to scan the vault.'};r(),i.addButton(o=>o.setButtonText("Generate").setCta().onClick(async()=>{var l;const a=o.buttonEl.textContent;o.buttonEl.textContent="Generating...",o.setDisabled(!0);try{await this.plugin.updateAvailableNamespaces(),r(),new C.Notice("[SUCCESS] Namespaces updated successfully")}catch(c){const p=c instanceof Error?c.message:"Unknown error";new C.Notice(`[ERROR] Failed to update namespaces: ${p}`),(l=this.plugin.logger)==null||l.error("Failed to update namespaces",{error:c})}finally{o.buttonEl.textContent=a,o.setDisabled(!1)}})),e.createEl("h4",{text:"Multi-Vault Configuration",cls:"setting-item-name"}),new C.Setting(e).setName("Enable Multi-Vault Mode"+this.createStatusIndicator("todo")).setDesc("Enable advanced features for managing multiple Obsidian vaults"+(this.plugin.settings.showDevelopmentIndicators?" (Multi-vault features planned for future release)":"")).addToggle(o=>o.setValue(this.plugin.settings.enableMultiVaultMode).onChange(async a=>{this.plugin.settings.enableMultiVaultMode=a,await this.plugin.saveSettings()})),new C.Setting(e).setName("Current Vault Priority"+this.createStatusIndicator("todo")).setDesc("Priority level for this vault in multi-vault scenarios (higher numbers = higher priority)").addSlider(o=>o.setLimits(1,10,1).setValue(this.plugin.settings.currentVaultPriority).setDynamicTooltip().onChange(async a=>{this.plugin.settings.currentVaultPriority=a,await this.plugin.saveSettings()})),new C.Setting(e).setName("Vault Configurations"+this.createStatusIndicator("todo")).setDesc(`Currently tracking ${this.plugin.settings.vaultConfigurations.length} vault(s). Advanced vault management features coming soon.`).addButton(o=>o.setButtonText("Manage Vaults").setDisabled(!0).onClick(async()=>{new C.Notice("Multi-vault management features are planned for a future release")}))}addServersAccordion(e){e.createEl("p",{text:"Server architecture: The first MCP process automatically starts the shared WebSocket server. Subsequent processes connect as clients. Server ownership transfers automatically when the host process exits.",cls:"setting-item-description"}),e.createEl("h4",{text:"Shared WebSocket Server",cls:"setting-item-name"}),e.createEl("p",{text:"Server lifecycle is managed automatically by MCP processes. Manual control is not needed.",cls:"setting-item-description",attr:{style:"font-size: 0.9em; color: var(--text-muted); margin-bottom: 16px;"}}),new C.Setting(e).setName("WebSocket Port"+this.createStatusIndicator("implemented")).setDesc("Port number for the shared WebSocket server (configured via MCP)").addText(g=>g.setPlaceholder("8765").setValue(this.plugin.settings.wsPort.toString()).setDisabled(!0));const t=new C.Setting(e).setName("Authentication Token"+this.createStatusIndicator("implemented")).setDesc("Authentication token for secure WebSocket connections (managed by MCP)");t.addText(g=>{g.setDisabled(!0).setValue(this.plugin.settings.wsAuthToken)}),t.addButton(g=>g.setButtonText("Copy").onClick(async h=>{h==null||h.stopPropagation(),await navigator.clipboard.writeText(this.plugin.settings.wsAuthToken),new C.Notice("Auth token copied to clipboard")}));const i=e.createDiv();i.style.cssText=`
			margin: 16px 0;
			padding: 12px;
			border: 1px solid var(--background-modifier-border);
			border-radius: 6px;
			background: var(--background-secondary);
		`,i.createEl("h5",{text:"Current Connections",attr:{style:"margin: 0 0 8px 0; font-size: 0.9em; font-weight: 600;"}});const s=i.createDiv();s.style.cssText=`
			font-size: 0.8em;
			color: var(--text-muted);
			line-height: 1.4;
		`;const r=async()=>{const g=this.plugin.settings.wsPort||8765;try{(await fetch(`http://127.0.0.1:${g}/health`,{headers:{Authorization:`Bearer ${this.plugin.settings.wsAuthToken||""}`}})).ok?s.textContent=`Connected to port ${g}`:s.textContent=`Failed to connect to port ${g}`}catch{s.textContent=`Trying to connect to port ${g}`}};r();const o=setInterval(r,5e3);this.connectionUpdateInterval=o,e.createEl("h4",{text:"MCP Server",cls:"setting-item-name"});const a=e.createDiv();a.style.cssText=`
			margin: 16px 0;
			padding: 12px;
			border: 1px solid var(--background-modifier-border);
			border-radius: 6px;
			background: var(--background-secondary);
		`,a.createEl("h5",{text:"Current Instances",attr:{style:"margin: 0 0 8px 0; font-size: 0.9em; font-weight: 600;"}});const l=a.createDiv();l.style.cssText=`
			font-size: 0.8em;
			color: var(--text-muted);
			line-height: 1.4;
		`;const c=async()=>{var g;try{const m=await Ct.getInstance().getMCPServerProcesses();if(m.length>0){const d=m.map(f=>`Process ${f.pid} | ${f.parentName} | ${f.createdAt}`);l.innerHTML=d.join("<br>")}else l.textContent="No active instances detected"}catch(h){l.textContent="Status check failed",(g=this.plugin.logger)==null||g.error("Failed to update instances display",{error:h})}};c();const p=setInterval(c,5e3);this.instanceUpdateInterval=p,new C.Setting(e).setName("Generate MCP Config"+this.createStatusIndicator("implemented")).setDesc("Generate configuration for MCP clients to connect to the MCP server").addButton(g=>g.setButtonText("Generate Config").onClick(async()=>{await this.generateMcpConfig(g.buttonEl)}))}addAdvancedAccordion(e){new C.Setting(e).setName("Debug Logging"+this.createStatusIndicator("implemented")).setDesc("Enable detailed logging for troubleshooting").addToggle(t=>t.setValue(this.plugin.settings.enableDebugLogging).onChange(async i=>{this.plugin.settings.enableDebugLogging=i,this.plugin.logger.setDebug(i),this.plugin.logger.info(`Debug mode ${i?"enabled":"disabled"} from settings`),await this.plugin.saveSettings()})),new C.Setting(e).setName("View Logs"+this.createStatusIndicator("implemented")).setDesc("Open the plugin logs directory").addButton(t=>t.setButtonText("View Logs").onClick(async()=>{await this.viewLogFile()})),new C.Setting(e).setName("Test Manual Sync"+this.createStatusIndicator("implemented")).setDesc("Sync a single note manually to test the connection and process").addButton(t=>t.setButtonText("Select and Sync Note").onClick(async()=>{await this.runManualSyncTest(t.buttonEl)})),new C.Setting(e).setName("Performance Metrics"+this.createStatusIndicator("todo")).setDesc("Track and display performance metrics"+(this.plugin.settings.showDevelopmentIndicators?" (Metrics collection not implemented)":"")).addToggle(t=>t.setValue(this.plugin.settings.enablePerformanceMetrics).onChange(async i=>{this.plugin.settings.enablePerformanceMetrics=i,await this.plugin.saveSettings()})),new C.Setting(e).setName("Max Retry Attempts"+this.createStatusIndicator("implemented")).setDesc("Maximum number of retry attempts for failed operations").addSlider(t=>t.setLimits(1,10,1).setValue(this.plugin.settings.maxRetryAttempts).setDynamicTooltip().onChange(async i=>{this.plugin.settings.maxRetryAttempts=i,await this.plugin.saveSettings()})),new C.Setting(e).setName("Connection Timeout"+this.createStatusIndicator("implemented")).setDesc("Connection timeout in seconds").addSlider(t=>t.setLimits(5,120,5).setValue(this.plugin.settings.connectionTimeout).setDynamicTooltip().onChange(async i=>{this.plugin.settings.connectionTimeout=i,await this.plugin.saveSettings()})),e.createEl("h4",{text:"Schema Discovery Options",cls:"setting-item-name"}),new C.Setting(e).setName("Auto-discover Schemas"+this.createStatusIndicator("todo")).setDesc("Automatically scan vault for schema patterns"+(this.plugin.settings.showDevelopmentIndicators?" (Schema discovery not implemented)":"")).addToggle(t=>t.setValue(this.plugin.settings.autoDiscoverSchemas).onChange(async i=>{this.plugin.settings.autoDiscoverSchemas=i,await this.plugin.saveSettings()})),new C.Setting(e).setName("Validate Naming Conventions"+this.createStatusIndicator("todo")).setDesc("Check property names against Graphiti best practices"+(this.plugin.settings.showDevelopmentIndicators?" (Validation not implemented)":"")).addToggle(t=>t.setValue(this.plugin.settings.validateNamingConventions).onChange(async i=>{this.plugin.settings.validateNamingConventions=i,await this.plugin.saveSettings()})),new C.Setting(e).setName("Suggest Property Descriptions"+this.createStatusIndicator("todo")).setDesc("Auto-generate descriptions for common property names"+(this.plugin.settings.showDevelopmentIndicators?" (AI suggestions not implemented)":"")).addToggle(t=>t.setValue(this.plugin.settings.suggestPropertyDescriptions).onChange(async i=>{this.plugin.settings.suggestPropertyDescriptions=i,await this.plugin.saveSettings()})),new C.Setting(e).setName("Protected Attribute Warnings"+this.createStatusIndicator("todo")).setDesc("Show warnings for Graphiti protected attribute names"+(this.plugin.settings.showDevelopmentIndicators?" (Warning system not implemented)":"")).addToggle(t=>t.setValue(this.plugin.settings.enableProtectedAttributeWarnings).onChange(async i=>{this.plugin.settings.enableProtectedAttributeWarnings=i,await this.plugin.saveSettings()})),e.createEl("h4",{text:"UI Preferences",cls:"setting-item-name"}),new C.Setting(e).setName("Show Sync Status"+this.createStatusIndicator("partial")).setDesc("Display sync status in the status bar"+(this.plugin.settings.showDevelopmentIndicators?" (UI setting complete, status bar integration not implemented)":"")).addToggle(t=>t.setValue(this.plugin.settings.showSyncStatus).onChange(async i=>{this.plugin.settings.showSyncStatus=i,await this.plugin.saveSettings()})),new C.Setting(e).setName("Show Notifications"+this.createStatusIndicator("partial")).setDesc("Display notifications for sync operations"+(this.plugin.settings.showDevelopmentIndicators?" (UI setting complete, sync notifications not implemented)":"")).addToggle(t=>t.setValue(this.plugin.settings.showNotifications).onChange(async i=>{this.plugin.settings.showNotifications=i,await this.plugin.saveSettings()})),new C.Setting(e).setName("Compact Mode"+this.createStatusIndicator("todo")).setDesc("Use compact UI layout to save space"+(this.plugin.settings.showDevelopmentIndicators?" (Compact UI styling not implemented)":"")).addToggle(t=>t.setValue(this.plugin.settings.compactMode).onChange(async i=>{this.plugin.settings.compactMode=i,await this.plugin.saveSettings()}))}addActionsAccordion(e){new C.Setting(e).setName("Export Settings"+this.createStatusIndicator("implemented")).setDesc("Export your current settings to a file").addButton(t=>t.setButtonText("Export Settings").onClick(async()=>{await this.exportSettings()})),new C.Setting(e).setName("Import Settings"+this.createStatusIndicator("partial")).setDesc("Import settings from a file"+(this.plugin.settings.showDevelopmentIndicators?" (Import works, validation incomplete)":"")).addButton(t=>t.setButtonText("Import Settings").onClick(async()=>{await this.importSettings()})),new C.Setting(e).setName("Reset to Defaults"+this.createStatusIndicator("implemented")).setDesc("Reset all settings to their default values").addButton(t=>t.setButtonText("Reset to Defaults").setWarning().onClick(async()=>{await this.resetToDefaults()}))}async generateMcpConfig(e){var i,s;const t=e.textContent;e.textContent="Generating...",e.setAttribute("disabled","true");try{if((i=this.plugin.logger)==null||i.debug("[MCP-CONFIG] Generating MCP configuration"),this.plugin.graphitiService){const r=await this.plugin.graphitiService.generateClaudeDesktopConfig(),o=JSON.stringify(r.config,null,2),a=document.createElement("div");a.style.cssText=`
					position: fixed;
					top: 0;
					left: 0;
					width: 100%;
					height: 100%;
					background: rgba(0, 0, 0, 0.8);
					display: flex;
					align-items: center;
					justify-content: center;
					z-index: 1000;
				`;const l=document.createElement("div");l.style.cssText=`
					background: var(--background-primary);
					border: 1px solid var(--background-modifier-border);
					border-radius: 8px;
					padding: 20px;
					max-width: 600px;
					width: 90%;
					max-height: 80%;
					overflow: auto;
				`;const c=document.createElement("h3");c.textContent="MCP Configuration",c.style.margin="0 0 15px 0";const p=document.createElement("p");p.textContent="Copy this configuration for your MCP client:",p.style.margin="0 0 10px 0";const g=document.createElement("textarea");g.value=o,g.readOnly=!0,g.style.cssText=`
					width: 100%;
					height: 300px;
					font-family: var(--font-monospace);
					font-size: 12px;
					background: var(--background-secondary);
					border: 1px solid var(--background-modifier-border);
					border-radius: 4px;
					padding: 8px;
					resize: vertical;
					box-sizing: border-box;
				`;const h=document.createElement("div");h.style.cssText=`
					margin-top: 15px;
					display: flex;
					gap: 10px;
					justify-content: flex-end;
				`;const m=document.createElement("button");m.textContent="Copy",m.className="mod-cta",m.onclick=async()=>{try{await navigator.clipboard.writeText(o);const f=m.textContent;m.textContent="Copied!",setTimeout(()=>m.textContent=f,2e3),new C.Notice("[SUCCESS] MCP configuration copied to clipboard")}catch{g.select(),document.execCommand("copy"),new C.Notice("[SUCCESS] MCP configuration copied to clipboard")}};const d=document.createElement("button");d.textContent="Close",d.onclick=()=>document.body.removeChild(a),h.append(m,d),l.append(c,p,g,h),a.appendChild(l),a.onclick=f=>{f.target===a&&document.body.removeChild(a)},document.body.appendChild(a),g.focus(),g.select(),new C.Notice("[SUCCESS] MCP configuration generated")}else new C.Notice("[ERROR] GraphitiService not available")}catch(r){(s=this.plugin.logger)==null||s.error("[MCP-CONFIG] Failed to generate MCP config",{error:r});const o=r instanceof Error?r.message:"Unknown error";new C.Notice(`[ERROR] Failed to generate config: ${o}`)}finally{e.textContent=t,e.removeAttribute("disabled")}}addDevelopmentAccordion(e){new C.Setting(e).setName("Show Development Indicators").setDesc("Display visual indicators showing which features are implemented vs. placeholder/TODO").addToggle(t=>t.setValue(this.plugin.settings.showDevelopmentIndicators).onChange(async i=>{this.plugin.settings.showDevelopmentIndicators=i,await this.plugin.saveSettings(),this.display()})),new C.Setting(e).setName("Experimental Daemon Mode"+this.createStatusIndicator("implemented")).setDesc("Use persistent Python daemon to eliminate BGE model loading overhead (reduces sync time by ~60%)").addToggle(t=>t.setValue(this.plugin.settings.experimentalDaemonMode).onChange(async i=>{this.plugin.settings.experimentalDaemonMode=i,await this.plugin.saveSettings()})),new C.Setting(e).setName("Load Daemon on Launch"+this.createStatusIndicator("implemented")).setDesc("Start Python daemon when plugin loads to eliminate first-sync delay (requires Experimental Daemon Mode)").addToggle(t=>t.setValue(this.plugin.settings.loadDaemonOnLaunch).onChange(async i=>{this.plugin.settings.loadDaemonOnLaunch=i,await this.plugin.saveSettings()})),new C.Setting(e).setName("Log Performance"+this.createStatusIndicator("implemented")).setDesc("Enable detailed timing analysis for sync performance debugging").addToggle(t=>t.setValue(this.plugin.settings.logPerformance).onChange(async i=>{this.plugin.settings.logPerformance=i,await this.plugin.saveSettings()}))}createStatusIndicator(e){if(!this.plugin.settings.showDevelopmentIndicators)return"";switch(e){case"implemented":return" ✅";case"mock":return" ⚠️";case"todo":return" 🔧";case"partial":return" 🟡";default:return""}}getProviderDisplayName(e){return{openai:"OpenAI",anthropic:"Anthropic",google:"Google",azure:"Azure OpenAI",voyage:"Voyage AI",venice:"Venice.ai"}[e]||e}addProviderSpecificSettings(e){const t=this.plugin.settings.llmProvider;t==="azure"&&(new C.Setting(e).setName("Azure Endpoint"+this.createStatusIndicator("implemented")).setDesc("Your Azure OpenAI endpoint URL").addText(i=>i.setPlaceholder("https://your-resource.openai.azure.com/").setValue(this.plugin.settings.azureEndpoint||"").onChange(async s=>{this.plugin.settings.azureEndpoint=s,await this.plugin.saveSettings()})),new C.Setting(e).setName("Azure API Version"+this.createStatusIndicator("implemented")).setDesc("Azure OpenAI API version").addText(i=>i.setPlaceholder("2024-02-01").setValue(this.plugin.settings.azureApiVersion||"").onChange(async s=>{this.plugin.settings.azureApiVersion=s,await this.plugin.saveSettings()}))),(t==="ollama"||this.plugin.settings.embedderProvider==="ollama")&&(new C.Setting(e).setName("Ollama Base URL"+this.createStatusIndicator("implemented")).setDesc("Ollama server base URL (used for both LLM and embedding when applicable)").addText(i=>i.setPlaceholder("http://localhost:11434/v1").setValue(this.plugin.settings.ollamaBaseUrl||"http://localhost:11434/v1").onChange(async s=>{this.plugin.settings.ollamaBaseUrl=s||"http://localhost:11434/v1",await this.plugin.saveSettings()})),new C.Setting(e).setName("Ollama Embedding Dimension"+this.createStatusIndicator("implemented")).setDesc("Dimension size for Ollama embeddings (typically 768 for most models)").addText(i=>i.setPlaceholder("768").setValue((this.plugin.settings.ollamaEmbeddingDim||768).toString()).onChange(async s=>{const r=parseInt(s)||768;this.plugin.settings.ollamaEmbeddingDim=r,await this.plugin.saveSettings()})))}async populateLLMModels(e,t,i=!1){var r,o,a,l,c,p,g;e.selectEl.empty(),i&&e.addOption("","None");let s=[];try{const h=this.plugin.settings,m=i?"llmSmallDefaults":"llmDefaults",d=(r=h==null?void 0:h[m])==null?void 0:r[t];if(d&&typeof d=="object"){const f=Object.entries(d);f.sort((v,w)=>{const S=v[1]&&v[1].recommended?1:0;return(w[1]&&w[1].recommended?1:0)-S||v[0].localeCompare(w[0])}),s=f.map(([v])=>v),(o=this.plugin.logger)==null||o.debug(`[SETTINGS] Using ${m} from plugin.settings for ${t}`,{count:s.length})}else if(i&&((a=h==null?void 0:h.llmDefaults)!=null&&a[t])){const f=Object.entries(h.llmDefaults[t]);f.sort((v,w)=>{const S=v[1]&&v[1].recommended?1:0;return(w[1]&&w[1].recommended?1:0)-S||v[0].localeCompare(w[0])}),s=f.map(([v])=>v),(l=this.plugin.logger)==null||l.debug(`[SETTINGS] Fallback to llmDefaults from plugin.settings for ${t}`,{count:s.length})}}catch(h){(c=this.plugin.logger)==null||c.warn("[SETTINGS] Failed reading LLM defaults from plugin.settings",{error:h})}if(s.length===0&&t!=="ollama"&&((p=this.plugin.logger)==null||p.debug(`[SETTINGS] No LLM defaults found in plugin.settings for ${t}; leaving dropdown empty`)),t==="ollama")try{const h=i?this.ollamaSettings.getOllamaLLMSmallModelsFromSettings():this.ollamaSettings.getOllamaLLMModelsFromSettings();for(const m of h){const d=m.description||"",f=d.length>50?d.substring(0,50)+"...":d,v=f?`${m.name} - ${f}`:m.name;e.addOption(m.name,v)}}catch(h){(g=this.plugin.logger)==null||g.error("[SETTINGS] Failed to load Ollama LLM models from settings",{error:h})}else s.forEach(h=>e.addOption(h,h))}async populateEmbeddingModels(e,t){var s,r,o,a,l;e.selectEl.empty();let i=[];try{const c=this.plugin.settings,p=(s=c==null?void 0:c.embeddingDefaults)==null?void 0:s[t];if(p&&typeof p=="object"){const g=Object.entries(p);g.sort((h,m)=>{const d=h[1]&&h[1].recommended?1:0;return(m[1]&&m[1].recommended?1:0)-d||h[0].localeCompare(m[0])}),i=g.map(([h])=>h),(r=this.plugin.logger)==null||r.debug(`[SETTINGS] Using embeddingDefaults from plugin.settings for ${t}`,{count:i.length})}}catch(c){(o=this.plugin.logger)==null||o.warn("[SETTINGS] Failed reading embedding defaults from plugin.settings",{error:c})}if(i.length===0&&t!=="ollama"&&((a=this.plugin.logger)==null||a.debug(`[SETTINGS] No embedding defaults found in plugin.settings for ${t}; leaving dropdown empty`)),t==="ollama")try{const c=this.ollamaSettings.getOllamaEmbeddingModelNamesFromSettings(),p=this.ollamaSettings.getOllamaEmbeddingModelsFromSettings(),g=await this.ollamaSettings.getOllamaService().getEmbeddingModelsWithStatus(c)||[],h=new Map;for(const m of g)h.set(m.name,!!m.available);for(const m of p){const d=h.get(m.name)||!1,f=typeof m.dimensions=="number"?m.dimensions:this.plugin.settings.ollamaEmbeddingDim||768,v=m.description||"",w=v.length>35?v.substring(0,35)+"...":v,S=`${m.name} (${f}d) - ${w}`;e.addOption(m.name,S)}}catch(c){(l=this.plugin.logger)==null||l.error("[SETTINGS] Failed to load Ollama embedding models",{error:c});const p=this.ollamaSettings.getOllamaEmbeddingModelsFromSettings();for(const g of p){const h=typeof g.dimensions=="number"?g.dimensions:this.plugin.settings.ollamaEmbeddingDim||768,m=g.description||"",d=m.length>40?m.substring(0,40)+"...":m,f=`${g.name} (${h}d) - ${d}`;e.addOption(g.name,f)}}else i.forEach(c=>e.addOption(c,c))}async addEnhancedEmbeddingModelSetting(e){if(this.plugin.settings.embedderProvider==="ollama"){const t=new C.Setting(e).setName("Embedding Model"+this.createStatusIndicator("implemented")).setDesc("Model for generating embeddings with availability checking");let i,s;t.addDropdown(async r=>{i=r,await this.ollamaSettings.populateOllamaModelsWithStatus(i),i.setValue(this.plugin.settings.embeddingModel).onChange(async o=>{var a;try{await this.plugin.vaultRegistryService.hasEmbeddingModelChanged(o,String(this.plugin.settings.ollamaEmbeddingDim||768))&&(new C.Notice("You are changing the embedding model for this vault. You must clear the database to avoid conflicts."),this.plugin.logger.warn("[SETTINGS] Embedding model change detected",{newModel:o,newDimensions:this.plugin.settings.ollamaEmbeddingDim||768})),this.plugin.settings.embeddingModel=o,await this.plugin.saveSettings(),(a=this.plugin.logger)==null||a.debug("[OLLAMA-EMBEDDING-MODEL-CHANGE] Updating vault registry from Ollama model dropdown",{model:o,dimensions:this.plugin.settings.ollamaEmbeddingDim||768,provider:"ollama",vaultName:this.app.vault.getName()}),await this.plugin.vaultRegistryService.updateVaultEmbeddingModel(this.app.vault.getName(),o,this.plugin.settings.ollamaEmbeddingDim||768,"ollama"),o&&await this.ollamaSettings.updateModelStatusIconForDropdown(s,"embedding",o)}catch(l){this.plugin.logger.error("[SETTINGS] Error handling Ollama embedding model change",{error:l}),new C.Notice("Error checking embedding model configuration")}})}),s=t.settingEl.createDiv(),s.style.cssText=`
				margin-top: 8px;
				padding: 8px;
				border-radius: 4px;
				font-size: 0.9em;
			`,this.plugin.settings.embeddingModel&&setTimeout(async()=>{await this.ollamaSettings.updateModelStatusIconForDropdown(s,"embedding",this.plugin.settings.embeddingModel)},100)}else new C.Setting(e).setName("Embedding Model"+this.createStatusIndicator("implemented")).setDesc("Model for generating embeddings").addDropdown(t=>{this.populateEmbeddingModels(t,this.plugin.settings.embedderProvider),t.setValue(this.plugin.settings.embeddingModel).onChange(async i=>{var s,r,o,a;if(this.plugin.vaultRegistryService)try{await this.plugin.vaultRegistryService.hasEmbeddingModelChanged(i,String(this.plugin.settings.ollamaEmbeddingDim||768))&&(new C.Notice("You are changing the embedding model for this vault. You must clear the database to avoid conflicts."),(s=this.plugin.logger)==null||s.warn("[EMBEDDING-WARNING] Embedding model changed for vault",{oldModel:this.plugin.settings.embeddingModel,newModel:i,vaultName:this.app.vault.getName()}))}catch(l){(r=this.plugin.logger)==null||r.error("[EMBEDDING-WARNING] Failed to check embedding model changes",{error:l})}if(this.plugin.settings.embeddingModel=i,await this.plugin.saveSettings(),this.plugin.vaultRegistryService)try{const l=this.app.vault.getName();(o=this.plugin.logger)==null||o.debug("[NON-OLLAMA-EMBEDDING-MODEL-CHANGE] Updating vault registry from embedding model dropdown",{model:i,dimensions:this.plugin.settings.ollamaEmbeddingDim||768,provider:this.plugin.settings.embedderProvider,vaultName:l}),await this.plugin.vaultRegistryService.updateVaultEmbeddingModel(l,i,this.plugin.settings.ollamaEmbeddingDim||768,this.plugin.settings.embedderProvider)}catch(l){(a=this.plugin.logger)==null||a.error("[NON-OLLAMA-EMBEDDING-MODEL] Failed to update vault registry",{error:l,model:i})}})})}async populateOllamaModelsWithStatus(e){await this.ollamaSettings.populateOllamaModelsWithStatus(e)}async handleOllamaModelSelection(e,t){await this.ollamaSettings.handleOllamaModelSelection(e,t)}async downloadOllamaModelWithProgress(e,t){await this.ollamaSettings.downloadOllamaModelWithProgress(e,t)}async isOllamaModelInstalled(e){return await this.ollamaSettings.isOllamaModelInstalled(e)}async updateLLMModelStatusIcon(e,t){await this.ollamaSettings.updateModelStatusIconForDropdown(e,"llm_small",t)}async addCustomLLMModelEntry(e){const t=new C.Setting(e).setName("Custom LLM Model"+this.createStatusIndicator("implemented")).setDesc("Download any Ollama LLM model by name (e.g., llama3.2:3b, codellama:13b)");let i,s,r;t.addText(o=>{i=o.inputEl,o.setPlaceholder("Enter model name (e.g., llama3.2:3b)").onChange(a=>{s&&(s.disabled=!a.trim())})}),t.addButton(o=>{s=o.buttonEl,o.setButtonText("⬇ Download").setTooltip("Download this model from Ollama registry").setDisabled(!0).onClick(async()=>{var l,c;const a=i.value.trim();if(!a){new C.Notice("[ERROR] Please enter a model name");return}try{if(await this.ollamaSettings.isOllamaModelInstalled(a)){new C.Notice(`[INFO] Model ${a} is already installed`);return}await this.ollamaSettings.downloadOllamaModelWithProgress(a,r);try{await this.ollamaSettings.isOllamaModelInstalled(a)&&(await this.ollamaSettings.addCustomOllamaLLMToDefaults(a),await this.ollamaSettings.refreshLLMDropdowns(),new C.Notice(`[SUCCESS] ${a} downloaded and added to LLM models.`))}catch(g){(l=this.plugin.logger)==null||l.warn("[CUSTOM-LLM] Post-download availability check failed",{error:g,modelName:a})}i.value="",s.disabled=!0}catch(p){(c=this.plugin.logger)==null||c.error("[CUSTOM-LLM] Download failed",{error:p,modelName:a});const g=p instanceof Error?p.message:"Unknown error";new C.Notice(`[ERROR] Failed to download ${a}: ${g}`)}})}),r=t.settingEl.createDiv(),r.style.cssText=`
			margin-top: 8px;
			padding: 8px;
			border-radius: 4px;
			font-size: 0.9em;
			min-height: 20px;
		`}async addCustomEmbeddingModelEntry(e){const t=new C.Setting(e).setName("Custom Embedding Model"+this.createStatusIndicator("implemented")).setDesc("Download any Ollama embedding model by name (e.g., nomic-embed-text, mxbai-embed-large)");let i,s,r;t.addText(o=>{i=o.inputEl,o.setPlaceholder("Enter embedding model name").onChange(a=>{s&&(s.disabled=!a.trim())})}),t.addButton(o=>{s=o.buttonEl,o.setButtonText("⬇ Download").setTooltip("Download this embedding model from Ollama registry").setDisabled(!0).onClick(async()=>{var l,c;const a=i.value.trim();if(!a){new C.Notice("[ERROR] Please enter a model name");return}try{if(await this.ollamaSettings.isOllamaModelInstalled(a)){new C.Notice(`[INFO] Model ${a} is already installed`);return}await this.downloadOllamaModelWithProgress(a,r);try{await this.ollamaSettings.isOllamaModelInstalled(a)&&await this.ollamaSettings.addCustomOllamaEmbeddingToDefaults(a)}catch(g){(l=this.plugin.logger)==null||l.warn("[CUSTOM-EMBEDDING] Post-download availability check failed",{error:g,modelName:a})}i.value="",s.disabled=!0}catch(p){(c=this.plugin.logger)==null||c.error("[CUSTOM-EMBEDDING] Download failed",{error:p,modelName:a});const g=p instanceof Error?p.message:"Unknown error";new C.Notice(`[ERROR] Failed to download ${a}: ${g}`)}})}),r=t.settingEl.createDiv(),r.style.cssText=`
			margin-top: 8px;
			padding: 8px;
			border-radius: 4px;
			font-size: 0.9em;
			min-height: 20px;
		`}async refreshOllamaDropdownAndStatus(){this.display()}updateLLMDefaults(e){var r,o,a,l,c,p,g,h,m;const t=this.plugin.settings;let i,s;try{const d=(r=t==null?void 0:t.llmDefaults)==null?void 0:r[e];if(d&&typeof d=="object"){const w=Object.entries(d).find(([,S])=>S&&S.recommended);i=w&&w[0]||Object.keys(d)[0],(o=this.plugin.logger)==null||o.debug("[SETTINGS] Selected LLM default from plugin.settings",{provider:e,model:i})}const f=(a=t==null?void 0:t.llmSmallDefaults)==null?void 0:a[e];if(f&&typeof f=="object"){const w=Object.entries(f).find(([,S])=>S&&S.recommended);s=w&&w[0]||Object.keys(f)[0],(l=this.plugin.logger)==null||l.debug("[SETTINGS] Selected LLM Small default from plugin.settings",{provider:e,model:s})}else!s&&((c=t==null?void 0:t.llmDefaults)!=null&&c[e])&&(s=Object.keys(t.llmDefaults[e])[0])}catch(d){(p=this.plugin.logger)==null||p.warn("[SETTINGS] Failed deriving LLM defaults from plugin.settings",{error:d})}if(!i){const d={openai:{model:"gpt-4o",smallModel:"gpt-4o-mini"},anthropic:{model:"claude-sonnet-4-20250514",smallModel:"claude-3-5-haiku-20241022"},google:{model:"gemini-2.0-flash",smallModel:"gemini-2.0-flash-exp"},azure:{model:"gpt-4o",smallModel:"gpt-4o-mini"},ollama:{model:"deepseek-r1:7b",smallModel:"llama3.1:8b"}};i=(g=d[e])==null?void 0:g.model,s=s||((h=d[e])==null?void 0:h.smallModel),(m=this.plugin.logger)==null||m.debug("[SETTINGS] Falling back to internal LLM defaults",{provider:e,model:i,small:s})}i&&(this.plugin.settings.llmModel=i),s&&(this.plugin.settings.llmSmallModel=s),this.plugin.saveSettings(),this.display()}updateCrossEncoderDefaults(e){var t,i,s,r;if(e==="none"||e==="bge"){this.plugin.settings.crossEncoderModel=void 0,this.plugin.saveSettings(),this.display();return}try{const o=this.plugin.settings,a=(t=o==null?void 0:o.llmCrossEncoderDefaults)==null?void 0:t[e];if(a&&typeof a=="object"){const l=Object.entries(a),c=l.find(([,g])=>g&&g.recommended),p=c&&c[0]||((i=l[0])==null?void 0:i[0]);p&&(this.plugin.settings.crossEncoderModel=p,(s=this.plugin.logger)==null||s.debug("[SETTINGS] Selected cross-encoder default from plugin.settings",{provider:e,model:p}))}}catch(o){(r=this.plugin.logger)==null||r.warn("[SETTINGS] Failed deriving cross-encoder defaults from plugin.settings",{error:o})}this.plugin.saveSettings(),this.display()}async populateCrossEncoderModels(e,t){var s,r,o;if(e.selectEl.empty(),t==="none"){e.addOption("","No reranking model needed");return}let i=[];try{const a=this.plugin.settings,l=(s=a==null?void 0:a.llmCrossEncoderDefaults)==null?void 0:s[t];if(l&&typeof l=="object"){const c=Object.entries(l);c.sort((p,g)=>{const h=p[1]&&p[1].recommended?1:0;return(g[1]&&g[1].recommended?1:0)-h||p[0].localeCompare(g[0])}),i=c.map(([p])=>p),(r=this.plugin.logger)==null||r.debug("[SETTINGS] Using llmCrossEncoderDefaults from plugin.settings for "+t,{count:i.length})}}catch(a){(o=this.plugin.logger)==null||o.warn("[SETTINGS] Failed reading cross-encoder defaults from plugin.settings",{error:a})}if(i.length===0){e.addOption("",`No models configured for ${t}`);return}i.forEach(a=>{e.addOption(a,a)})}updateEmbedderDefaults(e){var s,r,o,a;const t=this.plugin.settings;let i;try{const l=(s=t==null?void 0:t.embeddingDefaults)==null?void 0:s[e];if(l&&typeof l=="object"){const p=Object.entries(l).find(([,g])=>g&&g.recommended);i=p&&p[0]||Object.keys(l)[0],(r=this.plugin.logger)==null||r.debug("[SETTINGS] Selected Embedding default from plugin.settings",{provider:e,model:i})}}catch(l){(o=this.plugin.logger)==null||o.warn("[SETTINGS] Failed deriving embedding defaults from plugin.settings",{error:l})}i||(i={openai:"text-embedding-3-small",google:"text-embedding-004",voyage:"voyage-3.5-lite",ollama:"nomic-embed-text"}[e],(a=this.plugin.logger)==null||a.debug("[SETTINGS] Falling back to internal embedding defaults",{provider:e,model:i})),i&&(this.plugin.settings.embeddingModel=i),this.plugin.saveSettings(),this.display()}async testLLMConnection(e){var i,s,r,o;const t=e.textContent;e.textContent="Testing...",e.addClass("is-loading");try{(i=this.plugin.logger)==null||i.debug("Testing LLM connection");const a=await this.plugin.graphitiService.testLLMConnection();if(a.success){(s=this.plugin.logger)==null||s.debug("LLM connection test successful",{message:a.message,latency:a.latency});const l=a.latency?` (${a.latency}ms)`:"";new C.Notice(`[SUCCESS] LLM connection successful${l}`)}else(r=this.plugin.logger)==null||r.error("LLM connection test failed",{message:a.message}),new C.Notice(`[ERROR] LLM connection failed: ${a.message}`)}catch(a){(o=this.plugin.logger)==null||o.error("LLM connection test error",{error:a});const l=a instanceof Error?a.message:"Unknown error";new C.Notice(`[ERROR] LLM connection failed: ${l}`)}finally{e.textContent=t,e.removeClass("is-loading")}}async testEmbeddingConnection(e){var i,s,r,o;const t=e.textContent;e.textContent="Testing...",e.addClass("is-loading");try{(i=this.plugin.logger)==null||i.debug("Testing embedding connection");const a=await this.plugin.graphitiService.testEmbeddingConnection();if(a.success){(s=this.plugin.logger)==null||s.debug("Embedding connection test successful",{message:a.message,latency:a.latency});const l=a.latency?` (${a.latency}ms)`:"";new C.Notice(`[SUCCESS] Embedding connection successful${l}`)}else(r=this.plugin.logger)==null||r.error("Embedding connection test failed",{message:a.message}),new C.Notice(`[ERROR] Embedding connection failed: ${a.message}`)}catch(a){(o=this.plugin.logger)==null||o.error("Embedding connection test error",{error:a});const l=a instanceof Error?a.message:"Unknown error";new C.Notice(`[ERROR] Embedding connection failed: ${l}`)}finally{e.textContent=t,e.removeClass("is-loading")}}async testProviderCombination(e){var i,s,r,o;const t=e.textContent;e.textContent="Testing...",e.addClass("is-loading");try{(i=this.plugin.logger)==null||i.debug("Testing provider combination");const a=await this.plugin.graphitiService.testProviderCombination();if(a.success){(s=this.plugin.logger)==null||s.debug("Provider combination test successful",{message:a.message,latency:a.latency});const l=a.latency?` (${a.latency}ms)`:"";new C.Notice(`[SUCCESS] Provider combination working${l}`)}else(r=this.plugin.logger)==null||r.error("Provider combination test failed",{message:a.message}),new C.Notice(`[ERROR] Provider combination failed: ${a.message}`)}catch(a){(o=this.plugin.logger)==null||o.error("Provider combination test error",{error:a});const l=a instanceof Error?a.message:"Unknown error";new C.Notice(`[ERROR] Provider combination failed: ${l}`)}finally{e.textContent=t,e.removeClass("is-loading")}}async testFullPipeline(e){var i,s,r;const t=e.textContent;e.textContent="Testing...",e.addClass("is-loading");try{const o=await this.plugin.graphitiService.testFullPipeline();if(o.success){(i=this.plugin.logger)==null||i.debug("Full pipeline test successful",{message:o.message,latency:o.latency});const a=o.latency?` (${o.latency}ms)`:"";new C.Notice(`[SUCCESS] Full pipeline test successful${a}`)}else(s=this.plugin.logger)==null||s.error("Full pipeline test failed",{message:o.message}),new C.Notice(`[ERROR] Full pipeline test failed: ${o.message}`)}catch(o){(r=this.plugin.logger)==null||r.error("Full pipeline test error",{error:o});const a=o instanceof Error?o.message:"Unknown error";new C.Notice(`[ERROR] Full pipeline test failed: ${a}`)}finally{e.textContent=t,e.removeClass("is-loading")}}async validateAPIKeys(e){var i,s,r,o;const t=e.textContent;e.textContent="Validating...",e.addClass("is-loading");try{(i=this.plugin.logger)==null||i.debug("Validating API keys");const a=await this.plugin.graphitiService.validateAPIKeys();a.success?((s=this.plugin.logger)==null||s.debug("API key validation successful",{message:a.message}),new C.Notice(`[SUCCESS] API keys valid: ${a.message}`)):((r=this.plugin.logger)==null||r.error("API key validation failed",{message:a.message}),new C.Notice(`[ERROR] API key validation failed: ${a.message}`))}catch(a){(o=this.plugin.logger)==null||o.error("API key validation error",{error:a});const l=a instanceof Error?a.message:"Unknown error";new C.Notice(`[ERROR] API key validation failed: ${l}`)}finally{e.textContent=t,e.removeClass("is-loading")}}updateDatabaseDefaults(e){this.plugin.saveSettings(),this.display()}async testDatabaseConnection(e){var i,s,r,o;const t=e.textContent;e.textContent="Testing...",e.addClass("is-loading");try{(i=this.plugin.logger)==null||i.debug("[DATABASE] Testing database connection...");const a=await this.plugin.graphitiService.testDatabaseConnection();if(a.success){(s=this.plugin.logger)==null||s.debug("[DATABASE] Database connection test successful",{message:a.message,latency:a.latency});const l=a.latency?` (${a.latency}ms)`:"";new C.Notice(`[SUCCESS] Database connection successful${l}`)}else(r=this.plugin.logger)==null||r.error("[DATABASE] Database connection test failed",{message:a.message}),new C.Notice(`[ERROR] Database connection failed: ${a.message}`)}catch(a){(o=this.plugin.logger)==null||o.error("[DATABASE] Database connection test error",{error:a});const l=a instanceof Error?a.message:"Unknown error";new C.Notice(`[ERROR] Database connection failed: ${l}`)}finally{e.textContent=t,e.removeClass("is-loading")}}async initializeDatabaseSchema(e){var i,s,r,o;const t=e.textContent;e.textContent="Initializing...",e.addClass("is-loading");try{(i=this.plugin.logger)==null||i.debug("[DATABASE] Initializing database schema...");const a=await this.plugin.graphitiService.initializeDatabaseSchema();a.success?((s=this.plugin.logger)==null||s.debug("[DATABASE] Database schema initialization successful",{message:a.message}),new C.Notice("[SUCCESS] Database schema initialized successfully")):((r=this.plugin.logger)==null||r.error("[DATABASE] Database schema initialization failed",{message:a.message}),new C.Notice(`[ERROR] Schema initialization failed: ${a.message}`))}catch(a){(o=this.plugin.logger)==null||o.error("[DATABASE] Database schema initialization error",{error:a});const l=a instanceof Error?a.message:"Unknown error";new C.Notice(`[ERROR] Schema initialization failed: ${l}`)}finally{e.textContent=t,e.removeClass("is-loading")}}async testMCPConnection(e){var i,s,r;const t=e.textContent;e.textContent="Testing...",e.addClass("is-loading");try{(i=this.plugin.logger)==null||i.debug("[MCP] Testing MCP server connection..."),await new Promise(a=>setTimeout(a,1e3));const o={success:!0,message:"MCP server responding [MOCK]",latency:23};o.success&&((s=this.plugin.logger)==null||s.debug("[MCP] MCP server connection test successful",{message:o.message,latency:o.latency}),new C.Notice(`[SUCCESS] MCP server connection successful (${o.latency}ms)`))}catch(o){(r=this.plugin.logger)==null||r.error("[MCP] MCP server connection test error",{error:o});const a=o instanceof Error?o.message:"Unknown error";new C.Notice(`[ERROR] MCP server connection failed: ${a}`)}finally{e.textContent=t,e.removeClass("is-loading")}}async exportSettings(){try{const e=JSON.stringify(this.plugin.settings,null,2),t=new Blob([e],{type:"application/json"}),i=URL.createObjectURL(t),s=document.createElement("a");s.href=i,s.download="graphiti-plugin-settings.json",s.click(),URL.revokeObjectURL(i),new C.Notice("[SUCCESS] Settings exported successfully")}catch(e){const t=e instanceof Error?e.message:"Unknown error";new C.Notice(`[ERROR] Failed to export settings: ${t}`)}}async importSettings(){try{const e=document.createElement("input");e.type="file",e.accept=".json",e.onchange=async t=>{var o;const i=(o=t.target.files)==null?void 0:o[0];if(!i)return;const s=await i.text(),r=JSON.parse(s);this.plugin.settings={...this.plugin.settings,...r},await this.plugin.saveSettings(),this.display(),new C.Notice("[SUCCESS] Settings imported successfully")},e.click()}catch(e){const t=e instanceof Error?e.message:"Unknown error";new C.Notice(`[ERROR] Failed to import settings: ${t}`)}}async resetToDefaults(){await this.confirmReset()&&(await this.plugin.loadSettings(),this.display(),new C.Notice("[INFO] Settings reset to defaults"))}async confirmReset(){return new Promise(e=>{const t=document.createElement("div");t.className="modal",t.innerHTML=`
				<div class="modal-container">
					<div class="modal-bg"></div>
					<div class="modal-content">
						<div class="modal-header">
							<h3>Reset Settings</h3>
						</div>
						<div class="modal-body">
							<p>Are you sure you want to reset all settings to their default values? This action cannot be undone.</p>
						</div>
						<div class="modal-footer">
							<button class="mod-cta" id="confirm-reset">Reset</button>
							<button id="cancel-reset">Cancel</button>
						</div>
					</div>
				</div>
			`,document.body.appendChild(t);const i=t.querySelector("#confirm-reset"),s=t.querySelector("#cancel-reset");i.onclick=()=>{document.body.removeChild(t),e(!0)},s.onclick=()=>{document.body.removeChild(t),e(!1)},t.onclick=r=>{(r.target===t||r.target===t.querySelector(".modal-bg"))&&(document.body.removeChild(t),e(!1))}})}async checkPythonDependencies(e){var i,s,r,o;const t=e.textContent;e.textContent="Checking...",e.setAttribute("disabled","true");try{(i=this.plugin.logger)==null||i.debug("Checking Python dependencies");const a=await this.plugin.graphitiService.testConnection();a.success?((s=this.plugin.logger)==null||s.debug("Python dependencies check successful",{message:a.message}),new C.Notice("[SUCCESS] Python dependencies are installed and up to date")):((r=this.plugin.logger)==null||r.error("Python dependencies check failed",{message:a.message}),new C.Notice(`[ERROR] Dependencies missing or outdated: ${a.message}`,5e3))}catch(a){(o=this.plugin.logger)==null||o.error("Failed to check Python dependencies",{error:a});const l=a instanceof Error?a.message:"Unknown error";new C.Notice(`[ERROR] Failed to check dependencies: ${l}`,5e3)}finally{e.textContent=t,e.removeAttribute("disabled")}}async viewLogFile(){var e;try{const i=this.plugin.app.vault.adapter.basePath,s=Me.join(i,".obsidian","plugins","megamem-mcp"),r=Me.join(s,"logs"),{shell:o}=require("electron");o.openPath(r),new C.Notice("[INFO] Log files directory opened in file explorer")}catch(t){(e=this.plugin.logger)==null||e.error("[LOGS] Failed to open log directory",{error:t});const i=t instanceof Error?t.message:"Unknown error";new C.Notice(`[ERROR] Failed to open log directory: ${i}`)}}async installPythonDependencies(e){var i,s,r,o;const t=e.textContent;e.textContent="Installing...",e.setAttribute("disabled","true");try{(i=this.plugin.logger)==null||i.debug("Installing Python dependencies");const a=await this.plugin.graphitiService.installDependencies(l=>{var p;(p=this.plugin.logger)==null||p.debug("Installation progress",{message:l});const c=l.length>30?l.substring(0,30)+"...":l;e.textContent=c,new C.Notice(`[INFO] ${l}`,2e3)});a.success?((s=this.plugin.logger)==null||s.debug("Python dependencies installation successful",{message:a.message}),new C.Notice("[SUCCESS] Python dependencies installed successfully",5e3)):((r=this.plugin.logger)==null||r.error("Python dependencies installation failed",{message:a.message}),new C.Notice(`[ERROR] Installation failed: ${a.message}`,8e3))}catch(a){(o=this.plugin.logger)==null||o.error("Failed to install Python dependencies",{error:a});const l=a instanceof Error?a.message:"Unknown error";new C.Notice(`[ERROR] Installation failed: ${l}`,8e3)}finally{e.textContent=t,e.removeAttribute("disabled")}}async runManualSyncTest(e){var i,s,r,o;const t=e.textContent;e.textContent="Selecting Note...",e.setAttribute("disabled","true");try{const a=this.app.vault.getMarkdownFiles();if(a.length===0){new C.Notice("[INFO] No markdown files found in vault");return}const l=await this.selectNoteForSync(a);if(!l){new C.Notice("[INFO] No note selected for sync test");return}e.textContent="Syncing...",(i=this.plugin.logger)==null||i.debug("Starting manual sync test for note",{path:l.path});const c=this.app.vault.adapter.path.resolve(this.app.vault.adapter.basePath,l.path),p=await this.plugin.graphitiService.testManualSync(c);p.status==="success"?((s=this.plugin.logger)==null||s.debug("Manual sync test successful",p),new C.Notice(`[SUCCESS] Manual sync successful! Processed ${p.processed} note(s), ${p.nodeTypesLoaded} node types, ${p.edgeTypesLoaded} edge types`,8e3)):((r=this.plugin.logger)==null||r.error("Manual sync test failed",p),new C.Notice(`[ERROR] Manual sync failed: ${p.message}`,8e3))}catch(a){(o=this.plugin.logger)==null||o.error("Manual sync test error",{error:a});const l=a instanceof Error?a.message:"Unknown error";new C.Notice(`[ERROR] Manual sync test failed: ${l}`,8e3)}finally{e.textContent=t,e.removeAttribute("disabled")}}async selectNoteForSync(e){return new Promise(t=>{const i=document.createElement("div");i.className="modal",i.innerHTML=`
				<div class="modal-container">
					<div class="modal-bg"></div>
					<div class="modal-content">
						<div class="modal-header">
							<h3>Select Note for Manual Sync Test</h3>
						</div>
						<div class="modal-body">
							<p>Choose a note to test the manual sync process:</p>
							<div style="max-height: 300px; overflow-y: auto;">
								${e.map((o,a)=>`<div style="padding: 8px; border: 1px solid var(--background-modifier-border); margin: 4px 0; cursor: pointer; border-radius: 4px;" data-file-index="${a}">
										<strong>${o.basename}</strong><br>
										<small style="color: var(--text-muted);">${o.path}</small>
									</div>`).join("")}
							</div>
						</div>
						<div class="modal-footer">
							<button id="cancel-select">Cancel</button>
						</div>
					</div>
				</div>
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
